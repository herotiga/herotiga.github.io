<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2025-09-03T05:25:46.572Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason小王子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PVE折腾笔记</title>
    <link href="https://herotiga.github.io/2025/09/02/pve-notes/"/>
    <id>https://herotiga.github.io/2025/09/02/pve-notes/</id>
    <published>2025-09-02T08:26:45.000Z</published>
    <updated>2025-09-03T05:25:46.572Z</updated>
    
    <content type="html"><![CDATA[<!-- https://post.smzdm.com/p/a50864k3/ --><p>PVE（Proxmox VE）：基于Debian的开源虚拟化平台，支持KVM虚拟机 和LXC容器。</p><a id="more"></a><p>主要功能：</p><ul><li><p>虚拟机（VM）管理</p></li><li><p>容器（CT）管理</p></li><li><p>Web 管理界面</p></li><li><p>高可用集群（HA）</p></li><li><p>存储与快照（ZFS、Ceph、NFS…）</p></li><li><p>GPU/PCI 直通</p></li></ul><h2 id="安装PVE"><a href="#安装PVE" class="headerlink" title="安装PVE"></a>安装PVE</h2><ol><li>下载PVE镜像文件。<br><a href="https://www.proxmox.com/en/downloads/proxmox-virtual-environment/iso">https://www.proxmox.com/en/downloads/proxmox-virtual-environment/iso</a></li><li>使用写盘工具做好引导盘。比如使用ventoy将u盘初始化为引导盘，然后拷入PVE镜像文件。<br><a href="https://www.ventoy.net/cn/download.html">https://www.ventoy.net/cn/download.html</a></li><li>进入BIOS，开启虚拟化相关的选项比如VT-x,VT-d。将u盘设启动优先级设置为第一。</li><li>重启机器，进入PVE安装引导，根据引导一步步安装。</li><li>安装完毕，cmd会给出web后台的地址。以后只要用web后台页面操作。</li><li>拔出u盘，重启机器，正常由磁盘引导进入PVE。</li></ol><p>主机名：pve.local<br>root密码设置为：12345678</p><h2 id="PVE9-0换源"><a href="#PVE9-0换源" class="headerlink" title="PVE9.0换源"></a>PVE9.0换源</h2><p>在PVE后台中的pve节点中的命令行中运行以下shell脚本。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch pve9_source.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>pve9_source.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">pve9换源</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改基础系统（Debian）的源文件 下面两个命令替换 Debian 官方源和安全更新源。</span></span><br><span class="line">sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list.d/debian.sources</span><br><span class="line">sed -i 's/security.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list.d/debian.sources</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改 Proxmox 的源文件 换源</span></span><br><span class="line">cat &gt; /etc/apt/sources.list.d/pve-no-subscription.sources &lt;&lt;EOF</span><br><span class="line">Types: deb</span><br><span class="line">URIs: https://mirrors.ustc.edu.cn/proxmox/debian/pve</span><br><span class="line">Suites: trixie</span><br><span class="line">Components: pve-no-subscription</span><br><span class="line">Signed-By: /usr/share/keyrings/proxmox-archive-keyring.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改 ceph 源文件 换源</span></span><br><span class="line">if [ -f /etc/apt/sources.list.d/ceph.sources ]; then</span><br><span class="line">  CEPH_CODENAME=`ceph -v | grep ceph | awk '&#123;print $(NF-1)&#125;'`</span><br><span class="line">  source /etc/os-release</span><br><span class="line">  cat &gt; /etc/apt/sources.list.d/ceph.sources &lt;&lt;EOF</span><br><span class="line">Types: deb</span><br><span class="line">URIs: https://mirrors.ustc.edu.cn/proxmox/debian/ceph-$CEPH_CODENAME</span><br><span class="line">Suites: $VERSION_CODENAME</span><br><span class="line">Components: no-subscription</span><br><span class="line">Signed-By: /usr/share/keyrings/proxmox-archive-keyring.gpg</span><br><span class="line">EOF</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pve9_source.sh</span><br></pre></td></tr></table></figure><h2 id="PVE合并local与local-lvm"><a href="#PVE合并local与local-lvm" class="headerlink" title="PVE合并local与local-lvm"></a>PVE合并local与local-lvm</h2><p>如果是硬盘较小的话（&lt;=128GiB）可以将local和local-lvm合并以充分使用硬盘空间，如果硬盘空间较大则无需合并。</p><p><strong>合并之前需要先备份已安装的虚拟机</strong>，然后删除虚拟机。</p><p>在pve节点的命令行中执行：</p><ol><li>删除local-lvm</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvremove /dev/pve/data</span><br></pre></td></tr></table></figure><ol start="2"><li>将容量扩给local</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvextend -l +100%FREE /dev/pve/root</span><br></pre></td></tr></table></figure><ol start="3"><li>扩展文件系统</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resize2fs /dev/pve/root</span><br></pre></td></tr></table></figure><ol start="4"><li>在web后台中数据中心下的存储中删除local-lvm存储，编辑local勾选所有内容。</li></ol><h2 id="PVE开启硬件直通"><a href="#PVE开启硬件直通" class="headerlink" title="PVE开启硬件直通"></a>PVE开启硬件直通</h2><ol><li>在pve节点的命令行中编辑<code>/etc/default/grub</code>文件。</li><li>将<code>GRUB_CMDLINE_LINUX_DEFAULT</code>的值改为<code>quiet intel_iommu=on</code></li><li>reboot</li></ol><h2 id="PVE挂载新硬盘"><a href="#PVE挂载新硬盘" class="headerlink" title="PVE挂载新硬盘"></a>PVE挂载新硬盘</h2><p>如何将新硬盘挂载到PVE中。</p><ol><li>首先，将新硬盘插入物理机。</li><li>进入PVE节点下的磁盘选项，选中新硬盘，点击上方的擦除磁盘，点击上方的使用GPT初始化磁盘。</li><li>进入磁盘-目录，点击创建目录，选择新磁盘，创建完成。</li></ol><p>这里位置，就已经将新硬盘挂载到了PVE。</p><h2 id="fnOS"><a href="#fnOS" class="headerlink" title="fnOS"></a>fnOS</h2><h3 id="fnOS安装"><a href="#fnOS安装" class="headerlink" title="fnOS安装"></a>fnOS安装</h3><p>官网教程：<a href="https://help.fnnas.com/articles/fnosV1/start/install-virtual.md">https://help.fnnas.com/articles/fnosV1/start/install-virtual.md</a></p><ol><li><p>在fnOS官网下载fnOS镜像文件<br><a href="https://www.fnnas.com/">https://www.fnnas.com/</a></p></li><li><p>进入pve节点下的local左侧的ISO镜像，将下载的fnOS镜像文件上传到这里。</p></li><li><p>点击右上角创建虚拟机开始创建虚拟机fnOS<br> 3.1 常规：填写名称，选中开机启动。<br> 3.2 操作系统：选择存储和fnOS镜像，类别选择Linux6.x。<br> 3.3 系统：默认。<br> 3.4 磁盘：选择存储、磁盘大小。<br> 3.5 CPU：类别选择最下面的host，核心数量&lt;=物理机CPU核心数。<br> 3.6 内存：fnOS最少需要2GiB内存。<br> 3.7 网络：取消勾选防火墙。<br> 3.8 确定：确定硬件信息并安装。</p></li><li><p>在左侧选择fnOS虚拟机并启动。</p></li><li><p>按照fnOS安装向导一步步安装。</p></li></ol><p>raid：单盘选择basic，不要选linear。</p><h3 id="fnOS核显直通"><a href="#fnOS核显直通" class="headerlink" title="fnOS核显直通"></a>fnOS核显直通</h3><ol><li>在pve节点下的fnOS虚拟机下的硬件选项中添加PCI设备，选择“原始设备”，设备下拉选择物理机显卡。</li><li>在pve节点下的fnOS虚拟机下的选项中的引导顺序中将显卡勾选。</li></ol><p>这样就成功实现核显直通了。</p><p>在fnOS系统设置下查看GPU是否正确识别。</p><p>进入飞牛相册和飞牛影视中打开GPU加速。</p><p>播放视频选择原画之外的画质查看GPU是否产生负载，确保成功调用了GPU硬编解码。</p><h3 id="fnOS挂载新硬盘"><a href="#fnOS挂载新硬盘" class="headerlink" title="fnOS挂载新硬盘"></a>fnOS挂载新硬盘</h3><p>在已经完成上面的挂载磁盘到PVE后，可以将新硬盘挂载到fnOS中。</p><ol><li>选中fnOS虚拟机，点击硬件，上方添加硬盘，选择新硬盘，完成添加。</li><li>在fnOS中创建存储空间中，添加新硬盘。</li></ol><h3 id="fnOS使用迅雷"><a href="#fnOS使用迅雷" class="headerlink" title="fnOS使用迅雷"></a>fnOS使用迅雷</h3><p>fnOS商店安装的迅雷是docker版的。</p><p>迅雷邀请码：迅雷牛通</p><p>修改下载路径：在docker中设置迅雷下载目录到fnOS下载目录的映射。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- https://post.smzdm.com/p/a50864k3/ --&gt;



&lt;p&gt;PVE（Proxmox VE）：基于Debian的开源虚拟化平台，支持KVM虚拟机 和LXC容器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PVE" scheme="https://herotiga.github.io/categories/PVE/"/>
    
    
  </entry>
  
  <entry>
    <title>鸿蒙开发笔记</title>
    <link href="https://herotiga.github.io/2025/08/17/harmonyos-dev-notes/"/>
    <id>https://herotiga.github.io/2025/08/17/harmonyos-dev-notes/</id>
    <published>2025-08-17T13:58:18.000Z</published>
    <updated>2025-08-28T13:34:56.008Z</updated>
    
    <content type="html"><![CDATA[<p>开发环境：DevEco Studio</p><a id="more"></a><h1 id="开发入门"><a href="#开发入门" class="headerlink" title="开发入门"></a>开发入门</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>代码：</p><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string &#x3D; &#39;Hello World&#39;;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    RelativeContainer() &#123;</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .id(&#39;HelloWorld&#39;)</span><br><span class="line">        .fontSize($r(&#39;app.float.page_text_font_size&#39;))</span><br><span class="line">        .fontWeight(FontWeight.Bold)</span><br><span class="line">        .alignRules(&#123;</span><br><span class="line">          center: &#123; anchor: &#39;__container__&#39;, align: VerticalAlign.Center &#125;,</span><br><span class="line">          middle: &#123; anchor: &#39;__container__&#39;, align: HorizontalAlign.Center &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .onClick(() &#x3D;&gt; &#123;</span><br><span class="line">          this.message &#x3D; &#39;Welcome&#39;;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#39;100%&#39;)</span><br><span class="line">    .width(&#39;100%&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>@Component</code>装饰器装饰了<code>struct</code>关键字声明的数据结构<code>Index</code>。<br>Index被@Component装饰后具备组件化的能力，通过实现<code>build</code>方法描述UI。</p></li><li><p><code>@Entry</code>装饰的@Component将作为UI页面的入口。<br>在单个UI页面中，最多可以使用@Entry装饰一个自定义组件。</p></li><li><p>界面由<code>RelativeContainer</code>相对布局容器作为根容器，RelativeContainer支持容器内部的子元素设置相对位置关系，适用于界面复杂场景的情况，对多个子组件进行对齐和排列。</p></li><li><p>通过<code>Text</code>组件展示了一段文本Hello World。</p></li><li><p>文本信息由<code>@State</code>装饰器装饰的状态变量<code>message</code>驱动。</p></li><li><p>Text组件定义了组件标识<code>id</code>为HelloWorld，用于唯一指定组件。</p></li><li><p>定义字体大小<code>fontSize</code>取值为<code>$r(&#39;app.float.page_text_font_size&#39;)</code>资源类型。<br>定义文本的字体粗细<code>fontWeight</code>取值为Bold，即字体较粗。</p></li><li><p>字体大小等数据的值一般存储在<code>/entry/src/main/resources/base/element/float.json</code>文件下，可以按照上文<code>page_text_font_size</code>的方式保存至<code>float.json</code>文件中，并通过<code>$r(&#39;app.float.xxx&#39;)</code>进行资源引用。</p></li><li><p><code>alignRules</code>属性用于指定设置在相对容器中子组件的对齐规则，仅当父容器为RelativeContainer时生效，在这里定义Text组件横向居中和纵向居中。</p></li><li><p>开启右边栏的Previewer，预览器将工程中的@Entry作为实现入口，自动实现预览。此处需要选中@Entry所在的文件，预览器才能顺利打开。</p></li><li><p>修改APP的名称为“HMOS世界入门版”。修改<code>entry/src/main/resources/base/element/string.json</code>文件，将<code>EntryAbility_label</code>的value修改为“HMOS世界入门版”。</p></li><li><p>修改APP的图标。将01_Resources文件夹中的background.png和foreground.png图片重命名为app_background.png和app_foreground.png，并复制粘贴到<code>AppScope/resources/base/media</code>文件夹中，将其中原本的app_background.png和app_foreground.png文件替换掉。</p></li></ol><h2 id="页面结构总览"><a href="#页面结构总览" class="headerlink" title="页面结构总览"></a>页面结构总览</h2><img class="phone" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyManage/011/111/111/0000000000011111111.20250523143754.39910552343967919074160010599020:50001231000000:2800:802D3436AEA030604584564FB8463C01620F86D4F4920BCC6A6AEB9977064F37.png?needInitFileName=true" /><style lang="scss">.gallery-item {  display: block;  text-align: center;}.phone {  max-width: 66%;}</style><ol><li><p>抽象页面结构</p><ul><li><p>页面分为三大部分。其中，第1部分为轮播图部分，第2部分为赋能套件部分，第3部分为入门教程部分。</p></li><li><p>轮播图部分：可自动播放、展示多张图片的组件，命名为Banner，每一个元素为BannerItem。</p></li><li><p>赋能套件部分：横向可滑动的组件，命名为Enablement ，由多个EnablementItem组成。</p></li><li><p>入门教程部分：纵向可滑动的组件，命名为Tutorial ，由多个TutorialItem组成。</p></li></ul></li></ol><ol start="2"><li><p>选择布局实现页面</p><ul><li><p>轮播图部分：Swiper组件提供滑动轮播显示的能力。</p></li><li><p>赋能套件部分：Grid组件为网格容器，由“行”和“列”分割的单元格所组成，其中容器内各条目对应一个GridItem组件。如果仅设置行、列数量与占比中的一个，网格单元将按照设置的方向排列，超出Grid显示区域后，Grid拥有可滚动能力。在这部分，可以设置单行显示，则赋能套件部分可以横向滑动。</p></li><li><p>入门教程部分：List容器可以轻松高效地显示结构化、可滚动的信息。当列表项达到一定数量，内容超过屏幕大小时，可以自动提供滚动功能。</p></li></ul></li></ol><h2 id="自定义文本视图"><a href="#自定义文本视图" class="headerlink" title="自定义文本视图"></a>自定义文本视图</h2><p>可以通过Previewer预览试图。<br>可以通过Inspector工具观察组件。</p><p>代码：</p><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string &#x3D; &#39;快速入门&#39;;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(24)</span><br><span class="line">        .fontWeight(700)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#39;100%&#39;)</span><br><span class="line">    .width(&#39;100%&#39;)</span><br><span class="line">    .backgroundColor(&#39;#F1F3F5&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>将根容器从RelativeContainer更改为<code>Column</code>。Column容器可以使组件内的元素沿垂直方向布局。删除Text组件的alignRules属性，这是由于alignRules属性在Column容器中不生效。删除Text组件的id属性，因为不需要识别该组件。</p></li><li><p>为整体组件添加背景色，取值为<code>&#39;#F1F3F5&#39;</code>。</p></li><li><p>手动编辑代码，将’快速入门’置于屏幕左上角。修改文本与屏幕左侧边距，首先将Text组件宽度设置为占满屏幕（100%），并设置文本对齐属性为Start，文本在Text组件内会向左对齐。</p></li></ol><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string &#x3D; &#39;快速入门&#39;;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(24)</span><br><span class="line">        .fontWeight(700)</span><br><span class="line">        .width(&#39;100%&#39;)</span><br><span class="line">        .textAlign(TextAlign.Start)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#39;100%&#39;)</span><br><span class="line">    .width(&#39;100%&#39;)</span><br><span class="line">    .backgroundColor(&#39;#F1F3F5&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设置文本左边距，<code>padding</code>属性可以设置内容器向内的边距，此处设置左边距（left）为16。</li></ol><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string &#x3D; &#39;快速入门&#39;;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(24)</span><br><span class="line">        .fontWeight(700)</span><br><span class="line">        .width(&#39;100%&#39;)</span><br><span class="line">        .textAlign(TextAlign.Start)</span><br><span class="line">        .padding(&#123; left: 16 &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#39;100%&#39;)</span><br><span class="line">    .width(&#39;100%&#39;)</span><br><span class="line">    .backgroundColor(&#39;#F1F3F5&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>设置<code>fontFamily</code>字体属性为<code>&#39;HarmonyHeiTi-Bold&#39;</code>，设置<code>lineHeight</code>行高属性为<code>33</code>。</li></ol><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string &#x3D; &#39;快速入门&#39;;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(24)</span><br><span class="line">        .fontWeight(700)</span><br><span class="line">        .width(&#39;100%&#39;)</span><br><span class="line">        .textAlign(TextAlign.Start)</span><br><span class="line">        .padding(&#123; left: 16 &#125;)</span><br><span class="line">        .fontFamily(&#39;HarmonyHeiTi-Bold&#39;)</span><br><span class="line">        .lineHeight(33)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#39;100%&#39;)</span><br><span class="line">    .width(&#39;100%&#39;)</span><br><span class="line">    .backgroundColor(&#39;#F1F3F5&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><code>HarmonyHeiTi-Bold</code>字体为较粗的鸿蒙黑体，已在DevEco Studio中内置，直接使用即可。</li></ol><h2 id="创建Image组件"><a href="#创建Image组件" class="headerlink" title="创建Image组件"></a>创建Image组件</h2><p>在上一节中，我们创建了标题视图，接下来需要使用<code>Image</code>组件添加图片。Previewer可以直接预览@Entry装饰器装饰的整个页面，也可以预览由<code>@Preview</code>装饰器装饰的单独组件。 本节中将学习如何单独预览组件视图，并将视图组合进整个页面。</p><ol><li>在当前Index.ets文件内建立一个命名为Banner的空组件，并用@Preview装饰器装饰，以便单独预览组件。</li></ol><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string &#x3D; &#39;快速入门&#39;;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(24)</span><br><span class="line">        .fontWeight(700)</span><br><span class="line">        .width(&#39;100%&#39;)</span><br><span class="line">        .textAlign(TextAlign.Start)</span><br><span class="line">        .padding(&#123; left: 16 &#125;)</span><br><span class="line">        .fontFamily(&#39;HarmonyHeiTi-Bold&#39;)</span><br><span class="line">        .lineHeight(33)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#39;100%&#39;)</span><br><span class="line">    .width(&#39;100%&#39;)</span><br><span class="line">    .backgroundColor(&#39;#F1F3F5&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Preview</span><br><span class="line">@Component</span><br><span class="line">struct Banner &#123;</span><br><span class="line">  build() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在Banner组件中添加图片。首先，将01_Resources文件夹中的banner_pic1.png放置在<code>entry -&gt; src -&gt; main -&gt; resources -&gt; base -&gt; media</code>路径下。</li></ol><img class="tree" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyManage/011/111/111/0000000000011111111.20240620182645.28082297230615696520694676994360:50001231000000:2800:FAB941D05CC6307AE5FDA7E69AA08D5ED27E7E4B818E2967B5BCFF030DDB5F85.png?needInitFileName=true" /><style lang="scss">.tree {  max-width: 66%;}</style><p>ArkUI提供了Image组件用于显示图片，此处使用<code>$r(&#39;app.media.文件名字&#39;)</code>的方式将media文件夹下的图片读取到Image组件内。</p><p>设置图片的填充效果为Contain模式，即保持宽高比进行缩小或者放大，使得图片完全显示在显示边界内。</p><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string &#x3D; &#39;快速入门&#39;;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(24)</span><br><span class="line">        .fontWeight(700)</span><br><span class="line">        .width(&#39;100%&#39;)</span><br><span class="line">        .textAlign(TextAlign.Start)</span><br><span class="line">        .padding(&#123; left: 16 &#125;)</span><br><span class="line">        .fontFamily(&#39;HarmonyHeiTi-Bold&#39;)</span><br><span class="line">        .lineHeight(33)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#39;100%&#39;)</span><br><span class="line">    .width(&#39;100%&#39;)</span><br><span class="line">    .backgroundColor(&#39;#F1F3F5&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Preview</span><br><span class="line">@Component</span><br><span class="line">struct Banner &#123;</span><br><span class="line">  build() &#123;</span><br><span class="line">    Image($r(&#39;app.media.banner_pic1&#39;))</span><br><span class="line">      .objectFit(ImageFit.Contain)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>预览Banner组件。将预览器调整至组件预览模式，可以单独观察到组件的视图预览。值得注意的是，此时的Inspector是不可用状态。</li></ol><img class="tree" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyManage/011/111/111/0000000000011111111.20240620165434.44425739105663905881003760735688:50001231000000:2800:9A1AA16122F9EAD5FE373D4E43CBDE135D981218BA5CA9A9AC5501409D0AB7C7.png?needInitFileName=true" /><style lang="scss">.tree {  max-width: 66%;}</style><ol start="4"><li>组合标题和图片视图。在@Entry装饰器装饰的Index组件中引入Banner组件，放在Text的下方，使用预览器预览完整视图。</li></ol><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State message: string &#x3D; &#39;快速入门&#39;;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(24)</span><br><span class="line">        .fontWeight(&#39;700&#39;)</span><br><span class="line">        .width(&#39;100%&#39;)</span><br><span class="line">        .textAlign(TextAlign.Start)</span><br><span class="line">        .padding(&#123; left: 16 &#125;)</span><br><span class="line">        .fontFamily(&#39;HarmonyHeiTi-Bold&#39;)</span><br><span class="line">        .lineHeight(33)</span><br><span class="line">      Banner()</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#39;100%&#39;)</span><br><span class="line">    .width(&#39;100%&#39;)</span><br><span class="line">    .backgroundColor(&#39;#F1F3F5&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Preview</span><br><span class="line">@Component</span><br><span class="line">struct Banner &#123;</span><br><span class="line">  build() &#123;</span><br><span class="line">    Image($r(&#39;app.media.banner_pic1&#39;))</span><br><span class="line">      .objectFit(ImageFit.Contain)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>调整图片的属性以达到设计效果。设置Image组件宽度为铺满整个屏幕。</li></ol><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Preview</span><br><span class="line">@Component</span><br><span class="line">struct Banner &#123;</span><br><span class="line">  build() &#123;</span><br><span class="line">    Image($r(&#39;app.media.banner_pic1&#39;))</span><br><span class="line">      .objectFit(ImageFit.Contain)</span><br><span class="line">      .width(&#39;100%&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置图片与标题和边框的边距。</p><p>padding属性可以设置内容器向内的边距，此处设置左右边距（left、right）为16，上边距（top）为11。设置图片四角的圆角值为16。</p><figure class="highlight plain"><figcaption><span>Index.ets</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Preview</span><br><span class="line">@Component</span><br><span class="line">struct Banner &#123;</span><br><span class="line">  build() &#123;</span><br><span class="line">    Image($r(&#39;app.media.banner_pic1&#39;))</span><br><span class="line">      .objectFit(ImageFit.Contain)</span><br><span class="line">      .width(&#39;100%&#39;)</span><br><span class="line">      .padding(&#123; top: 11, left: 16, right: 16 &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- https://developer.huawei.com/consumer/cn/codelabsPortal/carddetails/tutorials_Next-SwiperBanner --><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://developer.huawei.com/consumer/cn/codelabsPortal/getstarted/101718800110527001">https://developer.huawei.com/consumer/cn/codelabsPortal/getstarted/101718800110527001</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发环境：DevEco Studio&lt;/p&gt;
    
    </summary>
    
    
      <category term="HarmonyOS" scheme="https://herotiga.github.io/categories/HarmonyOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Pinia的使用</title>
    <link href="https://herotiga.github.io/2024/11/22/Pinia%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://herotiga.github.io/2024/11/22/Pinia%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-11-22T01:43:31.000Z</published>
    <updated>2025-08-12T07:08:16.478Z</updated>
    
    <content type="html"><![CDATA[<p>Pinia 是最近流行的状态管理库，可以替代 Vuex。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><h2 id="项目中引入-Pinia"><a href="#项目中引入-Pinia" class="headerlink" title="项目中引入 Pinia"></a>项目中引入 Pinia</h2><p>在项目入口文件中引入 Pinia。</p><figure class="highlight ts"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Pinia 实例</span></span><br><span class="line"><span class="keyword">const</span> pinia = createPinia();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载 Pinia</span></span><br><span class="line">app.use(pinia);</span><br><span class="line">app.mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><h2 id="创建-Store"><a href="#创建-Store" class="headerlink" title="创建 Store"></a>创建 Store</h2><p>下一步就是创建 Store。</p><p>一般是在 stores 目录下创建 Store。</p><figure class="highlight js"><figcaption><span>stores/counter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = defineStore(<span class="string">"counter"</span>, &#123;</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 计算属性，用于派生状态</span></span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCount: <span class="function">(<span class="params">state</span>) =&gt;</span> state.count * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 用于同步或者异步修改状态</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      <span class="keyword">this</span>.count++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="在组件中使用-Store"><a href="#在组件中使用-Store" class="headerlink" title="在组件中使用 Store"></a>在组件中使用 Store</h2><p>创建好了 Store 就可以在组件中使用 Store 了。</p><figure class="highlight html"><figcaption><span>componentA.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; counter.count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Double Count: &#123;&#123; counter.doubleCount &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter.increment"</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">"../stores/counter"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> counter = useCounterStore();</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>可以使用 Pinia 插件将状态持久化到 localStorage。</p><ol><li>安装插件</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure><ol start="2"><li>在入口文件中引入插件</li></ol><figure class="highlight ts"><figcaption><span>main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">"pinia-plugin-persistedstate"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = createPinia();</span><br><span class="line">pinia.use(piniaPluginPersistedstate);</span><br></pre></td></tr></table></figure><ol start="3"><li>启用持久化</li></ol><figure class="highlight ts"><figcaption><span>stores/counter.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = defineStore(<span class="string">"counter"</span>, &#123;</span><br><span class="line">  state: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  persist: <span class="literal">true</span>, <span class="comment">// 启用持久化</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pinia 是最近流行的状态管理库，可以替代 Vuex。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://herotiga.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>微前端架构方案——qiankun</title>
    <link href="https://herotiga.github.io/2024/09/07/micro-frontend-qiankun/"/>
    <id>https://herotiga.github.io/2024/09/07/micro-frontend-qiankun/</id>
    <published>2024-09-07T07:47:23.000Z</published>
    <updated>2024-10-15T00:45:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>qiankun是基于Single-SPA的微前端实现库。</p><p>qiankun中的每一个微前端应用都有自己独立的生命周期和上下文环境，每个微前端内可以使用自己的技术栈。</p><a id="more"></a><h2 id="qiankun的核心设计理念"><a href="#qiankun的核心设计理念" class="headerlink" title="qiankun的核心设计理念"></a>qiankun的核心设计理念</h2><ul><li><p><strong>简单</strong>：qiankun对于开发者而言就是一个类似jQuery的库，只需要调用几个qiankun的API就可以完成应用的微前端改造。qiankun使用HTML entry和沙箱设计，接入微应用就像使用iframe一样简单。</p></li><li><p><strong>解耦以及技术栈无关</strong>：微前端的核心目标是将巨石应用拆解成多个可以自治的松耦合微应用，qiankun使用这一原则。qiankun的HTML entry、沙箱、应用间通信等确保了微应用可以独立开发独立运行。</p></li></ul><h2 id="qiankun如何在项目中使用"><a href="#qiankun如何在项目中使用" class="headerlink" title="qiankun如何在项目中使用"></a>qiankun如何在项目中使用</h2><h3 id="主应用中注册微应用"><a href="#主应用中注册微应用" class="headerlink" title="主应用中注册微应用"></a>主应用中注册微应用</h3><ol><li>安装qiankun</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S qiankun</span><br></pre></td></tr></table></figure><ol start="2"><li>在主应用中注册微应用</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">'qiankun'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册多个微应用</span></span><br><span class="line">registerMicroApps([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 微应用的名称，唯一</span></span><br><span class="line">    name: <span class="string">'react app'</span>,</span><br><span class="line">    <span class="comment">// 微应用的入口</span></span><br><span class="line">    entry: <span class="string">'//localhost:7100'</span>,</span><br><span class="line">    <span class="comment">// 微应用的容器节点id</span></span><br><span class="line">    container: <span class="string">'#yourContainer'</span>,</span><br><span class="line">    <span class="comment">// 微应用的匹配规则</span></span><br><span class="line">    activeRule: <span class="string">'/yourActiveRule'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'vue app'</span>,</span><br><span class="line">    entry: &#123; <span class="attr">scripts</span>: [<span class="string">'//localhost:7100/main.js'</span>] &#125;,</span><br><span class="line">    container: <span class="string">'#yourContainer2'</span>,</span><br><span class="line">    activeRule: <span class="string">'/yourActiveRule2'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">start();</span><br></pre></td></tr></table></figure><p>浏览器的URL发生变化后，qiankun会自动匹配规则，所有<code>activeRule</code>规则（路由匹配）匹配上的微应用都会被插入到指定的container中，同时一次调用微应用暴露出的生命周期钩子。</p><p>如果微应用不是直接跟路由关联的时候，你也可以选择手动加载微应用的方式：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loadMicroApp &#125; <span class="keyword">from</span> <span class="string">'qiankun'</span>;</span><br><span class="line"></span><br><span class="line">loadMicroApp(&#123;</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  entry: <span class="string">'//localhost:7100'</span>,</span><br><span class="line">  container: <span class="string">'#yourContainer'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="微应用"><a href="#微应用" class="headerlink" title="微应用"></a>微应用</h3><p>微应用不需要额外安装任何其他依赖即可接入qiankun主应用。</p><ol><li>导出相应的生命周期钩子</li></ol><p>微应用需要在自己的入口js(通常就是你配置的webpack的entry js)导出bootstrap、mount、unmount三个生命周期钩子，以供主应用在适当的时机调用。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。</span></span><br><span class="line"><span class="comment"> * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'react app bootstraped'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, props.container ? props.container.querySelector(<span class="string">'#root'</span>) : <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  ReactDOM.unmountComponentAtNode(</span><br><span class="line">    props.container ? props.container.querySelector(<span class="string">'#root'</span>) : <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可选生命周期钩子，仅使用 loadMicroApp 方式加载微应用时生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'update props'</span>, props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置微应用的打包工具</li></ol><p>除了代码中暴露出相应的生命周期钩子之外，为了让主应用能正确识别微应用暴露出来的一些信息，微应用的打包工具需要增加如下配置：</p><p>webpack v5:</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> packageName = <span class="built_in">require</span>(<span class="string">'./package.json'</span>).name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    library: <span class="string">`<span class="subst">$&#123;packageName&#125;</span>-[name]`</span>,</span><br><span class="line">    libraryTarget: <span class="string">'umd'</span>,</span><br><span class="line">    chunkLoadingGlobal: <span class="string">`webpackJsonp_<span class="subst">$&#123;packageName&#125;</span>`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>webpack v4:</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> packageName = <span class="built_in">require</span>(<span class="string">'./package.json'</span>).name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    library: <span class="string">`<span class="subst">$&#123;packageName&#125;</span>-[name]`</span>,</span><br><span class="line">    libraryTarget: <span class="string">'umd'</span>,</span><br><span class="line">    jsonpFunction: <span class="string">`webpackJsonp_<span class="subst">$&#123;packageName&#125;</span>`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://qiankun.umijs.org/zh">https://qiankun.umijs.org/zh</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;qiankun是基于Single-SPA的微前端实现库。&lt;/p&gt;
&lt;p&gt;qiankun中的每一个微前端应用都有自己独立的生命周期和上下文环境，每个微前端内可以使用自己的技术栈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://herotiga.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>微前端架构</title>
    <link href="https://herotiga.github.io/2024/09/07/micro-frontend-arch/"/>
    <id>https://herotiga.github.io/2024/09/07/micro-frontend-arch/</id>
    <published>2024-09-07T02:56:13.000Z</published>
    <updated>2024-09-07T14:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p><strong>微前端</strong>是一种前端架构。</p><p>类似于后端的微服务架构，微前端就是将传统的SPA拆分为多个独立的前端模块，每个模块内可以使用不同的技术栈，多个模块可以由多个团队独立开发、测试、部署。</p></div></article><a id="more"></a><h2 id="微前端的核心思想"><a href="#微前端的核心思想" class="headerlink" title="微前端的核心思想"></a>微前端的核心思想</h2><ul><li><p><strong>模块化</strong>：每个微前端模块都是独立的，可以使用自己的技术栈、依赖、部署流程。</p></li><li><p><strong>独立性</strong>：不同的微前端模块可以由多个团队各自独立开发，互不干扰。</p></li><li><p><strong>灵活集成</strong>：最终可以由多个模块集成到一个页面上。</p></li><li><p><strong>隔离性</strong>：每个模块避免相互依赖。</p></li></ul><h2 id="微前端的优势"><a href="#微前端的优势" class="headerlink" title="微前端的优势"></a>微前端的优势</h2><ul><li><p><strong>模块可以独立开发和部署</strong>：各个团队可以独立开发和部署不同的微前端模块。</p></li><li><p><strong>每个模块技术栈各自独立</strong>：不同的微前端模块可以选择不同的技术栈。</p></li><li><p><strong>可渐进式升级</strong>：可以渐进的重写原有代码。</p></li><li><p><strong>可维护性高</strong>：微前端架构使得整个系统易于维护。</p></li></ul><h2 id="微前端的实现方式"><a href="#微前端的实现方式" class="headerlink" title="微前端的实现方式"></a>微前端的实现方式</h2><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>iframe嵌入页面，每个页面是一个单独的应用。这个方案性能很差，iframe之间很难通信。</p><h3 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h3><p>Web Components是浏览器原生支持的组件方案，允许创建自定义元素。</p><h3 id="Module-Federation"><a href="#Module-Federation" class="headerlink" title="Module Federation"></a>Module Federation</h3><p>webpack5引入了Module Federation来做微前端。</p><p>Module Federation允许不同的前端模块动态加载其他模块的代码。</p><h3 id="基于路由分发"><a href="#基于路由分发" class="headerlink" title="基于路由分发"></a>基于路由分发</h3><p>可以使用不同的路由区分不同的微前端模块，基于路由分发请求到微前端模块。</p><h3 id="Single-SPA"><a href="#Single-SPA" class="headerlink" title="Single-SPA"></a>Single-SPA</h3><p>Single-SPA框架允许多个微前端同时在一个页面运行，支持三大框架。</p><p>Single-SPA是将不同的微前端应用通过路由进行管理（先注册所有应用的路由，根据URL匹配应用），使得每个微前端应用可以独立加载、渲染、卸载。</p><p>Single-SPA支持React、Vue、Angular。</p><h3 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a>qiankun</h3><p>qiankun基于Single-SPA做了优化，支持在同一个页面中挂载多个微前端应用，提供了简单地API和开箱即用的方案。</p><p>实际开发中一般选择qiankun做微前端。</p>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;&lt;strong&gt;微前端&lt;/strong&gt;是一种前端架构。&lt;/p&gt;
&lt;p&gt;类似于后端的微服务架构，微前端就是将传统的SPA拆分为多个独立的前端模块，每个模块内可以使用不同的技术栈，多个模块可以由多个团队独立开发、测试、部署。&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://herotiga.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>前后端项目是如何部署的</title>
    <link href="https://herotiga.github.io/2024/09/06/application-deploy-flow/"/>
    <id>https://herotiga.github.io/2024/09/06/application-deploy-flow/</id>
    <published>2024-09-05T16:07:52.000Z</published>
    <updated>2024-09-07T15:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前公司的前后端部署流程是这样的：</p><ol><li>本地推送feature分支到远端gitlab。</li><li>在gitlab将feature分支merge到目标分支比如test分支（test分支上挂有任务）。</li><li>merge完成后会触发任务，任务包括这几个阶段：<br> 3.1 运行测试任务。<br> 3.2 构建项目和编译目标代码。<br> 3.3 将Dockerfile（镜像）以及编译出的代码推送到目标服务器。<br> 3.4 在目标服务器上构建出Docker容器，启动Docker容器。</li></ol><a id="more"></a><h2 id="前端应用部署"><a href="#前端应用部署" class="headerlink" title="前端应用部署"></a>前端应用部署</h2><ol><li><p>打包前端应用<br>前端应用最终会被打包成一些静态文件：html, css, js, jpg等格式。通常这些文件是在dist/目录下。</p></li><li><p>上传文件到服务器<br>将这些静态文件通过ftp、scp上传到服务器。</p></li><li><p>配置web服务器<br>配置web服务器，将上一步服务器上的静态文件目录设置为根目录，并处理未匹配到的路由。</p></li></ol><p>比如，nginx配置：</p><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name your-domain.com;</span><br><span class="line"></span><br><span class="line">    # 将对于路由&#x2F;的请求匹配到&#x2F;path&#x2F;to&#x2F;dist目录下的index.html</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;path&#x2F;to&#x2F;dist;</span><br><span class="line">        index index.html;</span><br><span class="line">        # 将未能匹配到的路由请求路由到index.html</span><br><span class="line">        try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后端应用部署"><a href="#后端应用部署" class="headerlink" title="后端应用部署"></a>后端应用部署</h2><ol><li>打包微服务应用</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前公司的前后端部署流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地推送feature分支到远端gitlab。&lt;/li&gt;
&lt;li&gt;在gitlab将feature分支merge到目标分支比如test分支（test分支上挂有任务）。&lt;/li&gt;
&lt;li&gt;merge完成后会触发任务，任务包括这几个阶段：&lt;br&gt; 3.1 运行测试任务。&lt;br&gt; 3.2 构建项目和编译目标代码。&lt;br&gt; 3.3 将Dockerfile（镜像）以及编译出的代码推送到目标服务器。&lt;br&gt; 3.4 在目标服务器上构建出Docker容器，启动Docker容器。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>RPC学习笔记</title>
    <link href="https://herotiga.github.io/2024/09/04/RPC/"/>
    <id>https://herotiga.github.io/2024/09/04/RPC/</id>
    <published>2024-09-04T15:55:27.000Z</published>
    <updated>2024-09-07T07:56:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机通信协议，它允许程序在不同的地址空间中调用另一个程序的函数，就像调用本地函数一样。通过RPC，开发人员可以构建分布式系统，其中程序可以在不同的计算机或网络节点上运行，但仍能相互通信并调用对方的服务或方法。</p></blockquote><a id="more"></a><h2 id="RPC工作流程"><a href="#RPC工作流程" class="headerlink" title="RPC工作流程"></a>RPC工作流程</h2><ol><li>客户端发起调用：客户端调用一个本地的代理函数（stub），并将参数传给它。</li><li>序列化参数：客户端stub将参数序列化。</li><li>发送请求：将请求发送到被调用的远程服务器。</li><li>远程服务器处理请求：远程服务器收到请求后反序列化参数，调用本地的目标函数。</li><li>远程服务器返回调用结果：远程服务器执行完函数后，将执行结果序列化并返回给客户端。</li><li>客户端接收结果：客户端接受到远程服务器的响应，然后反序列化结果，最后将它返回给最初调用的程序。</li></ol><h2 id="RPC框架"><a href="#RPC框架" class="headerlink" title="RPC框架"></a>RPC框架</h2><p>主流的RPC框架有：</p><ul><li>gRPC</li><li>Dubbo</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;RPC（Remote Procedure Call，远程过程调用）是一种计算机通信协议，它允许程序在不同的地址空间中调用另一个程序的函数，就像调用本地函数一样。通过RPC，开发人员可以构建分布式系统，其中程序可以在不同的计算机或网络节点上运行，但仍能相互通信并调用对方的服务或方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://herotiga.github.io/categories/Java/"/>
    
      <category term="RPC" scheme="https://herotiga.github.io/categories/RPC/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis在实际业务中的使用场景</title>
    <link href="https://herotiga.github.io/2024/09/04/Redis%E5%9C%A8%E4%B8%9A%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://herotiga.github.io/2024/09/04/Redis%E5%9C%A8%E4%B8%9A%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2024-09-04T14:24:35.000Z</published>
    <updated>2024-11-02T10:01:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis是一个高性能的KV内存数据库，实际业务中有很多使用场景。</p><a id="more"></a><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul><li>可以将高频访问的数据缓存到Redis以降低后端数据库压力。</li><li>可以将查询耗时长的查询结果缓存到Redis避免重复查询。</li></ul><h2 id="会话存储"><a href="#会话存储" class="headerlink" title="会话存储"></a>会话存储</h2><p>在分布式系统中Redis可以用来存储用户会话数据，从而使不同的服务器可以共享用户的会话数据。</p><h2 id="数据过期"><a href="#数据过期" class="headerlink" title="数据过期"></a>数据过期</h2><p>Redis可以设置键的过期时间，适合存储需要自动过期的数据，比如验证码、临时令牌。</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>在分布式系统中，使用Redis的原子操作可以实现分布式锁，确保多个进程或者服务不会同时操作同一个资源。</p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul><li>Redis支持发布/订阅模式，可以作为简单的消息队列使用。</li><li>可以使用Redis的列表数据结构实现任务队列，适合处理需要排队执行的任务。</li></ul><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>Redis可以实现延迟任务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis是一个高性能的KV内存数据库，实际业务中有很多使用场景。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://herotiga.github.io/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL中UPDATE和INSERT在加锁上有什么区别</title>
    <link href="https://herotiga.github.io/2024/09/04/mysql-update-insert-lock-diff/"/>
    <id>https://herotiga.github.io/2024/09/04/mysql-update-insert-lock-diff/</id>
    <published>2024-09-04T08:07:37.000Z</published>
    <updated>2024-09-04T08:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在MySQL中，<code>UPDATE</code>和<code>INSERT</code>在加锁上有一些区别。</p><a id="more"></a><h2 id="锁的范围"><a href="#锁的范围" class="headerlink" title="锁的范围"></a>锁的范围</h2><ul><li>UPDATE</li></ul><p>使用UPDATE只会对需要更新的一行或者多行进行加锁，加的是行锁。</p><p>如果还使用了<code>WHERE</code>则还会加上间隙锁，锁住范围内不存在的索引项之间的间隙防止其他事务插入新行。</p><ul><li>INSERT</li></ul><p>INSERT不会加行锁，它会对插入位置加上插入意向锁（Insert Intention Lock）以防止并发插入时死锁。</p><h2 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h2><ul><li>UPDATE</li></ul><p>UPDATE会使用排他锁锁住需要更新的行。</p><ul><li>INSERT</li></ul><p>INSERT会使用排他锁来保证数据一致性，插入完成后释放锁。</p><h2 id="锁的冲突"><a href="#锁的冲突" class="headerlink" title="锁的冲突"></a>锁的冲突</h2><ul><li>UPDATE</li></ul><p>UPDATE会使用排他锁，故而可能导致锁等待或者死锁。</p><ul><li>INSERT</li></ul><p>并发INSERT时一般不会发生锁冲突。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在MySQL中，&lt;code&gt;UPDATE&lt;/code&gt;和&lt;code&gt;INSERT&lt;/code&gt;在加锁上有一些区别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://herotiga.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL中的锁</title>
    <link href="https://herotiga.github.io/2024/09/04/mysql-lock/"/>
    <id>https://herotiga.github.io/2024/09/04/mysql-lock/</id>
    <published>2024-09-04T07:27:08.000Z</published>
    <updated>2024-09-04T10:35:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL中有哪些锁？这些锁的作用又是什么？</p><p>MySQL中的锁按照颗粒度从粗到细分为：</p><ul><li>全局锁</li><li>表级锁</li><li>行级锁</li></ul><a id="more"></a><article class="message is-info"><div class="message-body"><p>SQL分类：</p><ol><li><p>DDL(Data Definition Language)数据定义语言：用来操作数据库、表、列等。常用语句：CREATE、ALTER、DROP。</p></li><li><p>DML(Data Manipulation Language)数据操作语言：用来操作数据库中表里的数据。常用语句：INSERT、 UPDATE、DELETE。</p></li><li><p>DCL(Data Control Language)数据控制语言：用来操作访问权限和安全级别。常用语句：GRANT、DENY。</p></li><li><p>DQL(Data Query Language)数据查询语言：用来查询数据。常用语句：SELECT。</p></div></article></li></ol><h2 id="全局锁（Global-Lock）"><a href="#全局锁（Global-Lock）" class="headerlink" title="全局锁（Global Lock）"></a>全局锁（Global Lock）</h2><p>全局锁会锁住整个数据库并且数据库处于只读状态，只能进行DQL操作不能进行DDL（包括定义、改变表结构、数据类型、表之间链接的操作）和DML操作，适用于需要保证数据一致性的场景比如数据备份。</p><p>数据备份加锁步骤：</p><ol><li>加全局锁，之后只能进行DQL操作。<figure class="highlight sql"><figcaption><span>SQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">TABLES</span> <span class="keyword">WITH</span> <span class="keyword">READ</span> <span class="keyword">LOCK</span>;</span><br></pre></td></tr></table></figure></li><li>使用mysqldump备份数据库。<figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --user user --password database_name --result-file=path/to/file.sql</span><br></pre></td></tr></table></figure></li><li>备份完成后解开全局锁。<figure class="highlight sql"><figcaption><span>SQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span><br></pre></td></tr></table></figure></li><li>正常进行DDL、DML、DQL操作。</li></ol><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><p>表级锁分为：</p><ul><li>表锁</li><li>元数据锁</li><li>意向锁</li></ul><h3 id="表锁（Table-Lock）"><a href="#表锁（Table-Lock）" class="headerlink" title="表锁（Table Lock）"></a>表锁（Table Lock）</h3><figure class="highlight sql"><figcaption><span>SQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给表加锁</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> table_name [<span class="keyword">READ</span> | WRITE]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 释放锁</span></span><br><span class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span><br></pre></td></tr></table></figure><p>表锁锁的是整张表，表所细分为读锁和写锁。</p><ul><li>读锁（Read Lock）</li></ul><p>多个事务可以同时读表，但是无法写。</p><ul><li>写锁（Write Lock）</li></ul><p>一个事务在获取到写锁后其他事务无法读写这张表，等到写锁被释放其他事务才可以继续读写。</p><h3 id="元数据锁（Meta-Data-Lock）"><a href="#元数据锁（Meta-Data-Lock）" class="headerlink" title="元数据锁（Meta Data Lock）"></a>元数据锁（Meta Data Lock）</h3><p>元数据锁锁定的是表结构（包括表定义、索引定义），当执行改变表结构的操作（ALTER TABLE、DROP TABLE）时MySQL会自动给表加上元数据锁以防止并发的DDL操作（比如CREATE、ALTER、DROP）和DML（比如INSERT、UPDATE、DELETE）操作发生冲突。</p><h3 id="意向锁（Intention-Lock）"><a href="#意向锁（Intention-Lock）" class="headerlink" title="意向锁（Intention Lock）"></a>意向锁（Intention Lock）</h3><p>意向锁是MySQL自动加的。</p><p>意向锁不会阻塞其他事务的表锁操作，只是用来表明某个事务打算对某些行加锁。</p><p>意向共享锁（Intention Shared Lock）：当一个事务想要在某些行上加共享锁时，首先需要在表级别加意向共享锁。</p><p>意向排他锁（Intention Exclusive Lock）：当一个事务想要在某些行上加排他锁时，首先需要在表级别加意向排他锁。</p><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><p>行级锁是粒度最小的锁，是针对于索引字段加的锁，只对于当前操作的一行或者多行进行加锁。</p><p>行级锁操作粒度最小，并发度高。但是加锁开销最大，可能出现死锁。</p><p>行级锁分为：</p><ul><li>行锁</li><li>间隙锁</li><li>临键锁</li></ul><h3 id="行锁（Row-Lock）"><a href="#行锁（Row-Lock）" class="headerlink" title="行锁（Row Lock）"></a>行锁（Row Lock）</h3><p>行锁锁定表中的一行或者多行。</p><p>因为行锁只锁定特定的行，所以不影响整张表，是innoDB主要的锁类型。</p><p>行锁分为：</p><ul><li>共享锁</li></ul><p>如果给行加上共享锁，那么其他事务将不可获得排他锁，其他事务只能获取共享锁并且只能读这些行。</p><ul><li>排他锁</li></ul><p>只允许获取到排他锁的事务读写，其他事务将不能获取到共享锁和排他锁直到排他锁被释放。</p><h3 id="间隙锁（Gap-Lock）"><a href="#间隙锁（Gap-Lock）" class="headerlink" title="间隙锁（Gap Lock）"></a>间隙锁（Gap Lock）</h3><p>当用范围条件而不是相等条件索引数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁。对于键值在条件范围内但并不存在的记录，叫做间隙。间隙锁帮我们解决幻读问题。</p><h3 id="临键锁（Next-Key-Lock）"><a href="#临键锁（Next-Key-Lock）" class="headerlink" title="临键锁（Next-Key Lock）"></a>临键锁（Next-Key Lock）</h3><p>临键锁是行锁与间隙锁的组合，它的锁定范围既包含行又包含索引区间。</p><h2 id="自增锁（AUTO-INC-Lock）"><a href="#自增锁（AUTO-INC-Lock）" class="headerlink" title="自增锁（AUTO-INC Lock）"></a>自增锁（AUTO-INC Lock）</h2><p>如果一个表中含有自增字段，MySQL会使用自增锁来确保并发插入操作时自增字段的唯一性和有序性。</p><p>自增锁在事务提交时释放。</p><h2 id="外键锁（Foreign-Key-Lock）"><a href="#外键锁（Foreign-Key-Lock）" class="headerlink" title="外键锁（Foreign Key Lock）"></a>外键锁（Foreign Key Lock）</h2><p>使用外键约束时，innoDB会对相关行加锁确保父表中的行在存在关联的子表行时不会被删除或者更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL中有哪些锁？这些锁的作用又是什么？&lt;/p&gt;
&lt;p&gt;MySQL中的锁按照颗粒度从粗到细分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局锁&lt;/li&gt;
&lt;li&gt;表级锁&lt;/li&gt;
&lt;li&gt;行级锁&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://herotiga.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js高并发方案</title>
    <link href="https://herotiga.github.io/2024/09/02/%E9%AB%98%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://herotiga.github.io/2024/09/02/%E9%AB%98%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-09-01T16:15:44.000Z</published>
    <updated>2024-09-02T03:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js高并发方案</p><a id="more"></a><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>Node.js是单线程的，可以利用Cluster模块创建多个子进程来利用多核CPU，子进程共享相同的端口，平均分发请求，提高并发处理能力。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>常用的反向代理服务器有Nginx和HAProxy。</p><ul><li>Nginx</li></ul><p>使用Nginx作为反向代理服务器，将请求分发给多个Node.js实例。</p><p>还可以用Nginx处理静态文件、SSL卸载以减轻Node.js的压力。</p><ul><li>HAProxy</li></ul><p>HAProxy也可以做负载均衡。</p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>消息队列的作用有：解耦服务，异步任务处理，缓冲突发流量。</p><p>常用RabbitMQ、Kafka。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="内存缓存"><a href="#内存缓存" class="headerlink" title="内存缓存"></a>内存缓存</h3><p>将频繁访问的数据写入内存。</p><p>可以使用内存数据库Redis、Memcached，将高频访问的数据写入内存数据库以提高响应速度。</p><h3 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h3><p>服务端设置HTTP header的某些字段来减少客户端对服务端的请求，可以降低服务端压力。</p><ul><li>Cache-Control</li><li>ETag</li></ul><h2 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h2><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><p>通过主从复制将数据库读写操作分离，在从库读取，在主库写入。</p><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><p>确保查询语句有合适的索引，避免全表扫描。</p><h3 id="分库分表（Database-Sharding-amp-Table-Sharding）"><a href="#分库分表（Database-Sharding-amp-Table-Sharding）" class="headerlink" title="分库分表（Database Sharding &amp; Table Sharding）"></a>分库分表（Database Sharding &amp; Table Sharding）</h3><h4 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h4><p>分库就是将数据分散到多个数据库中。</p><p>分库又分为垂直分库和水平分库。</p><ul><li>垂直分库</li></ul><p>根据业务模块的不同，将数据按照业务模块的不同拆分到多个数据库中。优点是不同模块的读写操作互不影响。</p><p>比如，在电商系统中，可以将用户模块的数据放在一个数据库中，将订单模块数据放在另一个数据库中。</p><ul><li>水平分库</li></ul><p>将同一个表的数据按照某种规则拆分到多个数据库中。优点是可以均衡数据量和访问压力。</p><p>比如，在电商系统中，将用户表中的数据按照用户ID范围或者哈希值拆分到多个数据库中。</p><h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><p>分表就是将一张表的数据分散到多张表中。</p><p>分表又分为垂直分表和水平分表。</p><ul><li>垂直分表</li></ul><p>将表中字段较多的表按照字段拆分为多张表。</p><p>比如，把用户表拆分为基本信息和扩展信息两张表，减少了表的宽度提高了查询效率。</p><ul><li>水平分表</li></ul><p>将同一张表的数据按照行拆分到多张表中。</p><p>比如，按照用户ID将用户表分为user_01和user_02等多张表，解决了单张表数据量过大导致的性能问题。</p><h4 id="如何分库分表"><a href="#如何分库分表" class="headerlink" title="如何分库分表"></a>如何分库分表</h4><ul><li>选择分片键（Shard Key）</li></ul><p>分库分表需要选择一个合理的分片键，这会影响数据的分布和性能。</p><p>一般选择主键、时间戳，或者均匀分布数据的字段（常用UUID）作为分片键。</p><ul><li>路由策略</li></ul><p>分库分表后，路由是需要知道访问的数据在哪个库或者表中。</p><ul><li>事务处理</li></ul><p>分库分表后，事务中可能会出现跨库、跨表的情况。可以使用分布式事务、最终一致性等机制解决。</p><ul><li>数据迁移和扩容</li></ul><p>数据迁移：在单库单表的基础上分库分表，需要进行数据迁移，可以编写脚本或者使用工具将数据迁移到新的分库分表架构中。</p><p>扩容：随着数据量的增长，需要考虑动态扩展数据库或者表的数量。</p><h4 id="分库分表中间件"><a href="#分库分表中间件" class="headerlink" title="分库分表中间件"></a>分库分表中间件</h4><ul><li>Mycat：分库分表中间件。</li><li>ShardingSphere：分库分表中间件，支持分布式事务。</li><li>TDDL：分布式数据库层，可以分库分表。</li></ul><p>如果使用了Sequelize，还可以安装插件支持分库分表：</p><ul><li>Sharding插件</li><li>自定义ORM扩展：在ORM中自定义模型的数据库连接或查询方法，实现对不同数据库或表的访问。</li></ul><h4 id="性能监控和优化"><a href="#性能监控和优化" class="headerlink" title="性能监控和优化"></a>性能监控和优化</h4><p>分库分表架构建立后，需要持续监控新架构的系统性能以及根据监控调整分库分表策略。</p><h4 id="Node-js分库分表简单实现"><a href="#Node-js分库分表简单实现" class="headerlink" title="Node.js分库分表简单实现"></a>Node.js分库分表简单实现</h4><p>下面的实例将用户信息分散到了两个数据库中。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql2/promise'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个数据库的配置信息</span></span><br><span class="line"><span class="keyword">const</span> dbConfigs = [</span><br><span class="line">    &#123; <span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="attr">user</span>: <span class="string">'root'</span>, <span class="attr">password</span>: <span class="string">'password'</span>, <span class="attr">database</span>: <span class="string">'db1'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="attr">user</span>: <span class="string">'root'</span>, <span class="attr">password</span>: <span class="string">'password'</span>, <span class="attr">database</span>: <span class="string">'db2'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为每个数据库创建连接池</span></span><br><span class="line"><span class="keyword">const</span> pools = dbConfigs.map(<span class="function"><span class="params">config</span> =&gt;</span> mysql.createPool(config));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据id将用户请求分散到多个数据库上，计算数据库偏移量</span></span><br><span class="line"><span class="keyword">const</span> getShard = <span class="function">(<span class="params">id</span>) =&gt;</span> id % dbConfigs.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getUser = <span class="keyword">async</span> (userId) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 选择id为分片键</span></span><br><span class="line">    <span class="keyword">const</span> shard = getShard(userId);</span><br><span class="line">    <span class="keyword">const</span> pool = pools[shard];</span><br><span class="line">    <span class="keyword">const</span> conn = <span class="keyword">await</span> pool.getConnection();</span><br><span class="line">    <span class="keyword">const</span> [rows] = <span class="keyword">await</span> conn.query(<span class="string">'SELECT * FROM users WHERE id = ?'</span>, [userId]);</span><br><span class="line">    conn.release();</span><br><span class="line">    <span class="keyword">return</span> rows[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">getUser(<span class="number">1234456</span>).then(<span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">console</span>.log(user)).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br></pre></td></tr></table></figure><h2 id="性能监控和调优"><a href="#性能监控和调优" class="headerlink" title="性能监控和调优"></a>性能监控和调优</h2><p>监控工具：PM2，New Relic，Datadog</p><h2 id="服务器扩展"><a href="#服务器扩展" class="headerlink" title="服务器扩展"></a>服务器扩展</h2><ul><li>垂直扩展</li></ul><p>提升服务器硬件配置。</p><ul><li>水平扩展</li></ul><p>增加服务器数量。</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>使用CDN缓存静态资源。</p><h2 id="限流和降级"><a href="#限流和降级" class="headerlink" title="限流和降级"></a>限流和降级</h2><ul><li>限流</li></ul><p>限制流量避免系统宕机。</p><ul><li>降级</li></ul><p>系统压力较大时可以关闭部分非核心服务，有限保证核心服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js高并发方案&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>在Node.js项目微服务架构中使用Kafka通信</title>
    <link href="https://herotiga.github.io/2024/08/31/nodejs-kafka/"/>
    <id>https://herotiga.github.io/2024/08/31/nodejs-kafka/</id>
    <published>2024-08-31T15:32:21.000Z</published>
    <updated>2024-08-31T16:09:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kafka相比于RabbitMQ性能更好。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装Kafka客户端库"><a href="#安装Kafka客户端库" class="headerlink" title="安装Kafka客户端库"></a>安装Kafka客户端库</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S kafkajs</span><br></pre></td></tr></table></figure><h3 id="配置Kafka-broker集群"><a href="#配置Kafka-broker集群" class="headerlink" title="配置Kafka broker集群"></a>配置Kafka broker集群</h3><p>通常会使用多个Kafka代理（broker）构成集群。</p><p>Kafka broker集群可以提高系统的可用性和吞吐量。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> kafka = <span class="keyword">new</span> Kafka(&#123;</span><br><span class="line">  clientId: <span class="string">'my-app'</span>,</span><br><span class="line">  brokers: [<span class="string">'broker1:9092'</span>, <span class="string">'broker2:9092'</span>],</span><br><span class="line">  <span class="comment">// 重试机制</span></span><br><span class="line">  retry: &#123;</span><br><span class="line">    retries: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h2><p>Kafka生产者向Topic发送消息：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Kafka &#125; = <span class="built_in">require</span>(<span class="string">'kafkajs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Kafka实例并指定Kafka代理（broker）的地址</span></span><br><span class="line"><span class="keyword">const</span> kafka = <span class="keyword">new</span> Kafka(&#123;</span><br><span class="line">  clientId: <span class="string">'my-app'</span>,</span><br><span class="line">  brokers: [<span class="string">'localhost:9092'</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个生产者</span></span><br><span class="line"><span class="keyword">const</span> producer = kafka.producer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> run = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 连接生产者</span></span><br><span class="line">  <span class="keyword">await</span> producer.connect();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送一条消息到指定的主题</span></span><br><span class="line">  <span class="keyword">await</span> producer.send(&#123;</span><br><span class="line">    topic: <span class="string">'test-topic'</span>,</span><br><span class="line">    messages: [</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="string">'Hello KafkaJS user!'</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 断开连接</span></span><br><span class="line">  <span class="keyword">await</span> producer.disconnect();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">run().catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><p>Kafka消费者从Topic中读取消息并消费：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Kafka &#125; = <span class="built_in">require</span>(<span class="string">'kafkajs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Kafka实例并指定Kafka代理（broker）的地址</span></span><br><span class="line"><span class="keyword">const</span> kafka = <span class="keyword">new</span> Kafka(&#123;</span><br><span class="line">  clientId: <span class="string">'my-app'</span>,</span><br><span class="line">  brokers: [<span class="string">'localhost:9092'</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个消费者并指定消费的组ID</span></span><br><span class="line"><span class="keyword">const</span> consumer = kafka.consumer(&#123; <span class="attr">groupId</span>: <span class="string">'test-group'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> run = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 连接消费者</span></span><br><span class="line">  <span class="keyword">await</span> consumer.connect();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 订阅主题</span></span><br><span class="line">  <span class="keyword">await</span> consumer.subscribe(&#123; <span class="attr">topic</span>: <span class="string">'test-topic'</span>, <span class="attr">fromBeginning</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理消息</span></span><br><span class="line">  <span class="keyword">await</span> consumer.run(&#123;</span><br><span class="line">    eachMessage: <span class="keyword">async</span> (&#123; topic, partition, message &#125;) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(&#123;</span><br><span class="line">        partition,</span><br><span class="line">        offset: message.offset,</span><br><span class="line">        value: message.value.toString(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">run().catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kafka相比于RabbitMQ性能更好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>在Node.js项目微服务架构中使用RabbitMQ通信</title>
    <link href="https://herotiga.github.io/2024/08/31/nodejs-rabbitmq/"/>
    <id>https://herotiga.github.io/2024/08/31/nodejs-rabbitmq/</id>
    <published>2024-08-31T11:21:47.000Z</published>
    <updated>2024-08-31T15:32:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>消息队列（MQ）可以让系统中不同部分的应用程序或者不同的微服务之间进行异步通信。</p><p>Node.js常用的MQ有RabbitMQ、Kafka、或Redis等。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="搭建RabbitMQ服务器"><a href="#搭建RabbitMQ服务器" class="headerlink" title="搭建RabbitMQ服务器"></a>搭建RabbitMQ服务器</h3><p>构建一个RabbitMQ服务器的Docker容器并暴露服务端口。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management</span><br></pre></td></tr></table></figure><p>5672端口是RabbitMQ的默认通信端口，15672端口是web管理界面的端口。</p><h3 id="安装amqplib包"><a href="#安装amqplib包" class="headerlink" title="安装amqplib包"></a>安装amqplib包</h3><p>在Node.js项目中安装amqplib：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S amqplib</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="连接RabbitMQ服务器并发送消息到队列"><a href="#连接RabbitMQ服务器并发送消息到队列" class="headerlink" title="连接RabbitMQ服务器并发送消息到队列"></a>连接RabbitMQ服务器并发送消息到队列</h3><p>创建一个消息生产者，连接RabbitMQ并发送消息到队列：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amqp = <span class="built_in">require</span>(<span class="string">'amqplib/callback_api'</span>);</span><br><span class="line"></span><br><span class="line">amqp.connect(<span class="string">'amqp://localhost'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error0, connection</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error0) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建一个通道</span></span><br><span class="line">  connection.createChannel(<span class="function"><span class="keyword">function</span>(<span class="params">error1, channel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error1) &#123;</span><br><span class="line">      <span class="keyword">throw</span> error1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queue = <span class="string">'task_queue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个队列</span></span><br><span class="line">    channel.assertQueue(queue, &#123;</span><br><span class="line">      durable: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息到队列</span></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">'Hello World'</span>;</span><br><span class="line"></span><br><span class="line">    channel.sendToQueue(queue, Buffer.from(msg), &#123;</span><br><span class="line">      persistent: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" [x] Sent '%s'"</span>, msg);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭连接</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    connection.close();</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="从队列中消费消息"><a href="#从队列中消费消息" class="headerlink" title="从队列中消费消息"></a>从队列中消费消息</h3><p>创建一个消息消费者，从消息队列中取出消息并消费：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amqp = <span class="built_in">require</span>(<span class="string">'amqplib/callback_api'</span>);</span><br><span class="line"></span><br><span class="line">amqp.connect(<span class="string">'amqp://localhost'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error0, connection</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error0) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  connection.createChannel(<span class="function"><span class="keyword">function</span>(<span class="params">error1, channel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error1) &#123;</span><br><span class="line">      <span class="keyword">throw</span> error1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> queue = <span class="string">'task_queue'</span>;</span><br><span class="line"></span><br><span class="line">    channel.assertQueue(queue, &#123;</span><br><span class="line">      durable: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    channel.prefetch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" [*] Waiting for messages in %s. To exit press CTRL+C"</span>, queue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费消息</span></span><br><span class="line">    channel.consume(queue, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> secs = msg.content.toString().split(<span class="string">'.'</span>).length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">" [x] Received %s"</span>, msg.content.toString());</span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">" [x] Done"</span>);</span><br><span class="line">        channel.ack(msg);</span><br><span class="line">      &#125;, secs * <span class="number">1000</span>);</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      noAck: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ol><li>队列持久化</li></ol><p>消息消费者连接队列时开启<code>durable: true</code>可以实现队列持久化。</p><ol start="2"><li>消息持久化</li></ol><p>消息生产者发送消息时开启<code>persistent: true</code>可以实现消息持久化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;消息队列（MQ）可以让系统中不同部分的应用程序或者不同的微服务之间进行异步通信。&lt;/p&gt;
&lt;p&gt;Node.js常用的MQ有RabbitMQ、Kafka、或Redis等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js项目实现微服务架构</title>
    <link href="https://herotiga.github.io/2024/08/31/nodejs-microservices/"/>
    <id>https://herotiga.github.io/2024/08/31/nodejs-microservices/</id>
    <published>2024-08-30T16:28:18.000Z</published>
    <updated>2024-09-02T08:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>微服务是一种软件架构风格，在这种架构中，应用程序被构建为一组小的、独立的服务，每个服务负责处理特定的业务功能。这些服务可以独立开发、部署和扩展，并通过轻量级的通信机制（通常是 HTTP API）进行互相通信。</p><a id="more"></a><hr><h2 id="微服务的特点"><a href="#微服务的特点" class="headerlink" title="微服务的特点"></a>微服务的特点</h2><ol><li><p>模块化：每个微服务都是一个独立的模块，负责特定的业务功能。不同的团队可以独立地开发和维护不同的微服务。</p></li><li><p>独立部署：微服务可以独立部署和更新，而不必影响其他服务。这使得应用程序更具灵活性，能够快速响应变化。</p></li><li><p>技术多样性：不同的微服务可以使用不同的编程语言、数据库和技术栈，选择最适合其功能的技术。</p></li><li><p>可扩展性：由于微服务是独立的，特定的微服务可以独立扩展，从而优化资源利用。</p></li><li><p>容错性：因为微服务是分布式的，如果一个服务出现故障，通常不会导致整个系统崩溃。</p></li></ol><hr><h2 id="Node-js实现微服务"><a href="#Node-js实现微服务" class="headerlink" title="Node.js实现微服务"></a>Node.js实现微服务</h2><h3 id="将应用拆分为多个服务"><a href="#将应用拆分为多个服务" class="headerlink" title="将应用拆分为多个服务"></a>将应用拆分为多个服务</h3><p>首先，将单体应用拆分为多个独立的微服务。每个微服务应专注于一个特定的业务功能，例如用户管理、订单处理、支付等。</p><p>每个微服务可能会拥有自己的数据库，以实现服务之间的解耦。</p><p>数据库可能需要分片或者复制以提高性能和容错性。</p><p>在微服务之间或微服务与数据库之间使用缓存层（如 Redis、Memcached）来加速数据访问和减少数据库负载。</p><p>使用分布式数据库（如 Cassandra、CockroachDB）来存储和管理海量数据。</p><p>对于文件或大数据对象，可以使用分布式对象存储（如 AWS S3、MinIO）来存储和访问。</p><h3 id="使用独立的代码库和包管理"><a href="#使用独立的代码库和包管理" class="headerlink" title="使用独立的代码库和包管理"></a>使用独立的代码库和包管理</h3><p>每个微服务应当拥有自己的代码库和独立的<code>package.json</code>文件。这使得它们可以独立管理依赖项，并能够使用不同的 Node.js 版本或第三方库。</p><h3 id="选择合适的通信方式"><a href="#选择合适的通信方式" class="headerlink" title="选择合适的通信方式"></a>选择合适的通信方式</h3><p>微服务之间需要通信。</p><p>微服务常见的通信方式：</p><ul><li>HTTP/RESTfull API：每个微服务暴露 RESTfull API 供其他服务调用。</li><li>消息队列（MQ）：可以使用 MQ 来异步传递消息，常用的 MQ 有 RabbitMQ、Apache Kafka、Redis Streams 等。</li><li>gRPC：是一种 RPC（远程过程调用）框架，适合高性能通信场景。</li></ul><h3 id="选择合适的-web-框架构建-RESTfull-微服务"><a href="#选择合适的-web-框架构建-RESTfull-微服务" class="headerlink" title="选择合适的 web 框架构建 RESTfull 微服务"></a>选择合适的 web 框架构建 RESTfull 微服务</h3><p>比如 Express 或者 Koa.js 等。</p><h3 id="服务注册和发现"><a href="#服务注册和发现" class="headerlink" title="服务注册和发现"></a>服务注册和发现</h3><p>可以使用微服务注册和发现工具来管理与发现这些微服务。</p><p>常用的：Consul、Eureka、etcd</p><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><p>每个微服务拥有自己的配置，可以使用配置管理工具来管理配置。</p><p>常用的：Consul、Vault</p><h3 id="日志记录和监控"><a href="#日志记录和监控" class="headerlink" title="日志记录和监控"></a>日志记录和监控</h3><p>常用的日志聚合工具：ELK（Elasticsearch, Logstash, Kibana）</p><p>常用的监控工具：Prometheus、Grafana</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>可以将每个微服务打包成 Docker 容器，再使用 Docker Compose 或者 K8s 自动化部署、扩展、管理这些容器。</p><p>CI/CD：使用 Jenkins、GitLab CI、CircleCI 等工具实现自动化的构建、测试和部署流程。</p><p>蓝绿部署/金丝雀发布：在发布新版本时，采用蓝绿部署或金丝雀发布策略，减少发布风险。</p><h3 id="负载均衡和代理"><a href="#负载均衡和代理" class="headerlink" title="负载均衡和代理"></a>负载均衡和代理</h3><p>微服务层之间需要使用负载均衡器来实现流量分发，以实现高可用性和容错性。</p><p>常用的负载均衡器：HAProxy、Nginx、AWS ELB</p><p>还需要使用反向代理来分发来自 API 网关的请求到适当的微服务，常用 Nginx 反向代理。</p><h3 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h3><p>可以使用 API 网关来统一管理和路由所有微服务的请求。</p><p>API 网关可以处理请求路由、认证、限流。</p><p>常用的 API 网关：Nginx、Kong、Express Gateway 等。</p><h3 id="容错处理"><a href="#容错处理" class="headerlink" title="容错处理"></a>容错处理</h3><p>在分布式系统中可能会出现某个微服务失效。</p><p>可以使用熔断器比如 opossum 来防止级联故障，确保在某个微服务失败时，系统其他部分仍然可用。</p><hr><h2 id="Node-js微服务简单实例"><a href="#Node-js微服务简单实例" class="headerlink" title="Node.js微服务简单实例"></a>Node.js微服务简单实例</h2><ol><li>为微服务创建一个目录，用于存放所有的微服务。</li></ol><p>微服务项目目录结构：</p><pre><code>my-microservices-project/├── api-gateway/│   ├── package.json│   ├── index.js├── user-service/│   ├── package.json│   ├── index.js├── order-service/│   ├── package.json│   ├── index.js├── docker-compose.yml└── README.md</code></pre><ol start="2"><li><p>为每个微服务创建一个目录。</p></li><li><p>每个微服务拥有自己的目录以及<code>package.json</code>文件。</p></li></ol><figure class="highlight json"><figcaption><span>user-service/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"user-service"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"^4.17.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>编写微服务，每个微服务都相当于是一个Node.js项目。</li></ol><figure class="highlight js"><figcaption><span>user-service/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3001</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/users'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.json([&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Alice'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Bob'</span> &#125;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`User service running on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>API Gateway</li></ol><p>创建<code>api-gateway/index.js</code>文件，用于路由客户端的请求到对应的微服务。</p><figure class="highlight js"><figcaption><span>api-gateway/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> proxy = httpProxy.createProxyServer();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/users'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    proxy.web(req, res, &#123; <span class="attr">target</span>: <span class="string">'http://localhost:3001'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/orders'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    proxy.web(req, res, &#123; <span class="attr">target</span>: <span class="string">'http://localhost:3002'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`API Gateway running on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li>启动微服务</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动gateway</span></span><br><span class="line"><span class="built_in">cd</span> api-gateway</span><br><span class="line">npm install</span><br><span class="line">node index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动user-service服务</span></span><br><span class="line"><span class="built_in">cd</span> user-service</span><br><span class="line">npm install</span><br><span class="line">node index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动order-service服务</span></span><br><span class="line"><span class="built_in">cd</span> order-service</span><br><span class="line">npm install</span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>现在api-gateway和微服务已经运行了：</p><ul><li><code>http://localhost:3000</code>：运行了api-gateway，它将客户端请求路由到对应的微服务。</li><li><code>http://localhost:3001</code>：运行了user-service服务。</li><li><code>http://localhost:3002</code>：运行了order-service服务。</li></ul><ol start="7"><li>测试微服务</li></ol><p>使用postman或者cURL测试微服务。</p><ol start="8"><li>微服务容器化</li></ol><p>为每个服务创建<code>Dockerfile</code>文件，然后使用Docker Compose或者K8s来编排这些服务的容器。</p><p>这里使用Docker Compose。</p><p>第一步：为每个服务创建Dockerfile文件</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"node"</span>, <span class="string">"index.js"</span>]</span></span><br></pre></td></tr></table></figure><p>第二步：使用Docker Compose，创建docker-compose.yml文件来编排服务容器</p><figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">user-service:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3001:3001"</span></span><br><span class="line">  <span class="attr">order-service:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3002:3002"</span></span><br><span class="line">  <span class="attr">api-gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./api-gateway</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3000:3000"</span></span><br></pre></td></tr></table></figure><p>第三步：启动所有服务</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微服务是一种软件架构风格，在这种架构中，应用程序被构建为一组小的、独立的服务，每个服务负责处理特定的业务功能。这些服务可以独立开发、部署和扩展，并通过轻量级的通信机制（通常是 HTTP API）进行互相通信。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Kubernetes(K8s)学习笔记</title>
    <link href="https://herotiga.github.io/2024/08/30/kubernetes-k8s-notes/"/>
    <id>https://herotiga.github.io/2024/08/30/kubernetes-k8s-notes/</id>
    <published>2024-08-30T07:47:19.000Z</published>
    <updated>2024-08-30T15:02:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes(K8s)用于自动化部署、扩展和管理容器化应用程序。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>一个独立的、轻量级的可运行的包，包含应用程序和它的所有依赖。</p><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod是K8s中的最小部署单位，他可以包含一个或者多个容器。</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Node就是K8s集群中的一台机器，可以包含一个或者多个Pod。</p><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><p>Cluster就是由多个Node组成的集群。</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>Service为一组Pod提供持久的IP地址和负载均衡功能，使得Pod可以稳定的被外部访问。</p><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>Namespace是K8s中的逻辑隔离单元，用于将集群中的资源划分到不同的虚拟子集。</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Deployment定义应用程序的部署方式和策略，支持滚动更新和回滚操作。</p><h2 id="安装K8s"><a href="#安装K8s" class="headerlink" title="安装K8s"></a>安装K8s</h2><h3 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h3><p>Minikube是本地的K8s集群，用于开发和测试。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Minikube</span></span><br><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Minikube</span></span><br><span class="line">minikube start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Minikube状态</span></span><br><span class="line">minikube status</span><br></pre></td></tr></table></figure><h3 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h3><p>kubectl是用于管理集群的命令行工具。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装kubectl</span></span><br><span class="line">curl -LO <span class="string">"https://dl.k8s.io/release/<span class="variable">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl"</span></span><br><span class="line">chmod +x kubectl</span><br><span class="line">sudo mv kubectl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否安装成功</span></span><br><span class="line">kubectl version --client</span><br></pre></td></tr></table></figure><h2 id="创建K8s部署（Deployment）"><a href="#创建K8s部署（Deployment）" class="headerlink" title="创建K8s部署（Deployment）"></a>创建K8s部署（Deployment）</h2><p>创建Deployment：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个nginx部署</span></span><br><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建的Deployment和Pod</span></span><br><span class="line">kubectl get deployments</span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><p>暴露服务：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对外暴露nginx部署</span></span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --port=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看部署的服务信息</span></span><br><span class="line">kubectl get service nginx</span><br><span class="line">kubectl get services</span><br><span class="line">minikube service nginx --url</span><br></pre></td></tr></table></figure><h2 id="扩展和更新"><a href="#扩展和更新" class="headerlink" title="扩展和更新"></a>扩展和更新</h2><h3 id="扩展Pod副本数"><a href="#扩展Pod副本数" class="headerlink" title="扩展Pod副本数"></a>扩展Pod副本数</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment nginx --replicas=3</span><br></pre></td></tr></table></figure><h3 id="更新容器镜像"><a href="#更新容器镜像" class="headerlink" title="更新容器镜像"></a>更新容器镜像</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/nginx nginx=nginx:1.19</span><br></pre></td></tr></table></figure><h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment/nginx</span><br></pre></td></tr></table></figure><h3 id="删除服务和部署"><a href="#删除服务和部署" class="headerlink" title="删除服务和部署"></a>删除服务和部署</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete service nginx</span><br><span class="line">kubectl delete deployment nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes(K8s)用于自动化部署、扩展和管理容器化应用程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://herotiga.github.io/categories/Kubernetes/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://herotiga.github.io/2024/08/30/docker-notes/"/>
    <id>https://herotiga.github.io/2024/08/30/docker-notes/</id>
    <published>2024-08-30T07:00:57.000Z</published>
    <updated>2024-12-03T07:17:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Docker</code>是容器化平台，可以构建、打包、部署和运行应用程序。</p><p>Docker可以将应用程序及依赖打包成一个轻量级的便于移植的容器，然后部署到支持Docker的平台。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参照官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>Docker镜像是一个只读的模板，包含了创建Docker容器的指令。</p><p>还可以基于一个镜像来创建另一个镜像并在此基础上添加一些自定义配置。</p><h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>Docker容器是一个独立的环境，它基于Docker镜像创建而来，Docker容器是镜像的实例，容器包含了应用程序及其运行时。</p><p>容器之间是相互隔离的，每个容器都有自己的文件系统。可以将容器看作是轻量的、便于移植的虚拟机。</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile是一个文本文件，包含了一系列指令，他告诉Docker如何构建镜像。</p><h3 id="Docker-Volume"><a href="#Docker-Volume" class="headerlink" title="Docker Volume"></a>Docker Volume</h3><p>Docker Volume是Docker提供的持久化存储机制。</p><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><p>Docker Hub是一个存储Docker镜像的公共仓库，可以上传或者下载镜像。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull &lt;image_name&gt;</span><br><span class="line"><span class="comment"># 例如：拉取最新的Ubuntu镜像</span></span><br><span class="line">docker pull ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run -it --name &lt;container_name&gt; &lt;image_name&gt;</span><br><span class="line"><span class="comment"># 例如：运行一个基于Ubuntu的容器</span></span><br><span class="line">docker run -it --name my_ubuntu ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop &lt;container_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker start &lt;container_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入运行中的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name&gt; /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm &lt;container_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi &lt;image_name&gt;</span><br></pre></td></tr></table></figure><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>在项目目录下创建一个Dockerfile来创建镜像。</p><p>Dockerfile：</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方的Node.js镜像作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 package.json 和 package-lock.json</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package*.json ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制项目文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露应用程序的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动应用</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"node"</span>, <span class="string">"app.js"</span>]</span></span><br></pre></td></tr></table></figure><p>带有TypeScript编译阶段的Dockerfile：</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建阶段</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span> AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package*.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设项目使用 TypeScript，首先编译</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产阶段</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">18</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /app/package*.json ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /app/dist ./dist</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /app/node_modules ./node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"node"</span>, <span class="string">"dist/app.js"</span>]</span></span><br></pre></td></tr></table></figure><p>那么，上面的<code>RUN</code>和<code>CMD</code>有什么区别？</p><p>RUN是在image文件的构建阶段执行的，CMD是在容器启动后执行的。<br>一个Dockerfile可以包含多个RUN，但是只能包含一个CMD。</p><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .代表Dockerfile所在目录</span></span><br><span class="line">docker build -t my-node-app .</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地的3000端口映射到容器的3000端口</span></span><br><span class="line">docker run -p 3000:3000 my-node-app</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>比如对于数据库容器，每次部署数据库容器都会删除原来的容器，故而容器内的数据也会被删除。</p><p>可以将数据库的数据目录挂载到主机的一个目录（或者说映射），这样就不会在部署新容器后丢失数据。</p><p><img src="https://gcore.jsdelivr.net/gh/herotiga/cdn@master/img/article/docker-volume.webp" alt="Docker Volume"></p><h3 id="使用Docker-Volume"><a href="#使用Docker-Volume" class="headerlink" title="使用Docker Volume"></a>使用Docker Volume</h3><ol><li>创建Docker Volume</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create mysql_data</span><br></pre></td></tr></table></figure><ol start="2"><li>启动MySQL并挂载Volume到容器内目录</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将mysql_data这个卷挂载到容器内的/var/lib/mysql，这个目录是MySQL数据库默认的存储位置</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=my-secret-pw \</span><br><span class="line">  -v mysql_data:/var/lib/mysql \</span><br><span class="line">  mysql:latest</span><br></pre></td></tr></table></figure><h3 id="使用主机目录挂载"><a href="#使用主机目录挂载" class="headerlink" title="使用主机目录挂载"></a>使用主机目录挂载</h3><p>还可以直接将主机上的一个目录挂载到容器的MySQL数据存储目录。</p><ol><li>创建主机目录</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /my/mysql_data</span><br></pre></td></tr></table></figure><ol start="2"><li>启动MySQL容器并挂载目录</li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=my-secret-pw \</span><br><span class="line">  -v /my/own/datadir:/var/lib/mysql \</span><br><span class="line">  mysql:latest</span><br></pre></td></tr></table></figure><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Docker Compose是一个用于定义和管理多容器Docker应用的工具。也可以使用k8s管理Docker容器。</p><p>可以使用<code>docker-compose.yml</code>文件来定义应用的服务、网络和卷等。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">my-node-app</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3000:3000"</span></span><br></pre></td></tr></table></figure><p>构建并启动<code>docker-compose.yml</code>中的所有服务：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动应用</span></span><br><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止应用</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.docker.com/">https://www.docker.com/</a></li><li><a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;是容器化平台，可以构建、打包、部署和运行应用程序。&lt;/p&gt;
&lt;p&gt;Docker可以将应用程序及依赖打包成一个轻量级的便于移植的容器，然后部署到支持Docker的平台。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://herotiga.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js开发笔记——Mongoose（ODM库）</title>
    <link href="https://herotiga.github.io/2024/08/29/nodejs-odm-mongoose/"/>
    <id>https://herotiga.github.io/2024/08/29/nodejs-odm-mongoose/</id>
    <published>2024-08-29T10:40:32.000Z</published>
    <updated>2024-08-30T06:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Mongoose</code>是 Node.js的ODM库。</p><p>和Sequelize类似，Mongoose提供了node.js对于MongoDB进行操作的便利。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S mongoose</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>连接MongoDB</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"></span><br><span class="line">mongoose</span><br><span class="line">  .connect(<span class="string">"mongodb://localhost:27017/mydatabase"</span>, &#123;</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">    useUnifiedTopology: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Connected to MongoDB"</span>))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"Could not connect to MongoDB..."</span>, err));</span><br></pre></td></tr></table></figure><ol start="2"><li>定义Schema</li></ol><p>Mongoose中使用Schema来定义文档结构。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">    email: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">unique</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    created_at: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建模型Model</li></ol><p>使用以上创建好的Schema来创建模型Model。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, userSchema);</span><br></pre></td></tr></table></figure><ol start="4"><li>创建和保存</li></ol><p>使用上面创建好的Model可以对数据进行CRUD。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建user记录</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    name: <span class="string">'John Doe'</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    email: <span class="string">'johndoe@example.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存user记录</span></span><br><span class="line">user.save()</span><br><span class="line">    .then(<span class="function"><span class="params">doc</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'User saved:'</span>, doc))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error saving user:'</span>, err));</span><br></pre></td></tr></table></figure><ol start="5"><li>关闭连接</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connection.close();</span><br></pre></td></tr></table></figure><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ul><li>Create</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    name: <span class="string">'John Doe'</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    email: <span class="string">'johndoe@example.com'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Read</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'User found:'</span>, user))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error finding user:'</span>, err));</span><br><span class="line"></span><br><span class="line">User.find(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">users</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Users found:'</span>, users))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error finding users:'</span>, err));</span><br></pre></td></tr></table></figure><ul><li>Update</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User.updateOne(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">31</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'User updated:'</span>, result))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error updating user:'</span>, err));</span><br><span class="line"></span><br><span class="line">User.updateMany(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">31</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'User updated:'</span>, result))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error updating user:'</span>, err));</span><br><span class="line"></span><br><span class="line">User.findByIdAndUpdate(userId, &#123; <span class="attr">age</span>: <span class="number">27</span> &#125;, &#123; <span class="attr">new</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Updated user:'</span>, user))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error updating user:'</span>, err));</span><br></pre></td></tr></table></figure><ul><li>Delete</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.deleteOne(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'User deleted:'</span>, result))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error deleting user:'</span>, err));</span><br><span class="line"></span><br><span class="line">User.findByIdAndDelete(userId)</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Deleted user:'</span>, user))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error deleting user:'</span>, err));</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>Mongoose还支持使用中间件（middleware）来执行一些预处理或后处理操作。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在保存之前执行一些代码</span></span><br><span class="line">userSchema.pre(<span class="string">'save'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Before saving a user'</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://mongoosejs.net/">https://mongoosejs.net/</a></li><li><a href="https://mongoosejs.com/">https://mongoosejs.com/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Mongoose&lt;/code&gt;是 Node.js的ODM库。&lt;/p&gt;
&lt;p&gt;和Sequelize类似，Mongoose提供了node.js对于MongoDB进行操作的便利。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js开发笔记——Sequelize（ORM库）</title>
    <link href="https://herotiga.github.io/2024/08/29/nodejs-orm-sequelize/"/>
    <id>https://herotiga.github.io/2024/08/29/nodejs-orm-sequelize/</id>
    <published>2024-08-29T02:37:10.000Z</published>
    <updated>2024-08-29T11:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Node.js 项目中可以使用<code>Sequelize</code>这个<code>ORM</code>（对象关系映射）库来将项目中的 Model 和数据库表进行映射以及可以让我们可以使用 JavaScript 的对象和方法来操作数据库（CRUD），而不必编写原生 SQL 语句。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装-Sequelize"><a href="#安装-Sequelize" class="headerlink" title="安装 Sequelize"></a>安装 Sequelize</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S sequelize</span><br></pre></td></tr></table></figure><h3 id="安装对应数据库驱动"><a href="#安装对应数据库驱动" class="headerlink" title="安装对应数据库驱动"></a>安装对应数据库驱动</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装MySQL驱动</span></span><br><span class="line">npm install -S mysql2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PostgreSQL驱动</span></span><br><span class="line">npm install -S pg pg-hstore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装SQLite驱动</span></span><br><span class="line">npm install -S sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MSSQL驱动</span></span><br><span class="line">npm install -S tedious</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MariaDB驱动</span></span><br><span class="line">npm install -S mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Oracle数据库驱动</span></span><br><span class="line">npm install -S oracledb</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Sequelize提供的大多数方法都是异步的，会返回<code>Promise</code>，所以可以使用Promise API。</p><h3 id="创建-Sequelize-实例"><a href="#创建-Sequelize-实例" class="headerlink" title="创建 Sequelize 实例"></a>创建 Sequelize 实例</h3><p>创建一个Sequelize实例并连接到数据库：</p><figure class="highlight js"><figcaption><span>models/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Sequelize &#125; = <span class="built_in">require</span>(<span class="string">"sequelize"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Sequelize实例，连接到MySQL数据库</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">"database_name"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>, &#123;</span><br><span class="line">  host: <span class="string">"localhost"</span>,</span><br><span class="line">  dialect: <span class="string">"mysql"</span>, <span class="comment">// 选择数据库类型：'mysql' | 'postgres' | 'sqlite' | 'mssql'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试连接是否成功</span></span><br><span class="line">sequelize</span><br><span class="line">  .authenticate()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Connection has been established successfully."</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Unable to connect to the database:"</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出Sequelize实例变量</span></span><br><span class="line"><span class="built_in">module</span>.exports = sequelize;</span><br></pre></td></tr></table></figure><h3 id="定义模型（Model）"><a href="#定义模型（Model）" class="headerlink" title="定义模型（Model）"></a>定义模型（Model）</h3><p>在 Sequelize 中，模型代表数据库中的表。<br>可以通过定义模型来映射数据库表及其字段。</p><figure class="highlight js"><figcaption><span>models/user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; DataTypes &#125; = <span class="built_in">require</span>(<span class="string">"sequelize"</span>);</span><br><span class="line"><span class="comment">// 引入前面创建的 Sequelize 实例</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">"./index"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义User模型</span></span><br><span class="line"><span class="keyword">const</span> User = sequelize.define(</span><br><span class="line">  <span class="string">"User"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    username: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    email: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    tableName: <span class="string">"users"</span>, <span class="comment">// 自定义表名，如果不指定，Sequelize 会自动将模型名转换为复数形式作为表名</span></span><br><span class="line">    timestamps: <span class="literal">true</span>, <span class="comment">// 自动添加 createdAt 和 updatedAt 字段</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = User;</span><br></pre></td></tr></table></figure><h3 id="同步模型与数据库"><a href="#同步模型与数据库" class="headerlink" title="同步模型与数据库"></a>同步模型与数据库</h3><p>在项目启动时同步模型和数据库。</p><p>在项目入口 js 文件中添加：</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">"./models/index"</span>);</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">"./models/user"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步模型</span></span><br><span class="line">sequelize</span><br><span class="line">  .sync(&#123; <span class="attr">force</span>: <span class="literal">false</span> &#125;) <span class="comment">// &#123; force: true &#125; 会先删除表然后重新创建（慎用）</span></span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Database &amp; tables created!"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to sync database:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="CRUD-操作"><a href="#CRUD-操作" class="headerlink" title="CRUD 操作"></a>CRUD 操作</h3><p>可以调用模型的 CRUD 方法操作数据库。</p><ul><li>Create</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User.create(&#123;</span><br><span class="line">  username: <span class="string">"john_doe"</span>,</span><br><span class="line">  password: <span class="string">"secret123"</span>,</span><br><span class="line">  email: <span class="string">"john@example.com"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"User created:"</span>, user.toJSON());</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to create user:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>Read</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123; <span class="attr">where</span>: &#123; <span class="attr">username</span>: <span class="string">"john_doe"</span> &#125; &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"User found:"</span>, user.toJSON());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"User not found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to find user:"</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">User.findAll()</span><br><span class="line">  .then(<span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"All users:"</span>, <span class="built_in">JSON</span>.stringify(users, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to find users:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>Update</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.update(&#123; <span class="attr">password</span>: <span class="string">"newpassword123"</span> &#125;, &#123; <span class="attr">where</span>: &#123; <span class="attr">username</span>: <span class="string">"john_doe"</span> &#125; &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">rowsUpdated</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Number of rows updated:"</span>, rowsUpdated);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to update user:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>Delete</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.destroy(&#123; <span class="attr">where</span>: &#123; <span class="attr">username</span>: <span class="string">"john_doe"</span> &#125; &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">rowsDeleted</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Number of rows deleted:"</span>, rowsDeleted);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to delete user:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h3><p>默认情况下，Sequelize将记录控制台执行的每个SQL查询。可以使用<code>options.logging</code>参数来自定义每次 Sequelize记录某些内容时将执行的函数。默认值为<code>console.log</code>，使用该值时仅显示日志函数调用的第一个参数。例如，对于查询日志记录，第一个参数是原始查询，第二个参数(默认情况下是隐藏的)是Sequelize对象。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'sqlite::memory:'</span>, &#123;</span><br><span class="line">  <span class="comment">// 选择一种日志记录参数</span></span><br><span class="line">  logging: <span class="built_in">console</span>.log,                  <span class="comment">// 默认值,显示日志函数调用的第一个参数</span></span><br><span class="line">  logging: <span class="function">(<span class="params">...msg</span>) =&gt;</span> <span class="built_in">console</span>.log(msg), <span class="comment">// 显示所有日志函数调用参数</span></span><br><span class="line">  logging: <span class="literal">false</span>,                        <span class="comment">// 禁用日志记录</span></span><br><span class="line">  logging: <span class="function"><span class="params">msg</span> =&gt;</span> logger.debug(msg),     <span class="comment">// 使用自定义记录器(例如Winston 或 Bunyan),显示第一个参数</span></span><br><span class="line">  logging: logger.debug.bind(logger)     <span class="comment">// 使用自定义记录器的另一种方法,显示所有消息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="关系映射"><a href="#关系映射" class="headerlink" title="关系映射"></a>关系映射</h3><p>Sequelize 支持定义表之间的关系（一对一、一对多、多对多）。</p><p>定义<code>User</code>和<code>Post</code>之间为一对多的关系：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Post = sequelize.define(<span class="string">"Post"</span>, &#123;</span><br><span class="line">  title: DataTypes.STRING,</span><br><span class="line">  content: DataTypes.TEXT,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一对多关系：一个用户可以有多个帖子</span></span><br><span class="line">User.hasMany(Post);</span><br><span class="line">Post.belongsTo(User);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在同步时，Sequelize 会自动设置外键</span></span><br><span class="line">sequelize.sync();</span><br></pre></td></tr></table></figure><h3 id="查询生成器"><a href="#查询生成器" class="headerlink" title="查询生成器"></a>查询生成器</h3><p>Sequelize 支持复杂的查询构建与聚合操作，可以轻松实现分页、排序、分组等操作。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  where: &#123; <span class="attr">email</span>: &#123; [Op.like]: <span class="string">"%@example.com"</span> &#125; &#125;,</span><br><span class="line">  order: [[<span class="string">"createdAt"</span>, <span class="string">"DESC"</span>]],</span><br><span class="line">  limit: <span class="number">10</span>,</span><br><span class="line">  offset: <span class="number">20</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Paged users:"</span>, <span class="built_in">JSON</span>.stringify(users, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to retrieve users:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="事务处理（Transactions）"><a href="#事务处理（Transactions）" class="headerlink" title="事务处理（Transactions）"></a>事务处理（Transactions）</h3><p>通过<code>sequelize.transaction()</code>来管理事务，确保操作的原子性。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sequelize</span><br><span class="line">  .transaction(<span class="keyword">async</span> (t) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> User.create(</span><br><span class="line">      &#123;</span><br><span class="line">        username: <span class="string">"jane_doe"</span>,</span><br><span class="line">        password: <span class="string">"password123"</span>,</span><br><span class="line">        email: <span class="string">"jane@example.com"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">transaction</span>: t &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Post.create(</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">"Jane's first post"</span>,</span><br><span class="line">        content: <span class="string">"This is Jane's first post"</span>,</span><br><span class="line">        userId: user.id,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">transaction</span>: t &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Transaction has been committed"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Transaction has been rolled back:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="验证与钩子（Hooks）"><a href="#验证与钩子（Hooks）" class="headerlink" title="验证与钩子（Hooks）"></a>验证与钩子（Hooks）</h3><p>Sequelize 提供内置的验证机制，并允许你定义生命周期钩子，在模型操作前后执行代码。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(</span><br><span class="line">  <span class="string">"User"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    username: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">      validate: &#123;</span><br><span class="line">        len: [<span class="number">4</span>, <span class="number">20</span>], <span class="comment">// 验证用户名长度在 4 到 20 个字符之间</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    hooks: &#123;</span><br><span class="line">      beforeCreate: <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在创建用户前对密码进行哈希处理</span></span><br><span class="line">        user.password = hashPassword(user.password);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="配置与环境变量"><a href="#配置与环境变量" class="headerlink" title="配置与环境变量"></a>配置与环境变量</h3><p>可以通过环境变量或配置文件管理不同环境下的数据库连接配置：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(</span><br><span class="line">  process.env.DB_NAME,</span><br><span class="line">  process.env.DB_USER,</span><br><span class="line">  process.env.DB_PASSWORD,</span><br><span class="line">  &#123;</span><br><span class="line">    host: process.env.DB_HOST,</span><br><span class="line">    dialect: <span class="string">"mysql"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="迁移与种子数据"><a href="#迁移与种子数据" class="headerlink" title="迁移与种子数据"></a>迁移与种子数据</h3><p>Sequelize CLI工具支持数据库迁移和种子数据管理。可以通过命令行生成和应用迁移来管理数据库的演进。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx sequelize-cli init</span><br><span class="line">npx sequelize-cli model:generate --name User --attributes username:string,email:string</span><br><span class="line">npx sequelize-cli db:migrate</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.sequelize.cn/">https://www.sequelize.cn/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Node.js 项目中可以使用&lt;code&gt;Sequelize&lt;/code&gt;这个&lt;code&gt;ORM&lt;/code&gt;（对象关系映射）库来将项目中的 Model 和数据库表进行映射以及可以让我们可以使用 JavaScript 的对象和方法来操作数据库（CRUD），而不必编写原生 SQL 语句。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Tree-Shaking是什么？</title>
    <link href="https://herotiga.github.io/2024/08/26/webpack-tree-shaking/"/>
    <id>https://herotiga.github.io/2024/08/26/webpack-tree-shaking/</id>
    <published>2024-08-25T16:39:48.000Z</published>
    <updated>2024-08-27T01:38:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Tree-Shaking</code>是一种代码优化技术，其通过删除未使用的代码来减少最终打包出来的文件的大小，从而提高程序的加载速度和性能。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在webpack5的<code>production</code>环境中默认开启了Tree-Shaking功能，也就是build出来的代码会删除无用的代码。</p><p>无用的代码包括下面几类：</p><ul><li>不可能执行的代码</li><li>定义了但是没有引用的变量</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.webpackjs.com/guides/tree-shaking/#root">https://www.webpackjs.com/guides/tree-shaking/#root</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Tree-Shaking&lt;/code&gt;是一种代码优化技术，其通过删除未使用的代码来减少最终打包出来的文件的大小，从而提高程序的加载速度和性能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://herotiga.github.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>Android开发笔记</title>
    <link href="https://herotiga.github.io/2024/07/08/Android-notes/"/>
    <id>https://herotiga.github.io/2024/07/08/Android-notes/</id>
    <published>2024-07-08T06:38:53.000Z</published>
    <updated>2024-09-02T17:09:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android开发笔记</p><a id="more"></a><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>阅读Java文档。</p><h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h3><p>阅读Kotlin文档。</p><h2 id="Android应用结构和基本组件"><a href="#Android应用结构和基本组件" class="headerlink" title="Android应用结构和基本组件"></a>Android应用结构和基本组件</h2><p>包括四大基本组件Activity、Service、BroadcastReceiver、ContentProvider以及Fragment、Intent、View、Layout、Resources、Manifest等。</p><p>可以查看Android官方文档学习。</p><h2 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h2><p>包括官方文档和Material Design。</p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>包括SharedPreferences、读写文件、SQLite本地数据库、Room持久库。</p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p>包括Retrofit和Volley等库。</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>包括内存管理、电池优化、响应速度优化等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android开发笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://herotiga.github.io/categories/Android/"/>
    
    
  </entry>
  
</feed>
