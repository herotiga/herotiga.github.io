<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2022-03-02T12:57:21.246Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason小王子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红墨水和蓝墨水混合问题</title>
    <link href="https://herotiga.github.io/2022/03/02/%E7%BA%A2%E5%A2%A8%E6%B0%B4%E5%92%8C%E8%93%9D%E5%A2%A8%E6%B0%B4%E6%B7%B7%E5%90%88%E9%97%AE%E9%A2%98/"/>
    <id>https://herotiga.github.io/2022/03/02/%E7%BA%A2%E5%A2%A8%E6%B0%B4%E5%92%8C%E8%93%9D%E5%A2%A8%E6%B0%B4%E6%B7%B7%E5%90%88%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-02T12:54:30.000Z</published>
    <updated>2022-03-02T12:57:21.246Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到个特别有意思的红墨水蓝墨水混合问题：</p><p><strong>题</strong>：有一瓶红墨水，一瓶蓝墨水，从红墨水舀一勺到蓝瓶里，搅匀后再舀一勺到红瓶里。<br><strong>问</strong>：此时红墨水里含蓝墨水的量和蓝墨水里含红墨水的量关系是什么？大于、小于、等于？</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/red-blue.png" alt=""></p><p>这个题目本身看起来不是一个难题，如果你通过取值计算或者取特殊值计算的结果来判断就不好，因为不具备普遍性。</p><p>如果我们<strong>从状态变化的角度</strong>来看这个问题，可以发现这个问题可以看做是状态的迁移。</p><p><strong>初始态</strong>：红墨水和蓝墨水体积相等，红墨水中不含蓝墨水，蓝墨水中也不含红墨水。<br><strong>最终态</strong>：红墨水瓶中的水和蓝墨水瓶中的水体积依然相等，红墨水瓶中含蓝墨水，蓝墨水瓶中也含红墨水。</p><p>我们不关注两次舀水的过程，单单从状态变化的角度来看，可以发现初始态和最终态两个瓶子中的水的体积都相等，发生变化的是红墨水瓶子中多了蓝墨水而少了红墨水，蓝墨水瓶子中多了红墨水而少了蓝墨水。</p><p>而其实红墨水瓶子中多了的蓝墨水来自于蓝墨水瓶，少了的红墨水去到了蓝墨水瓶，而两者的体积是相等的，无论第一次舀水后是否搅匀，最终红墨水瓶中含有的蓝墨水永远等于蓝墨水瓶中含有的红墨水。</p><!-- https://yanhaijing.com/math/2017/03/23/red-blue-ink/ -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到个特别有意思的红墨水蓝墨水混合问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题&lt;/strong&gt;：有一瓶红墨水，一瓶蓝墨水，从红墨水舀一勺到蓝瓶里，搅匀后再舀一勺到红瓶里。&lt;br&gt;&lt;strong&gt;问&lt;/strong&gt;：此时红墨水里含蓝墨水的量和蓝墨水里含红墨水的量关系是什么？大于、小于、等于？&lt;/p&gt;
    
    </summary>
    
    
      <category term="math" scheme="https://herotiga.github.io/categories/math/"/>
    
    
  </entry>
  
  <entry>
    <title>ES7-12新特性整理（更新中）</title>
    <link href="https://herotiga.github.io/2022/01/21/ES7-12%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/"/>
    <id>https://herotiga.github.io/2022/01/21/ES7-12%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</id>
    <published>2022-01-21T08:00:57.000Z</published>
    <updated>2022-03-02T12:06:08.923Z</updated>
    
    <content type="html"><![CDATA[<p>陆续整理一下ES7-12的新特性。</p><a id="more"></a><h2 id="ES7-ES2016"><a href="#ES7-ES2016" class="headerlink" title="ES7(ES2016)"></a>ES7(ES2016)</h2><h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h3><p>描述：用于判断一个数组中从下标为index起后面是否含有指定的值，返回Boolean。只能判断数组元素是基本类型的item。<br>语法： <code>arr.includes(item[, index])</code></p><h3 id="幂运算符"><a href="#幂运算符" class="headerlink" title="幂运算符"></a>幂运算符</h3><p>ES5幂运算： <code>Math.pow(2, 10)</code></p><p>ES7幂运算： <code>2 ** 10</code></p><h2 id="ES8-ES2017"><a href="#ES8-ES2017" class="headerlink" title="ES8(ES2017)"></a>ES8(ES2017)</h2><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p>描述：返回一个数组，数组成员是参数对象所有可遍历属性的值。<br>语法： <code>Object.values(obj)</code></p><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>描述：返回一个数组，数组成员是参数对象所有可遍历属性的键值对数组。<br>语法： <code>Object.entries([1, 2, 3])</code></p><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h3><p>描述：获取一个对象的所有自身属性的描述符。<br>语法：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;陆续整理一下ES7-12的新特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>解析let和const声明的变量不在window下的原因</title>
    <link href="https://herotiga.github.io/2022/01/14/let%E5%92%8Cconst%E5%A3%B0%E6%98%8E%E7%9A%84%E5%8F%98%E9%87%8F%E5%8E%BB%E5%93%AA%E5%84%BF%E4%BA%86/"/>
    <id>https://herotiga.github.io/2022/01/14/let%E5%92%8Cconst%E5%A3%B0%E6%98%8E%E7%9A%84%E5%8F%98%E9%87%8F%E5%8E%BB%E5%93%AA%E5%84%BF%E4%BA%86/</id>
    <published>2022-01-14T09:06:04.000Z</published>
    <updated>2022-01-17T06:17:49.760Z</updated>
    
    <content type="html"><![CDATA[<p>使用es5中 <code>var</code> 命令声明的变量可以在 <code>window</code> 下找到，比如：</p><p><code>var myName = &#39;mason&#39;</code> ，可以使用 <code>window.myName</code> 访问到。</p><p>但是使用es6的 <code>let</code> 和 <code>const</code> 声明的变量却没有在window下，这是为什么呢？</p><a id="more"></a><hr><p>这里就要说到<code>window</code>对象和 <code>global</code> 对象。</p><p>对于window和global的看法，之前一直都是：window是浏览器的顶层对象，global是node的顶层对象。</p><p>但是其实window是global在浏览器的代理，window是global的一部分。<br>我们使用var声明的变量会被挂载到window下。</p><p>而let和const声明的变量会被挂载到 <code>script</code> 对象下，script和global是同一层级的。</p><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/script%E5%AF%B9%E8%B1%A1.png" alt="script对象"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用es5中 &lt;code&gt;var&lt;/code&gt; 命令声明的变量可以在 &lt;code&gt;window&lt;/code&gt; 下找到，比如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var myName = &amp;#39;mason&amp;#39;&lt;/code&gt; ，可以使用 &lt;code&gt;window.myName&lt;/code&gt; 访问到。&lt;/p&gt;
&lt;p&gt;但是使用es6的 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; 声明的变量却没有在window下，这是为什么呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>防抖(debounce)和节流(throttle)</title>
    <link href="https://herotiga.github.io/2021/12/18/debounce-and-throttle/"/>
    <id>https://herotiga.github.io/2021/12/18/debounce-and-throttle/</id>
    <published>2021-12-18T02:17:10.000Z</published>
    <updated>2022-01-20T02:56:20.770Z</updated>
    
    <content type="html"><![CDATA[<p>防抖和节流的目的都是希望一段时间内不要密集调用callback。</p><p>应用场景：滚动（防抖），搜索（节流）</p><a id="more"></a><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p><p>有些事件比如 resize, scroll, mousemove 等会被持续的触发，导致 <code>callback</code> 被高频调用，这就要用到防抖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数防抖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>immediate true 表立即执行，false 表非立即执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timeout) clearTimeout(timeout);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line"></span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait);</span><br><span class="line">            <span class="keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                func.apply(context, args);</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</p><p>时间戳版和定时器版的节流函数的区别是：时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>函数节流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>func 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>wait 延迟执行毫秒数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type 1 表时间戳版，2 表定时器版</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> timeout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">                func.apply(context, args);</span><br><span class="line">                previous = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">                timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    timeout = <span class="literal">null</span>;</span><br><span class="line">                    func.apply(context, args);</span><br><span class="line">                &#125;, wait);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>防抖是控制次数，节流是控制频率。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://segmentfault.com/a/1190000018428170">简版 debounce 和 throttle</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;防抖和节流的目的都是希望一段时间内不要密集调用callback。&lt;/p&gt;
&lt;p&gt;应用场景：滚动（防抖），搜索（节流）&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js中的垃圾回收机制(Garbage Collection)和内存泄漏(Memory Leak)</title>
    <link href="https://herotiga.github.io/2021/12/18/js%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E5%92%8C%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    <id>https://herotiga.github.io/2021/12/18/js%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E5%92%8C%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</id>
    <published>2021-12-18T02:14:30.000Z</published>
    <updated>2021-12-20T00:46:27.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="垃圾回收机制（Garbage-Collection）"><a href="#垃圾回收机制（Garbage-Collection）" class="headerlink" title="垃圾回收机制（Garbage Collection）"></a>垃圾回收机制（Garbage Collection）</h2><p>js 有自动垃圾回收机制（GC），GC 会周期性的清理不使用的变量所占用的内存空间。 不同浏览器的 GC 机制都不同，不同环境的 GC 机制也不同。</p><a id="more"></a><p>不使用的变量主要是指局部变量，GC 会在局部变量使用完后等到下一个 GC 周期时释放该变量所占用的内存空间（在堆或者栈中）。</p><p>GC 判断变量是否需要被释放是通过标记清除（更为常用）和引用计数。</p><p>手动解除内存占用，就是将变量赋值为 null： <code>var_name = null;</code></p><h3 id="垃圾回收策略"><a href="#垃圾回收策略" class="headerlink" title="垃圾回收策略"></a>垃圾回收策略</h3><h4 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h4><p>GC 会给所有进入环境（指的是全局环境或者局部）的变量（发生在变量声明时）打上标记“进入环境”，在变量离开环境时将其标记为“离开环境“，GC 会在下一个 GC 周期时释放被标记为离开环境的变量所占用的内存。</p><p>不同浏览器标记清除的策略略有不同。</p><h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><p>GC 统计变量值的引用数量，引用计数变为 0 则表明该变量所占用的内存可以被释放，这样 GC 会在下一次运行的时候回收该内存空间。</p><p>故而，只声明了但是没有被使用的变量的引用计数为 1，所以也会造成内存泄漏。</p><p>引用计数会带来一个问题：循环引用。</p><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line">    a.pro = b; <span class="comment">// a引用了b</span></span><br><span class="line">    b.pro = a; <span class="comment">// b引用了a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>上面的代码运行结果是 a 和 b 的引用计数都为 2，a 和 b 的引用计数都无法降为 0，故而造成了这部分内存始终无法被 GC 释放，随着 <code>fn</code> 被多次调用，a 和 b 所占用的内存就会线性增长，造成内存泄漏。</p><p><strong>IE7&amp;8 中有部分对象不是 js 原生对象而是 COM 对象，COM 对象的垃圾回收机制采用的就是引用计数策略。故而在 IE7&amp;8 中访问 COM 对象如果存在循环引用就会导致内存泄漏。</strong></p><p>循环引用的解决方法：在变量使用完后手动破坏变量之间的互相引用关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line">    a.pro = b; <span class="comment">// a引用了b</span></span><br><span class="line">    b.pro = a; <span class="comment">// b引用了a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// do sth</span></span><br><span class="line"></span><br><span class="line">    a.pro = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h3 id="垃圾回收策略优化"><a href="#垃圾回收策略优化" class="headerlink" title="垃圾回收策略优化"></a>垃圾回收策略优化</h3><p>GC 在其运行期间会造成浏览器无响应。 需要优化 GC 策略来缩短无响应 duration。</p><h4 id="优化策略一：分代回收（Generation-GC）"><a href="#优化策略一：分代回收（Generation-GC）" class="headerlink" title="优化策略一：分代回收（Generation GC）"></a>优化策略一：分代回收（Generation GC）</h4><p>和 JVM GC 策略一样。</p><p>js 将待回收的变量分为临时（young generation）和持久（tenured generation），多回收 young generation，少回收 tenured generation，从而减少了整体回收的变量。</p><p>变量在 young generation 和 tenured generation 之间的迁转移需要额外的开销。</p><h4 id="优化策略二：增量回收"><a href="#优化策略二：增量回收" class="headerlink" title="优化策略二：增量回收"></a>优化策略二：增量回收</h4><p>增量回收的策略就是每次只回收一点，提高回收的频率。</p><p>这种方法可以使每次回收的时间很短，但是带来了回收的次数很频繁。</p><h2 id="内存泄漏（Memory-Leak）"><a href="#内存泄漏（Memory-Leak）" class="headerlink" title="内存泄漏（Memory Leak）"></a>内存泄漏（Memory Leak）</h2><p>内存泄漏：不再用到的变量占着内存并且没有被释放。</p><h3 id="不合法的全局变量"><a href="#不合法的全局变量" class="headerlink" title="不合法的全局变量"></a>不合法的全局变量</h3><p>原因 1：未声明的变量或者 this 创建的变量会引发内存泄漏。 解决方法：1. 避免申明全局变量。 2. 使用严格模式。</p><p>原因 2：vue 单页面中声明全局变量在切换页面时没有释放。 解决方法：卸载页面时销毁引用，销毁引用并不能回收内存，而是让变量脱离执行环境从而可以让 GC 在下一次执行的时候回其收内存。</p><p>vue 中的其他内存泄漏的情况：<a href="https://segmentfault.com/a/1190000012738358#item-5">https://segmentfault.com/a/1190000012738358#item-5</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">destroyed() &#123;</span><br><span class="line">    <span class="built_in">window</span>.variate_name = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>原因：闭包保持它的变量一直在内存中，故而使用闭包的时候要注意内存泄漏。 解决方法：将事件处理函数定义在外部，解除闭包，或者在定义事件处理函数的外部函数中，删除对 DOM 的引用。</p><h3 id="定时器和事件监听"><a href="#定时器和事件监听" class="headerlink" title="定时器和事件监听"></a>定时器和事件监听</h3><p>卸载页面之前需要清除定时器和事件监听。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">    <span class="comment">// 清除定时器</span></span><br><span class="line">    <span class="comment">// 清除事件监听</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><ol><li>DOM 引用了对象作为其属性或者样式。</li><li>将 DOM 赋值给了一个变量，最后要给变量赋值 null。</li></ol><h2 id="WeakMap和WeakSet-解决内存泄漏"><a href="#WeakMap和WeakSet-解决内存泄漏" class="headerlink" title="WeakMap和WeakSet 解决内存泄漏"></a>WeakMap和WeakSet 解决内存泄漏</h2><p>es6 提供了 WaekMap 和 WeakSet 来解决引用带来的内存泄漏。</p><figure class="highlight js"><figcaption><span>WeakMap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(); </span><br><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>); </span><br><span class="line"></span><br><span class="line">wm.set(element, <span class="string">"some information"</span>); </span><br><span class="line">wm.get(element); <span class="comment">// "some information"</span></span><br></pre></td></tr></table></figure><p>GC 会忽略 <code>wm</code> 对于 <code>element</code> 的引用，故而 <code>element</code> 实际的引用计数为 1。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://www.jb51.net/article/187661.htm">https://www.jb51.net/article/187661.htm</a></li><li><a href="https://segmentfault.com/a/1190000012738358">https://segmentfault.com/a/1190000012738358</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html">http://www.ruanyifeng.com/blog/2017/04/memory-leak.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;垃圾回收机制（Garbage-Collection）&quot;&gt;&lt;a href=&quot;#垃圾回收机制（Garbage-Collection）&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收机制（Garbage Collection）&quot;&gt;&lt;/a&gt;垃圾回收机制（Garbage Collection）&lt;/h2&gt;&lt;p&gt;js 有自动垃圾回收机制（GC），GC 会周期性的清理不使用的变量所占用的内存空间。 不同浏览器的 GC 机制都不同，不同环境的 GC 机制也不同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>合并两个升序数组</title>
    <link href="https://herotiga.github.io/2021/12/18/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%8D%87%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://herotiga.github.io/2021/12/18/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%8D%87%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-12-18T02:00:16.000Z</published>
    <updated>2021-12-18T02:08:37.020Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>合并两个升序数组，返回合并后的数组，合并后的数组依然为升序，元素不能重复。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>方法一：从前往后一次对比两个数组的元素，小的 <code>push</code> 到新数组。</p><p>方法二：先拼接两个数组，再去重，最后排序。</p><p>排序导致了该方法效率低。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> list2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">mergeLists(list1, list2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergeLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> L1_LEN = l1.length;</span><br><span class="line">    <span class="keyword">const</span> L2_LEN = l2.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!L1_LEN) <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span> (!L2_LEN) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> target = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; L1_LEN &amp;&amp; j &lt; L2_LEN) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1[i] &lt; l2[j]) &#123;</span><br><span class="line">            target.push(l1[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1[i] &gt; l2[j]) &#123;</span><br><span class="line">            target.push(l2[j]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target.push(l1[i]);</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt; j) &#123;</span><br><span class="line">        target = target.concat(l2.slice(j));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target = target.concat(l1.slice(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> list2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">mergeLists(list1, list2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergeLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!l1.length) <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span> (!l2.length) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> target = l1.concat(l2);</span><br><span class="line">    target = [...new <span class="built_in">Set</span>(target)];</span><br><span class="line">    <span class="keyword">return</span> target.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="https://herotiga.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>分布式session</title>
    <link href="https://herotiga.github.io/2021/12/07/%E5%88%86%E5%B8%83%E5%BC%8Fsession/"/>
    <id>https://herotiga.github.io/2021/12/07/%E5%88%86%E5%B8%83%E5%BC%8Fsession/</id>
    <published>2021-12-07T01:09:38.000Z</published>
    <updated>2021-12-07T01:51:31.860Z</updated>
    
    <content type="html"><![CDATA[<p>在传统的单体应用中，后台只需要根据session获取用户身份的和信息既可。在集群中也只需要将用户的请求通过一种hash算法均匀的映射到多台服务器（且每次都映射到同一台服务器）既可，。而在分布式的应用中如何处理session呢？</p><a id="more"></a><p>一个分布式的应用是由多个模块构成，模块可能不在一个服务器上，一个模块可能也部署了集群，如何保证集群+分布式应用上的session可用呢。</p><h2 id="策略一：粘性session"><a href="#策略一：粘性session" class="headerlink" title="策略一：粘性session"></a>策略一：粘性session</h2><p>粘性session就是将用户的请求绑定到一台服务器上。</p><p>实现过程：</p><ol><li>负载均衡服务器将用户的请求通过哈希算法均匀的映射到服务器上。</li><li>以后每次该用户的请求都会被负载均衡服务器转发到这个服务器上。</li><li>这样用户的session就会存储在一台服务器上。</li></ol><h2 id="策略二：session复制"><a href="#策略二：session复制" class="headerlink" title="策略二：session复制"></a>策略二：session复制</h2><p>session复制就是对session增删改之后会将session广播给其他模块以保证session同步。</p><h2 id="策略三：session共享"><a href="#策略三：session共享" class="headerlink" title="策略三：session共享"></a>策略三：session共享</h2><p>通过redis、memcached共享session。</p><h3 id="方案一：redis"><a href="#方案一：redis" class="headerlink" title="方案一：redis"></a>方案一：redis</h3><p>对于session的分布式，就是模块之间的session共享，将session放入缓存就实现了session的共享。</p><p>可以通过redis实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue().set(<span class="string">"session"</span>, json);</span><br></pre></td></tr></table></figure><p>其他模块读取缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String json = redisTemplate.opsForValue().get(<span class="string">"session"</span>);</span><br></pre></td></tr></table></figure><h3 id="方案二：SpringSession"><a href="#方案二：SpringSession" class="headerlink" title="方案二：SpringSession"></a>方案二：SpringSession</h3><p>Spring提供了SpringSession组件来解决模块之间的session共享。</p><ol><li>在两个模块中都引入SpringSession依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>application.yml配置session用redis保存</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:  session:</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动类加<code>@EnableRedisHttpSession</code>注解</li></ol><h2 id="策略四：session持久化"><a href="#策略四：session持久化" class="headerlink" title="策略四：session持久化"></a>策略四：session持久化</h2><p>创建一个数据库存储session。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在传统的单体应用中，后台只需要根据session获取用户身份的和信息既可。在集群中也只需要将用户的请求通过一种hash算法均匀的映射到多台服务器（且每次都映射到同一台服务器）既可，。而在分布式的应用中如何处理session呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://herotiga.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>js对象判空的几种方法</title>
    <link href="https://herotiga.github.io/2021/12/06/js%E5%AF%B9%E8%B1%A1%E5%88%A4%E7%A9%BA%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/12/06/js%E5%AF%B9%E8%B1%A1%E5%88%A4%E7%A9%BA%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-12-06T07:09:47.000Z</published>
    <updated>2021-12-06T08:44:22.830Z</updated>
    
    <content type="html"><![CDATA[<p>js无法直接比较一个对象是否为空( <code>obj === {}</code> 永远为 <code>false</code> )，原因是js在对比两者时是比对的两者的内存地址，而 <code>{}</code> 放在js引擎新分配的内存地址中，故而两者永远不相等。</p><a id="more"></a><h2 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isEmpty = (<span class="built_in">Object</span>.getOwnPropertyNames(obj).length === <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isEmpty = (<span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEmpty = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(obj) === <span class="string">"&#123;&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEmpty = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys()"></a>Reflect.ownKeys()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEmpty = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Reflect</span>.ownKeys(obj).length === <span class="number">0</span> &amp;&amp; obj.constructor === <span class="built_in">Object</span></span><br></pre></td></tr></table></figure><h2 id="jQuery中的isEmptyObject"><a href="#jQuery中的isEmptyObject" class="headerlink" title="jQuery中的isEmptyObject()"></a>jQuery中的isEmptyObject()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isEmpty = $.isEmptyObject(obj);</span><br></pre></td></tr></table></figure><p><em>updated on: 2021-12-06</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js无法直接比较一个对象是否为空( &lt;code&gt;obj === {}&lt;/code&gt; 永远为 &lt;code&gt;false&lt;/code&gt; )，原因是js在对比两者时是比对的两者的内存地址，而 &lt;code&gt;{}&lt;/code&gt; 放在js引擎新分配的内存地址中，故而两者永远不相等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>require和import的区别</title>
    <link href="https://herotiga.github.io/2021/11/25/require%E5%92%8Cimport/"/>
    <id>https://herotiga.github.io/2021/11/25/require%E5%92%8Cimport/</id>
    <published>2021-11-25T06:30:05.000Z</published>
    <updated>2021-11-28T02:12:30.490Z</updated>
    
    <content type="html"><![CDATA[<p><code>require</code> 和 <code>import</code> 都是引入模块。</p><a id="more"></a><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>require是赋值过程，过程就是将对象数字字符串赋值给变量，import是结构过程，浏览器不支持import，node中会被编译为require。</li><li>require是AMD规范，import是ES6规范。</li><li>require在运行时调用，所以require可以用在任何地方，import在编译时调用，所以import要写在文件顶部。</li></ol><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://www.zhihu.com/question/56820346">https://www.zhihu.com/question/56820346</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;require&lt;/code&gt; 和 &lt;code&gt;import&lt;/code&gt; 都是引入模块。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>vue3中引入jquery</title>
    <link href="https://herotiga.github.io/2021/11/17/vue%E4%B8%AD%E5%BC%95%E5%85%A5jquery/"/>
    <id>https://herotiga.github.io/2021/11/17/vue%E4%B8%AD%E5%BC%95%E5%85%A5jquery/</id>
    <published>2021-11-17T09:35:57.000Z</published>
    <updated>2021-11-28T11:58:53.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装jquery"><a href="#安装jquery" class="headerlink" title="安装jquery"></a>安装jquery</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.x版本</span></span><br><span class="line">cnpm i jquery@1.12.4 -S</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="编辑vue-config-js文件"><a href="#编辑vue-config-js文件" class="headerlink" title="编辑vue.config.js文件"></a>编辑vue.config.js文件</h2><p>根目录下创建vue.config.js文件：</p><figure class="highlight js"><figcaption><span>vue.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    configureWebpack: &#123;</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">                $:<span class="string">"jquery"</span>,</span><br><span class="line">                jQuery:<span class="string">"jquery"</span>,</span><br><span class="line">                <span class="string">"windows.jQuery"</span>:<span class="string">"jquery"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在组件中引用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br></pre></td></tr></table></figure><h2 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h2><p>ref: <a href="https://blog.nickschnee.ch/vuejquery/">https://blog.nickschnee.ch/vuejquery/</a></p><ol><li>先安装jquery模块</li><li>在<code>main.js</code>中：</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jQuery <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"></span><br><span class="line">global.$ = jQuery</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">Vue.prototype.$ = jquery</span><br></pre></td></tr></table></figure><p>这样就可以全局使用<code>$</code>了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装jquery&quot;&gt;&lt;a href=&quot;#安装jquery&quot; class=&quot;headerlink&quot; title=&quot;安装jquery&quot;&gt;&lt;/a&gt;安装jquery&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;figcaption&gt;&lt;span&gt;bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1.x版本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnpm i jquery@1.12.4 -S&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>使用vite</title>
    <link href="https://herotiga.github.io/2021/11/11/vite-usage/"/>
    <id>https://herotiga.github.io/2021/11/11/vite-usage/</id>
    <published>2021-11-11T11:11:25.000Z</published>
    <updated>2021-11-14T16:19:31.350Z</updated>
    
    <content type="html"><![CDATA[<p>vite的使用。</p><a id="more"></a><h2 id="安装vite"><a href="#安装vite" class="headerlink" title="安装vite"></a>安装vite</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g create-vite-app</span><br></pre></td></tr></table></figure><h2 id="创建vite项目"><a href="#创建vite项目" class="headerlink" title="创建vite项目"></a>创建vite项目</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create-vite-app project_name</span><br><span class="line">cva project_name</span><br><span class="line">cnpm init vite-app project_name</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project_name</span><br><span class="line">cnpm install</span><br><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://vitejs.cn/">https://vitejs.cn/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vite的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>laydate日期格式不合法</title>
    <link href="https://herotiga.github.io/2021/10/29/laydate%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E4%B8%8D%E5%90%88%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/10/29/laydate%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E4%B8%8D%E5%90%88%E6%B3%95/</id>
    <published>2021-10-29T07:09:19.000Z</published>
    <updated>2021-12-08T15:21:39.520Z</updated>
    
    <content type="html"><![CDATA[<p>遇到了laydate无法正确渲染的问题。</p><a id="more"></a><p>在render的时候给value就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">laydate.render(&#123;</span><br><span class="line">    elem: <span class="string">'#id'</span>,</span><br><span class="line">    trigger: <span class="string">'click'</span>,</span><br><span class="line">    type: <span class="string">'date'</span>,</span><br><span class="line">    value: [yyyy - MM - dd]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>还有一种是lay-key导致的渲染失败：<br><a href="https://blog.csdn.net/u013781343/article/details/82016042">https://blog.csdn.net/u013781343/article/details/82016042</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到了laydate无法正确渲染的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-226-翻转二叉树</title>
    <link href="https://herotiga.github.io/2021/10/28/leetcode-226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://herotiga.github.io/2021/10/28/leetcode-226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-10-28T08:07:04.000Z</published>
    <updated>2021-11-02T01:10:11.970Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>翻转一棵二叉树。</p><p>示例：</p><p>输入：</p><pre><code>     4   /   \  2     7 / \   / \1   3 6   9</code></pre><p>输出：</p><pre><code>     4   /   \  7     2 / \   / \9   6 3   1</code></pre><p>备注: 这个问题是受到Max Howell的原问题启发的</p><pre><code>谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>从root开始，每遇到一个节点就交换左右子树，再调用自身遍历左右子树。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    [root.left, root.right] = [root.right, root.left];</span><br><span class="line">    invertTree(root.left);</span><br><span class="line">    invertTree(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二叉树" scheme="https://herotiga.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://herotiga.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-11. 盛最多水的容器</title>
    <link href="https://herotiga.github.io/2021/10/25/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://herotiga.github.io/2021/10/25/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2021-10-25T00:37:40.000Z</published>
    <updated>2021-11-02T01:09:17.650Z</updated>
    
    <content type="html"><![CDATA[<p>难度：中等</p><!--     latex tool: https://www.latexlive.com/ --><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>给你 $n$ 个非负整数 $a_1，a_2，…，a_n$，每个数代表坐标中的一个点 $\left(i,  a_i\right)$ 。在坐标内画 $n$ 条垂直线，垂直线 $i$ 的两个端点分别为 $\left(i,  a_i\right)$ 和 $\left(i, 0\right)$ 。找出其中的两条线，使得它们与 $x$ 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p>示例1：</p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt=""></p><pre><code>输入：[1,8,6,2,5,4,8,3,7]输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为49。</code></pre><p>示例 2：</p><pre><code>输入：height = [1,1]输出：1</code></pre><p>示例 3：</p><pre><code>输入：height = [4,3,2,1,4]输出：16</code></pre><p>示例 4：</p><pre><code>输入：height = [1,2,1]输出：2</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>设两个端点为$\left(i, a_i\right)$和$\left(j, a_j\right)$, 且$i &lt; j$。</p><p>盛水的容量：$\left(j - i\right) \times \min\left(a_i, a_j\right)$</p><p>求两条线使得盛水量最大就是求$\max\left(\left(j - i\right) \times \min\left(a_i, a_j\right)\right)$。</p><p>设置两个指针$i$和$j$，每次都将短的指针向内侧移动，每次移动判断一下容量，直到$i$和$j$相遇。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> area = <span class="number">0</span>,</span><br><span class="line">        max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">        j = height.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        area = (j - i) * <span class="built_in">Math</span>.min(height[i], height[j]);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(area, max);</span><br><span class="line">        height[i] - height[j] &gt; <span class="number">0</span> ? j-- : i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h2><p>错误的将 <code>height[i] - height[j] &gt; 0</code> 简写为了 <code>height[i] - height[j]</code> 造成了排查排了好久，其实 <code>!!(-1)</code> 为 <code>true</code> 。</p><pre><code>对于0之外的正负数求布尔值都为true。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：中等&lt;/p&gt;
&lt;!-- 
    latex tool: https://www.latexlive.com/
 --&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="双指针" scheme="https://herotiga.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer10-I-斐波那契数列</title>
    <link href="https://herotiga.github.io/2021/10/24/%E5%89%91%E6%8C%87Offer10-I-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://herotiga.github.io/2021/10/24/%E5%89%91%E6%8C%87Offer10-I-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2021-10-24T07:25:51.000Z</published>
    <updated>2021-11-02T02:26:13.480Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项（即F(N)）。斐波那契数列的定义如下：</p><pre><code>F(0) = 0,   F(1) = 1F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</code></pre><p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p>示例 1：</p><pre><code>输入：n = 2输出：1</code></pre><p>示例 2：</p><pre><code>输入：n = 5输出：5</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><p>对于fib数列的前两位，直接返回。</p><p>从n为2开始，每一位都是前两位的和，故而只需要设置left和right两个变量存储前两位的值，cur就等于left+right，然后</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="dp-1"><a href="#dp-1" class="headerlink" title="dp"></a>dp</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,</span><br><span class="line">        right = <span class="number">1</span>,</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cur = (left + right) % (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        left = right;</span><br><span class="line">        right = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cur % (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h2><p>每次操作给cur赋值都要<code>mod 1e9+7</code>，真是浪费我好多时间排查。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="https://herotiga.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 07. 重建二叉树</title>
    <link href="https://herotiga.github.io/2021/10/18/%E5%89%91%E6%8C%87Offer-07-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://herotiga.github.io/2021/10/18/%E5%89%91%E6%8C%87Offer-07-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-10-18T15:11:17.000Z</published>
    <updated>2021-11-02T01:10:24.070Z</updated>
    
    <content type="html"><![CDATA[<p>难度：中等</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。</p><p>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p>示例1：</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt=""></p><pre><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]Output: [3,9,20,null,null,15,7]</code></pre><p>示例2：</p><pre><code>Input: preorder = [-1], inorder = [-1]Output: [-1]</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>先序遍历第一个元素是整个二叉树的根节点，找到这个根节点。</p><p>在中序遍历中找到根节点，根节点在中序遍历中将二叉树分为了左右两边。</p><p>再在左边的二叉树中找到根节点，根据中序遍历将其分为左右两边，右边的二叉树也同理，递归。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">preorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preorder.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> nodeVal = preorder[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> TreeNode(nodeVal);</span><br><span class="line">    <span class="keyword">let</span> nodeIndexOfInorder = inorder.indexOf(nodeVal);</span><br><span class="line">    <span class="keyword">let</span> leftInorder = inorder.slice(<span class="number">0</span>, nodeIndexOfInorder);</span><br><span class="line">    <span class="keyword">let</span> rightInorder = inorder.slice(nodeIndexOfInorder + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> leftPreorder = preorder.slice(<span class="number">1</span>, <span class="number">1</span> + nodeIndexOfInorder);</span><br><span class="line">    <span class="keyword">let</span> rightPreorder = preorder.slice(<span class="number">1</span> + nodeIndexOfInorder);</span><br><span class="line">    </span><br><span class="line">    node.left = buildTree(leftPreorder, leftInorder);</span><br><span class="line">    node.right = buildTree(rightPreorder, rightInorder);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：中等&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="https://herotiga.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 06. 从尾到头打印链表</title>
    <link href="https://herotiga.github.io/2021/10/18/%E5%89%91%E6%8C%87Offer-06-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://herotiga.github.io/2021/10/18/%E5%89%91%E6%8C%87Offer-06-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2021-10-18T13:43:31.000Z</published>
    <updated>2021-11-02T01:11:57.450Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p>示例：</p><pre><code>输入：head = [1,3,2]输出：[2,3,1]</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>遍历链表各个元素的val属性值，一次push到一个新数组中，最后返回这个数组的reverse()。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reversePrint = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> current = head;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        res.push(current.val);</span><br><span class="line">        current = current.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (current != <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://herotiga.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 05. 替换空格</title>
    <link href="https://herotiga.github.io/2021/10/12/%E5%89%91%E6%8C%87Offer-05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>https://herotiga.github.io/2021/10/12/%E5%89%91%E6%8C%87Offer-05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</id>
    <published>2021-10-12T08:40:25.000Z</published>
    <updated>2021-11-02T01:12:26.210Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例：</p><p>现有矩阵 matrix 如下：</p><pre><code>输入：s = &quot;We are happy.&quot;输出：&quot;We%20are%20happy.&quot;</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ol><li>直接使用replaceAll()</li><li>split() + join()</li><li>遍历拼接</li></ol><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replaceAll(<span class="string">' '</span>, <span class="string">'%20'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">' '</span>).join(<span class="string">'%20'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === <span class="string">' '</span>) &#123;</span><br><span class="line">            res += <span class="string">'%20'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res += s[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="https://herotiga.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>详解js中的get/set</title>
    <link href="https://herotiga.github.io/2021/10/09/js-get-set/"/>
    <id>https://herotiga.github.io/2021/10/09/js-get-set/</id>
    <published>2021-10-08T17:18:58.000Z</published>
    <updated>2021-10-09T02:46:47.650Z</updated>
    
    <content type="html"><![CDATA[<p>js对象有两种属性：</p><ul><li>数据属性：就是对象中的普通成员。</li><li>存取属性：一组get/set函数，读取对象属性时调用get（不带参数，可以return），设置对象属性时调用set（set中return无效）。</li></ul><p>如果对象内只声明了get，则get/set属性值只可读。<br>如果对象内只声明了set，则get/set属性值只可写且值永远为 <code>undefined</code> 。</p><a id="more"></a><h2 id="get-set写法"><a href="#get-set写法" class="headerlink" title="get/set写法"></a>get/set写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func是obj的存取属性名称</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="keyword">get</span> func() &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> func(val) &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.func);</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>只声明get：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    <span class="keyword">get</span> func() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">// 'Mason'</span></span><br><span class="line">obj.func = <span class="string">''</span>; <span class="comment">// 这里无法修改func</span></span><br><span class="line">obj.name = <span class="string">'Jason'</span>; <span class="comment">// 修改成功</span></span><br></pre></td></tr></table></figure><p>只声明set：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    <span class="keyword">set</span> func(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">// undefined</span></span><br><span class="line">obj.name = <span class="string">'Jason'</span>; <span class="comment">// 修改成功</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 'Jason'</span></span><br></pre></td></tr></table></figure><p>同时声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    <span class="keyword">get</span> func() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> func(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">// 'Mason'</span></span><br><span class="line">obj.func = <span class="string">''</span>; <span class="comment">// 修改成功</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">// ''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js对象有两种属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据属性：就是对象中的普通成员。&lt;/li&gt;
&lt;li&gt;存取属性：一组get/set函数，读取对象属性时调用get（不带参数，可以return），设置对象属性时调用set（set中return无效）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果对象内只声明了get，则get/set属性值只可读。&lt;br&gt;如果对象内只声明了set，则get/set属性值只可写且值永远为 &lt;code&gt;undefined&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="https://herotiga.github.io/2021/10/08/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://herotiga.github.io/2021/10/08/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-10-08T12:11:10.000Z</published>
    <updated>2022-01-18T03:04:27.610Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些常用的npm(node package manager)命令。</p><a id="more"></a><h2 id="npm-v"><a href="#npm-v" class="headerlink" title="npm -v"></a>npm -v</h2><p>查看版本</p><h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><p><code>npm init</code> 用来创建package.json文件，这个文件用于记录项目的一些信息以及依赖包。<br>再 <code>npm install</code> 则会根据package.json文件来安装依赖到node_modules目录。</p><h2 id="npm-search"><a href="#npm-search" class="headerlink" title="npm search"></a>npm search</h2><p>搜索模块： <code>npm search module_name</code></p><h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><p>局部安装：会安装在在当前目录下的node_modules目录。<br> <code>npm install module_name</code></p><p>安装指定版本：<br> <code>npm install module_name@version_num</code></p><p>全局安装：<br> <code>npm install -g module_name</code></p><p>局部安装并将其添加到package.json中的dependencies:<br><code>npm install module_name --save</code> 缩写 <code>npm install module_name -S</code></p><p>局部安装并将其添加到package.json中的devDependencies(该包会只被用于开发环境):<br><code>npm install module_name --save-dev</code> 缩写 <code>npm install module_name -D</code></p><p>如果安装不成功，则先删除node_modules再清缓存再重试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装完包后在代码里require就可以使用：<br> <code>var new_module_name = require(&#39;module_name&#39;);</code></p><p>升级npm：<br> <code>npm install -g npm</code></p><h2 id="npm-uninstall"><a href="#npm-uninstall" class="headerlink" title="npm uninstall"></a>npm uninstall</h2><p> <code>npm uninstall module_name</code></p><p> <code>npm remove module_name</code></p><h2 id="npm-update"><a href="#npm-update" class="headerlink" title="npm update"></a>npm update</h2><p> <code>npm update module_name</code></p><p> <code>npm update module_name -g</code></p><h2 id="npm-cache-clear"><a href="#npm-cache-clear" class="headerlink" title="npm cache clear"></a>npm cache clear</h2><p>清空本地npm缓存</p><h2 id="npm-publish"><a href="#npm-publish" class="headerlink" title="npm publish"></a>npm publish</h2><p>先创建package.json</p><p>在npm注册：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br><span class="line">Username: Mason</span><br><span class="line">Password: ******</span><br><span class="line">Email: (this IS public) herotiga@vip.qq.com</span><br></pre></td></tr></table></figure><p>发布模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>之后就可以使用 <code>npm install</code> 安装了。</p><h2 id="npm-unpublish"><a href="#npm-unpublish" class="headerlink" title="npm unpublish"></a>npm unpublish</h2><p>撤销已经发布的模块的某个版本：<br> <code>npm unpublish module_name@version</code></p><h2 id="查看相关"><a href="#查看相关" class="headerlink" title="查看相关"></a>查看相关</h2><p>查看一个包的详细信息： <code>npm info module_name</code></p><p>查看一个包的所有版本： <code>npm view module_name versions</code></p><p>查看一个包最新版本： <code>npm view module_name version</code></p><p>查看安装了的包： <code>npm list</code> 缩写 <code>npm ls</code></p><p>查看全局安装的包： <code>npm list -g</code></p><p>查看全局包的安装位置： <code>npm root -g</code></p><p>修复包： <code>npm audit fix</code></p><p>查看当前包的版本： <code>npm is module_name</code></p><h2 id="npm-help"><a href="#npm-help" class="headerlink" title="npm help"></a>npm help</h2><p>查看帮助： <code>npm help</code></p><p>查看特定命令帮助： <code>npm help install</code></p><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><p>参见：<a href="https://npmmirror.com/">https://npmmirror.com/</a></p><!-- 还没阅读的：https://www.cnblogs.com/PeunZhang/p/5553574.htmlhttps://www.cnblogs.com/linjiqin/p/3765772.html -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一些常用的npm(node package manager)命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="https://herotiga.github.io/categories/node/"/>
    
    
  </entry>
  
</feed>
