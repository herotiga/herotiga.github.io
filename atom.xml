<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2021-11-17T11:04:07.722Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason小王子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue3中引入jquery</title>
    <link href="https://herotiga.github.io/2021/11/17/vue%E4%B8%AD%E5%BC%95%E5%85%A5jquery/"/>
    <id>https://herotiga.github.io/2021/11/17/vue%E4%B8%AD%E5%BC%95%E5%85%A5jquery/</id>
    <published>2021-11-17T09:35:57.000Z</published>
    <updated>2021-11-17T11:04:07.722Z</updated>
    
    <content type="html"><![CDATA[<!-- https://www.baidu.com/s?wd=vue%E4%B8%AD%E5%BC%95%E5%85%A5jquery&ie=UTF-8 --><!-- https://www.cnblogs.com/zhoujuan/p/11713746.html --><a id="more"></a><h2 id="安装jquery"><a href="#安装jquery" class="headerlink" title="安装jquery"></a>安装jquery</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i jquery -S</span><br></pre></td></tr></table></figure><h2 id="配置config-index-js"><a href="#配置config-index-js" class="headerlink" title="配置config/index.js"></a>配置config/index.js</h2><p>加入：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br></pre></td></tr></table></figure><p><code>module.exports</code> 中加入：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.plugin(<span class="string">'provide'</span>).use(webpack.ProvidePlugin, [&#123;</span><br><span class="line">        $: <span class="string">'jquery'</span>,</span><br><span class="line">        jquery: <span class="string">'jquery'</span>,</span><br><span class="line">        jQuery: <span class="string">'jquery'</span>,</span><br><span class="line">        <span class="string">'window.jQuery'</span>: <span class="string">'jquery'</span></span><br><span class="line">    &#125;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在组件中引用：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- https://www.baidu.com/s?wd=vue%E4%B8%AD%E5%BC%95%E5%85%A5jquery&amp;ie=UTF-8 --&gt;
&lt;!-- https://www.cnblogs.com/zhoujuan/p/11713746.html --&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>使用vite</title>
    <link href="https://herotiga.github.io/2021/11/11/vite-usage/"/>
    <id>https://herotiga.github.io/2021/11/11/vite-usage/</id>
    <published>2021-11-11T11:11:25.000Z</published>
    <updated>2021-11-14T16:19:31.352Z</updated>
    
    <content type="html"><![CDATA[<p>vite的使用。</p><a id="more"></a><h2 id="安装vite"><a href="#安装vite" class="headerlink" title="安装vite"></a>安装vite</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g create-vite-app</span><br></pre></td></tr></table></figure><h2 id="创建vite项目"><a href="#创建vite项目" class="headerlink" title="创建vite项目"></a>创建vite项目</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create-vite-app project_name</span><br><span class="line">cva project_name</span><br><span class="line">cnpm init vite-app project_name</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project_name</span><br><span class="line">cnpm install</span><br><span class="line">cnpm run dev</span><br></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://vitejs.cn/">https://vitejs.cn/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vite的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-226-翻转二叉树</title>
    <link href="https://herotiga.github.io/2021/10/28/leetcode-226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://herotiga.github.io/2021/10/28/leetcode-226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-10-28T08:07:04.000Z</published>
    <updated>2021-11-02T01:10:11.971Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>翻转一棵二叉树。</p><p>示例：</p><p>输入：</p><pre><code>     4   /   \  2     7 / \   / \1   3 6   9</code></pre><p>输出：</p><pre><code>     4   /   \  7     2 / \   / \9   6 3   1</code></pre><p>备注: 这个问题是受到Max Howell的原问题启发的</p><pre><code>谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>从root开始，每遇到一个节点就交换左右子树，再调用自身遍历左右子树。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TreeNode&#125;</span> <span class="variable">root</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    [root.left, root.right] = [root.right, root.left];</span><br><span class="line">    invertTree(root.left);</span><br><span class="line">    invertTree(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二叉树" scheme="https://herotiga.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="https://herotiga.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-11. 盛最多水的容器</title>
    <link href="https://herotiga.github.io/2021/10/25/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://herotiga.github.io/2021/10/25/leetcode-11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2021-10-25T00:37:40.000Z</published>
    <updated>2021-11-02T01:09:17.672Z</updated>
    
    <content type="html"><![CDATA[<p>难度：中等</p><!--     latex tool: https://www.latexlive.com/ --><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>给你 $n$ 个非负整数 $a_1，a_2，…，a_n$，每个数代表坐标中的一个点 $\left(i,  a_i\right)$ 。在坐标内画 $n$ 条垂直线，垂直线 $i$ 的两个端点分别为 $\left(i,  a_i\right)$ 和 $\left(i, 0\right)$ 。找出其中的两条线，使得它们与 $x$ 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p>示例1：</p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt=""></p><pre><code>输入：[1,8,6,2,5,4,8,3,7]输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为49。</code></pre><p>示例 2：</p><pre><code>输入：height = [1,1]输出：1</code></pre><p>示例 3：</p><pre><code>输入：height = [4,3,2,1,4]输出：16</code></pre><p>示例 4：</p><pre><code>输入：height = [1,2,1]输出：2</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>设两个端点为$\left(i, a_i\right)$和$\left(j, a_j\right)$, 且$i &lt; j$。</p><p>盛水的容量：$\left(j - i\right) \times \min\left(a_i, a_j\right)$</p><p>求两条线使得盛水量最大就是求$\max\left(\left(j - i\right) \times \min\left(a_i, a_j\right)\right)$。</p><p>设置两个指针$i$和$j$，每次都将短的指针向内侧移动，每次移动判断一下容量，直到$i$和$j$相遇。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> area = <span class="number">0</span>,</span><br><span class="line">        max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">        j = height.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        area = (j - i) * <span class="built_in">Math</span>.min(height[i], height[j]);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(area, max);</span><br><span class="line">        height[i] - height[j] &gt; <span class="number">0</span> ? j-- : i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h2><p>错误的将 <code>height[i] - height[j] &gt; 0</code> 简写为了 <code>height[i] - height[j]</code> 造成了排查排了好久，其实 <code>!!(-1)</code> 为 <code>true</code> 。</p><pre><code>对于0之外的正负数求布尔值都为true。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：中等&lt;/p&gt;
&lt;!-- 
    latex tool: https://www.latexlive.com/
 --&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="双指针" scheme="https://herotiga.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer10-I-斐波那契数列</title>
    <link href="https://herotiga.github.io/2021/10/24/%E5%89%91%E6%8C%87Offer10-I-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://herotiga.github.io/2021/10/24/%E5%89%91%E6%8C%87Offer10-I-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2021-10-24T07:25:51.000Z</published>
    <updated>2021-11-02T02:26:13.490Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>写一个函数，输入n，求斐波那契（Fibonacci）数列的第n项（即F(N)）。斐波那契数列的定义如下：</p><pre><code>F(0) = 0,   F(1) = 1F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</code></pre><p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p>示例 1：</p><pre><code>输入：n = 2输出：1</code></pre><p>示例 2：</p><pre><code>输入：n = 5输出：5</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><p>对于fib数列的前两位，直接返回。</p><p>从n为2开始，每一位都是前两位的和，故而只需要设置left和right两个变量存储前两位的值，cur就等于left+right，然后</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="dp-1"><a href="#dp-1" class="headerlink" title="dp"></a>dp</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,</span><br><span class="line">        right = <span class="number">1</span>,</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cur = (left + right) % (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        left = right;</span><br><span class="line">        right = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cur % (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h2><p>每次操作给cur赋值都要<code>mod 1e9+7</code>，真是浪费我好多时间排查。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="https://herotiga.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 07. 重建二叉树</title>
    <link href="https://herotiga.github.io/2021/10/18/%E5%89%91%E6%8C%87Offer-07-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://herotiga.github.io/2021/10/18/%E5%89%91%E6%8C%87Offer-07-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-10-18T15:11:17.000Z</published>
    <updated>2021-11-02T01:10:24.076Z</updated>
    
    <content type="html"><![CDATA[<p>难度：中等</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。</p><p>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p>示例1：</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt=""></p><pre><code>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]Output: [3,9,20,null,null,15,7]</code></pre><p>示例2：</p><pre><code>Input: preorder = [-1], inorder = [-1]Output: [-1]</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>先序遍历第一个元素是整个二叉树的根节点，找到这个根节点。</p><p>在中序遍历中找到根节点，根节点在中序遍历中将二叉树分为了左右两边。</p><p>再在左边的二叉树中找到根节点，根据中序遍历将其分为左右两边，右边的二叉树也同理，递归。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">preorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">inorder</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preorder.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> nodeVal = preorder[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> TreeNode(nodeVal);</span><br><span class="line">    <span class="keyword">let</span> nodeIndexOfInorder = inorder.indexOf(nodeVal);</span><br><span class="line">    <span class="keyword">let</span> leftInorder = inorder.slice(<span class="number">0</span>, nodeIndexOfInorder);</span><br><span class="line">    <span class="keyword">let</span> rightInorder = inorder.slice(nodeIndexOfInorder + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> leftPreorder = preorder.slice(<span class="number">1</span>, <span class="number">1</span> + nodeIndexOfInorder);</span><br><span class="line">    <span class="keyword">let</span> rightPreorder = preorder.slice(<span class="number">1</span> + nodeIndexOfInorder);</span><br><span class="line">    </span><br><span class="line">    node.left = buildTree(leftPreorder, leftInorder);</span><br><span class="line">    node.right = buildTree(rightPreorder, rightInorder);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：中等&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树" scheme="https://herotiga.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 06. 从尾到头打印链表</title>
    <link href="https://herotiga.github.io/2021/10/18/%E5%89%91%E6%8C%87Offer-06-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://herotiga.github.io/2021/10/18/%E5%89%91%E6%8C%87Offer-06-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</id>
    <published>2021-10-18T13:43:31.000Z</published>
    <updated>2021-11-02T01:11:57.452Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p>示例：</p><pre><code>输入：head = [1,3,2]输出：[2,3,1]</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>遍历链表各个元素的val属性值，一次push到一个新数组中，最后返回这个数组的reverse()。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reversePrint = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">let</span> current = head;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        res.push(current.val);</span><br><span class="line">        current = current.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (current != <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.reverse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://herotiga.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 05. 替换空格</title>
    <link href="https://herotiga.github.io/2021/10/12/%E5%89%91%E6%8C%87Offer-05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>https://herotiga.github.io/2021/10/12/%E5%89%91%E6%8C%87Offer-05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</id>
    <published>2021-10-12T08:40:25.000Z</published>
    <updated>2021-11-02T01:12:26.217Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例：</p><p>现有矩阵 matrix 如下：</p><pre><code>输入：s = &quot;We are happy.&quot;输出：&quot;We%20are%20happy.&quot;</code></pre><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ol><li>直接使用replaceAll()</li><li>split() + join()</li><li>遍历拼接</li></ol><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replaceAll(<span class="string">' '</span>, <span class="string">'%20'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">' '</span>).join(<span class="string">'%20'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === <span class="string">' '</span>) &#123;</span><br><span class="line">            res += <span class="string">'%20'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res += s[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字符串" scheme="https://herotiga.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>详解js中的get/set</title>
    <link href="https://herotiga.github.io/2021/10/09/js-get-set/"/>
    <id>https://herotiga.github.io/2021/10/09/js-get-set/</id>
    <published>2021-10-08T17:18:58.000Z</published>
    <updated>2021-10-09T02:46:47.674Z</updated>
    
    <content type="html"><![CDATA[<p>js对象有两种属性：</p><ul><li>数据属性：就是对象中的普通成员。</li><li>存取属性：一组get/set函数，读取对象属性时调用get（不带参数，可以return），设置对象属性时调用set（set中return无效）。</li></ul><p>如果对象内只声明了get，则get/set属性值只可读。<br>如果对象内只声明了set，则get/set属性值只可写且值永远为 <code>undefined</code> 。</p><a id="more"></a><h2 id="get-set写法"><a href="#get-set写法" class="headerlink" title="get/set写法"></a>get/set写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func是obj的存取属性名称</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="keyword">get</span> func() &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> func(val) &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.func);</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>只声明get：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    <span class="keyword">get</span> func() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">// 'Mason'</span></span><br><span class="line">obj.func = <span class="string">''</span>; <span class="comment">// 这里无法修改func</span></span><br><span class="line">obj.name = <span class="string">'Jason'</span>; <span class="comment">// 修改成功</span></span><br></pre></td></tr></table></figure><p>只声明set：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    <span class="keyword">set</span> func(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">// undefined</span></span><br><span class="line">obj.name = <span class="string">'Jason'</span>; <span class="comment">// 修改成功</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 'Jason'</span></span><br></pre></td></tr></table></figure><p>同时声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    <span class="keyword">get</span> func() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> func(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">// 'Mason'</span></span><br><span class="line">obj.func = <span class="string">''</span>; <span class="comment">// 修改成功</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.func); <span class="comment">// ''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js对象有两种属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据属性：就是对象中的普通成员。&lt;/li&gt;
&lt;li&gt;存取属性：一组get/set函数，读取对象属性时调用get（不带参数，可以return），设置对象属性时调用set（set中return无效）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果对象内只声明了get，则get/set属性值只可读。&lt;br&gt;如果对象内只声明了set，则get/set属性值只可写且值永远为 &lt;code&gt;undefined&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="https://herotiga.github.io/2021/10/08/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://herotiga.github.io/2021/10/08/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-10-08T12:11:10.000Z</published>
    <updated>2021-10-13T07:51:53.448Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些常用的npm(node package manager)命令。</p><a id="more"></a><h2 id="npm-v"><a href="#npm-v" class="headerlink" title="npm -v"></a>npm -v</h2><p>查看版本</p><h2 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h2><p><code>npm init</code> 用来创建package.json文件，这个文件用于记录项目的一些信息以及依赖包。<br>再 <code>npm install</code> 则会根据package.json文件来安装依赖到node_modules目录。</p><h2 id="npm-search"><a href="#npm-search" class="headerlink" title="npm search"></a>npm search</h2><p>搜索模块： <code>npm search module_name</code></p><h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><p>局部安装：会安装在在当前目录下的node_modules目录。<br> <code>npm install module_name</code></p><p>安装指定版本：<br> <code>npm install module_name@version_num</code></p><p>全局安装：<br> <code>npm install -g module_name</code></p><p>局部安装并将其添加到package.json中的dependencies:<br><code>npm install module_name --save</code> 缩写 <code>npm install module_name -S</code></p><p>局部安装并将其添加到package.json中的devDependencies(该包会只被用于开发环境):<br><code>npm install module_name --save-dev</code> 缩写 <code>npm install module_name -D</code></p><p>如果安装不成功，则先删除node_modules再清缓存再重试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装完包后在代码里require就可以使用：<br> <code>var new_module_name = require(&#39;module_name&#39;);</code></p><p>升级npm：<br> <code>npm install -g npm</code></p><h2 id="npm-uninstall"><a href="#npm-uninstall" class="headerlink" title="npm uninstall"></a>npm uninstall</h2><p> <code>npm uninstall module_name</code></p><p> <code>npm remove module_name</code></p><h2 id="npm-update"><a href="#npm-update" class="headerlink" title="npm update"></a>npm update</h2><p> <code>npm update module_name</code></p><p> <code>npm update module_name -g</code></p><h2 id="npm-cache-clear"><a href="#npm-cache-clear" class="headerlink" title="npm cache clear"></a>npm cache clear</h2><p>清空本地npm缓存</p><h2 id="npm-publish"><a href="#npm-publish" class="headerlink" title="npm publish"></a>npm publish</h2><p>先创建package.json</p><p>在npm注册：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br><span class="line">Username: Mason</span><br><span class="line">Password: ******</span><br><span class="line">Email: (this IS public) herotiga@vip.qq.com</span><br></pre></td></tr></table></figure><p>发布模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>之后就可以使用 <code>npm install</code> 安装了。</p><h2 id="npm-unpublish"><a href="#npm-unpublish" class="headerlink" title="npm unpublish"></a>npm unpublish</h2><p>撤销已经发布的模块的某个版本：<br> <code>npm unpublish module_name@version</code></p><h2 id="查看相关"><a href="#查看相关" class="headerlink" title="查看相关"></a>查看相关</h2><p>查看一个包的详细信息： <code>npm info module_name</code></p><p>查看一个包的所有版本： <code>npm view module_name versions</code></p><p>查看一个包最新版本： <code>npm view module_name version</code></p><p>查看安装了的包： <code>npm list</code> 缩写 <code>npm ls</code></p><p>查看全局安装的包： <code>npm list -g</code></p><p>查看全局包的安装位置： <code>npm root -g</code></p><p>修复包： <code>npm audit fix</code></p><p>查看当前包的版本： <code>npm is module_name</code></p><h2 id="npm-help"><a href="#npm-help" class="headerlink" title="npm help"></a>npm help</h2><p>查看帮助： <code>npm help</code></p><p>查看特定命令帮助： <code>npm help install</code></p><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><p>参见：<a href="https://npmmirror.com/">https://npmmirror.com/</a></p><!-- 还没阅读的：https://www.cnblogs.com/PeunZhang/p/5553574.htmlhttps://www.cnblogs.com/linjiqin/p/3765772.html -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一些常用的npm(node package manager)命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="https://herotiga.github.io/categories/node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>爬虫基础</title>
    <link href="https://herotiga.github.io/2021/10/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    <id>https://herotiga.github.io/2021/10/08/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-08T01:32:28.000Z</published>
    <updated>2021-10-08T02:11:03.482Z</updated>
    
    <content type="html"><![CDATA[<p>除了常用的java, python可以做爬虫之外，其实任何后端语言都可以做爬虫，其中也包括了node.js。<br>node.js做爬虫的优势是异步和高并发。</p><a id="more"></a><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>获取需要的数据的流程是：抓取 - 存储 - 分析 - 展示。<br>整个流程应该做到以上步骤的分离。</p><h3 id="抓取"><a href="#抓取" class="headerlink" title="抓取"></a>抓取</h3><p>第一步就是抓取需要的页面。</p><p>从效率上来讲需要爬虫能够异步和并发爬取。</p><p>抓取回来的页面会有很多问题待解决，比如cookie、认证、编码、文件处理、url合规、多线程多进程、压缩等问题。</p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><p>抓取到的页面按照一定的策略存储(fs, db)起来.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>分析链接。<br>按需求提取数据。</p><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p>数据可视化</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了常用的java, python可以做爬虫之外，其实任何后端语言都可以做爬虫，其中也包括了node.js。&lt;br&gt;node.js做爬虫的优势是异步和高并发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://herotiga.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>js变量和文件命名</title>
    <link href="https://herotiga.github.io/2021/09/30/js%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>https://herotiga.github.io/2021/09/30/js%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</id>
    <published>2021-09-30T06:10:34.000Z</published>
    <updated>2021-09-30T06:37:58.275Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下js中的各种命名。</p><a id="more"></a><ol><li>一般来说命名变量使用驼峰式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">'Mason'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>命名布尔型前缀使用is, are, has</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isNum = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>函数采用动词前缀</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> queryString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>类采用PascalCase声明</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProblemSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>组件名采用PascalCase</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; NavBar &gt; &lt; <span class="regexp">/NavBar&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>方法采用驼峰式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProblemSolution</span> </span>&#123;</span><br><span class="line">    getName() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>私有变量</li></ol><p>私有变量仅能在类内部使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProblemSolution</span> </span>&#123;</span><br><span class="line">    _getName() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>常量用全大写</li></ol><p>若遇到多个单词则中间插入下划线。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NAME = <span class="string">'Mason'</span>;</span><br><span class="line"><span class="keyword">const</span> GRADUATE_INSTITUTION = <span class="string">'MIT'</span>;</span><br></pre></td></tr></table></figure><ol start="9"><li>全局变量在文件顶部声明</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> edition = <span class="string">'v1.0'</span>;</span><br><span class="line"><span class="keyword">const</span> NAME = <span class="string">'Mason'</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="10"><li><p>不要使用破折号</p></li><li><p>js文件使用PascalCase或者kebab-case命名。</p></li></ol><p>使用PascalCase命名组件。</p><p>使用kebab-case命名其他文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下js中的各种命名。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>使用node.js爬取静态页面</title>
    <link href="https://herotiga.github.io/2021/09/29/%E4%BD%BF%E7%94%A8node-js%E7%88%AC%E5%8F%96%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/"/>
    <id>https://herotiga.github.io/2021/09/29/%E4%BD%BF%E7%94%A8node-js%E7%88%AC%E5%8F%96%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</id>
    <published>2021-09-29T06:32:27.000Z</published>
    <updated>2021-10-09T08:19:12.417Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫就是向目标url发送请求，然后把服务器的相应解析为我们需要的格式。<br>下面爬取整个页面，也可以根据个人需求爬取自己需要的信息。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># request库用于发送请求</span></span><br><span class="line">cnpm install request --save</span><br><span class="line"><span class="comment"># cheerio是jQuery核心代码, 用于操作请求返回的DOM</span></span><br><span class="line">cnpm install cheerio --save</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><figure class="highlight js"><figcaption><span>spider.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url;</span><br><span class="line"><span class="keyword">let</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'请输入要爬取的url:'</span>);</span><br><span class="line"></span><br><span class="line">rl.question(<span class="string">'url:'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    url = res;</span><br><span class="line">    rl.close();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正在爬取...'</span>);</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">'爬取耗时'</span>);</span><br><span class="line">    request(url, (err, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'创建输出目录错误'</span> + <span class="string">''</span> + err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'爬取成功！'</span>);</span><br><span class="line">            <span class="built_in">console</span>.timeEnd(<span class="string">'爬取耗时'</span>);</span><br><span class="line">            <span class="keyword">let</span> $ = cheerio.load(res.body);</span><br><span class="line">            <span class="keyword">let</span> DOM = $(<span class="string">'html'</span>).prop(<span class="string">'outerHTML'</span>);</span><br><span class="line">            <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'正在写入文件...'</span>);</span><br><span class="line">            <span class="built_in">console</span>.time(<span class="string">'写入耗时'</span>);</span><br><span class="line">            fs.writeFile(<span class="string">'./output/output_'</span>+ now + <span class="string">'.html'</span>, DOM, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'写入失败，错误信息：'</span> + err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'写入成功！'</span>);</span><br><span class="line">                    <span class="built_in">console</span>.timeEnd(<span class="string">'写入耗时'</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'文件路径：'</span> + __dirname + <span class="string">'/output/output_'</span> + now + <span class="string">'.html'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node spider.js</span><br></pre></td></tr></table></figure><p>页面中引用的静态资源文件还没有爬。<br>等等再写。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬虫就是向目标url发送请求，然后把服务器的相应解析为我们需要的格式。&lt;br&gt;下面爬取整个页面，也可以根据个人需求爬取自己需要的信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="https://herotiga.github.io/categories/node-js/"/>
    
      <category term="爬虫" scheme="https://herotiga.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>变量提升(hoisting)</title>
    <link href="https://herotiga.github.io/2021/09/23/hoisting/"/>
    <id>https://herotiga.github.io/2021/09/23/hoisting/</id>
    <published>2021-09-23T01:19:38.000Z</published>
    <updated>2021-09-28T09:21:45.515Z</updated>
    
    <content type="html"><![CDATA[<p><code>var</code> 和 <code>function</code> 的声明毫无疑问是会被提升到其所在的全局作用域顶部或者函数作用域顶部的。<br>故而，对于 <code>var</code> 和 <code>function</code> 可以先使用后声明。</p><p>但是对于 <code>let</code> 和 <code>const</code> ，各种文章教程都说不会被js提升。<br>但是我从暂时性死区(TDZ)中发现其实他们俩也是存在变量提升的，只是他们被提升的时候不会在js内部被初始化。</p><a id="more"></a><hr><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>对于 <code>let</code> ，具有块级作用域，会被提升到其所在代码块顶部，不能重复声明，存在TDZ。</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>对于 <code>const</code> ，具有块级作用域，会被提升到其所在代码块顶部，一旦声明就无法改变其值，不能重复声明，存在TDZ。<br>故而，需要在声明的时候同时初始化。</p><p>我们可以看到 <code>let</code> 和 <code>const</code> 的唯一区别就是 <code>const</code> 需要申明时初始化否则报错，而且不能改变其值。<br>其他都相同，包括两者都存在TDZ。</p><p>因此造成了 <code>let</code> 和 <code>const</code> 由于TDZ的存在而不能在声明前使用。</p><!-- 深入阅读：https://www.jianshu.com/p/0f49c88cf169 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;function&lt;/code&gt; 的声明毫无疑问是会被提升到其所在的全局作用域顶部或者函数作用域顶部的。&lt;br&gt;故而，对于 &lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;function&lt;/code&gt; 可以先使用后声明。&lt;/p&gt;
&lt;p&gt;但是对于 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; ，各种文章教程都说不会被js提升。&lt;br&gt;但是我从暂时性死区(TDZ)中发现其实他们俩也是存在变量提升的，只是他们被提升的时候不会在js内部被初始化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记——字符串的扩展</title>
    <link href="https://herotiga.github.io/2021/09/15/es6-note-04-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>https://herotiga.github.io/2021/09/15/es6-note-04-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</id>
    <published>2021-09-14T16:05:54.000Z</published>
    <updated>2021-11-11T01:57:50.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符的unicode表示法"><a href="#字符的unicode表示法" class="headerlink" title="字符的unicode表示法"></a>字符的unicode表示法</h2><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单字节表示，只能表示\u000-\uFFFF之间的字符</span></span><br><span class="line"><span class="string">'\u0061'</span> <span class="comment">// 'a'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双字节表示</span></span><br><span class="line"><span class="string">'\uD842\uDFB7'</span></span><br><span class="line"><span class="string">'𠮷'</span></span><br></pre></td></tr></table></figure><h2 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h2><p>es6为字符串添加了遍历器接口，所以可以使用 <code>for...of</code> 遍历字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> <span class="string">'asdfgh'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for...of</code> 可以遍历unicode的字符串， <code>for</code> 不可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="built_in">String</span>.fromCodePoint(<span class="number">0x20BB7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// " "</span></span><br><span class="line"><span class="comment">// " "</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> text) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "𠮷"</span></span><br></pre></td></tr></table></figure><h2 id="JSON-stringify-的扩展"><a href="#JSON-stringify-的扩展" class="headerlink" title="JSON.stringify()的扩展"></a>JSON.stringify()的扩展</h2><p>es2019对于 <code>JSON.stringify()</code> 的心行为是保留unicode供开发者自己决定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\u&#123;D834&#125;'</span>) <span class="comment">// ""\\uD834""</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'\uDF06\uD834'</span>) <span class="comment">// ""\\udf06\\ud834""</span></span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>jQuery插入html：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#result'</span>).append(</span><br><span class="line">    <span class="string">'There are &lt;b&gt;'</span> + basket.count + <span class="string">'&lt;/b&gt; '</span> +</span><br><span class="line">    <span class="string">'items in your basket, '</span> +</span><br><span class="line">    <span class="string">'&lt;em&gt;'</span> + basket.onSale +</span><br><span class="line">    <span class="string">'&lt;/em&gt; are on sale!'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>es6模板字符串插入html：使用反引号包裹html字符串，使用 <code>${var_name}</code> 来引用变量，可以作为普通字符串使用，直接回车多行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#result'</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><p>括号内部可以是任意js表达式包括调用函数。大括号中最后都会转化为字符串( <code>toString()</code> )。</p><p>模板字符串可以嵌套。</p><p>模板可以写成函数，需要的时候调用这个函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符的unicode表示法&quot;&gt;&lt;a href=&quot;#字符的unicode表示法&quot; class=&quot;headerlink&quot; title=&quot;字符的unicode表示法&quot;&gt;&lt;/a&gt;字符的unicode表示法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记——变量的解构赋值</title>
    <link href="https://herotiga.github.io/2021/09/10/es6-note-03-%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>https://herotiga.github.io/2021/09/10/es6-note-03-%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</id>
    <published>2021-09-10T06:57:06.000Z</published>
    <updated>2021-11-05T00:55:01.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="对称解构"><a href="#对称解构" class="headerlink" title="对称解构"></a>对称解构</h4><p>只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p><p>一次性给三个变量赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><a id="more"></a><p>给多维数组赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, [c, d]] = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br></pre></td></tr></table></figure><p>rest:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">tail</span><br><span class="line"><span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>如果解构不成功则被赋值为 <code>undefined</code> 。</p><h4 id="非对称解构"><a href="#非对称解构" class="headerlink" title="非对称解构"></a>非对称解构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 也成功</span></span><br></pre></td></tr></table></figure><p>如果等号的右边是不可比遍历的解构则报错。</p><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 成功</span></span><br></pre></td></tr></table></figure><p>只要数据类型具有Iterator接口就可以使用数组结构。</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>指定默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [name = <span class="string">'mason'</span>] = [];</span><br><span class="line">name <span class="comment">// 'mason'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></span><br></pre></td></tr></table></figure><p>es6内部判断一个位置是否有值： 严格等于 <code>undefined</code> 才会赋予默认值，也就是说除了 <code>undefined</code> 不能作为默认值其他都可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>];</span><br><span class="line"><span class="comment">// x = 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>];</span><br><span class="line"><span class="comment">// x = null</span></span><br></pre></td></tr></table></figure><p>如果默认值是一个表达式，那么这个表达式不会执行并返回值，因为表达式是惰性求值的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a = f()] = [<span class="number">2</span>];</span><br><span class="line"><span class="comment">// a为2</span></span><br></pre></td></tr></table></figure><h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = &#123;<span class="attr">a</span>:<span class="string">'a'</span>, <span class="attr">b</span>: <span class="string">'b'</span>&#125;;</span><br><span class="line"><span class="comment">// a: 'a'</span></span><br><span class="line"><span class="comment">// b: 'b'</span></span><br></pre></td></tr></table></figure><p>对象的解构没有次序限制，变量名需要和属性名相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = &#123;<span class="attr">b</span>: <span class="string">'b'</span>, <span class="attr">a</span>: <span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="comment">// a: 'a'</span></span><br><span class="line"><span class="comment">// b: 'b'</span></span><br></pre></td></tr></table></figure><p>如果解构失败，变量的值为<code>undefined</code>。</p><p>使用对象解构赋值可以动态的给变量赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">Math</span> = &#123;</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    sin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    cos: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    tan: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;log, sin, cos&#125; = <span class="built_in">Math</span>;</span><br></pre></td></tr></table></figure><p>如果变量名和属性名不一致，则要写成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的aa和bb相当于a和b的别名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: aa, <span class="attr">b</span>: bb&#125; = &#123;<span class="attr">b</span>: <span class="string">'b'</span>, <span class="attr">a</span>: <span class="string">'a'</span>&#125;;</span><br><span class="line"><span class="comment">// aa: 'a'</span></span><br><span class="line"><span class="comment">// bb: 'b'</span></span><br></pre></td></tr></table></figure><p>也就是说对象的解构赋值是如下机制：先找到同名属性然后赋值给对应的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar&#125; = &#123;<span class="attr">foo</span>: <span class="string">'a'</span>, <span class="attr">bar</span>: <span class="string">'b'</span>&#125;;</span><br></pre></td></tr></table></figure><p>对象的解构也可以嵌套：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  p: [</span><br><span class="line">    <span class="string">'Hello'</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br></pre></td></tr></table></figure><h3 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h3><p>对象的解构也可以指定默认值，具体同数组的解构一样。</p><p>默认值生效的条件是对象的属性值<code>=== undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生效</span></span><br><span class="line"><span class="keyword">let</span> &#123;x = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line"><span class="comment">// x = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不生效</span></span><br><span class="line"><span class="keyword">let</span> &#123;x = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// x  1</span></span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>如何解构一个已经声明了的变量：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>对于类似数组的对象也可以与数组结构</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span>&#125; = arr;</span><br></pre></td></tr></table></figure><h2 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h2><p>对于非对象和数组的类型在被解构时会先被转为包装对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="string">'why'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>: len&#125; = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// len = 5</span></span><br></pre></td></tr></table></figure><h2 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h2><p>对于非对象和数组的类型在被解构时会先被转为包装对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</span><br><span class="line">s === <span class="built_in">Boolean</span>.prototype.toString <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="undefined和null"><a href="#undefined和null" class="headerlink" title="undefined和null"></a>undefined和null</h2><p><code>undefined</code>和<code>null</code>无法转为对象故而在结构时会报错。</p><h2 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, undefined]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [undefined, undefined]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure><h2 id="圆括号问题"><a href="#圆括号问题" class="headerlink" title="圆括号问题"></a>圆括号问题</h2><h3 id="不能使用圆括号的情况"><a href="#不能使用圆括号的情况" class="headerlink" title="不能使用圆括号的情况"></a>不能使用圆括号的情况</h3><ol><li>变量声明</li><li>参数函数</li><li>赋值语句模式</li></ol><h3 id="可以使用圆括号的情况"><a href="#可以使用圆括号的情况" class="headerlink" title="可以使用圆括号的情况"></a>可以使用圆括号的情况</h3><ol><li>赋值语句的非模式部分</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[(a)] = [<span class="number">1</span>];</span><br><span class="line">(&#123;<span class="attr">p</span>: (d)&#125; = &#123;&#125;);</span><br><span class="line">[&#123;<span class="built_in">parseInt</span>.prop&#125;] = [<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="变量解构的用途"><a href="#变量解构的用途" class="headerlink" title="变量解构的用途"></a>变量解构的用途</h2><ol><li>交换变量</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure><ol start="2"><li>从函数返回多个值</li></ol><p>函数只能return一个值，想要返回多个值就要把他们放到数组或者对象里面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以返回对象为例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        foo: <span class="number">1</span>,</span><br><span class="line">        bar: <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;foo, bar&#125; = f();</span><br></pre></td></tr></table></figure><ol start="3"><li>函数参数的定义</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>提取JSON</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">'wang'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    isMarried: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, isMarried&#125; = data;</span><br></pre></td></tr></table></figure><ol start="5"><li>函数参数的默认值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    name = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    age = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    isMarried = false,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 操作参数 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>遍历Map</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</span><br><span class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>输入模块的指定方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">"source-map"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组的解构赋值&quot;&gt;&lt;a href=&quot;#数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;数组的解构赋值&quot;&gt;&lt;/a&gt;数组的解构赋值&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;h4 id=&quot;对称解构&quot;&gt;&lt;a href=&quot;#对称解构&quot; class=&quot;headerlink&quot; title=&quot;对称解构&quot;&gt;&lt;/a&gt;对称解构&lt;/h4&gt;&lt;p&gt;只要等号两边的模式相同，左边的变量就会被赋予对应的值。&lt;/p&gt;
&lt;p&gt;一次性给三个变量赋值：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, b, c] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, , y] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记——let和const</title>
    <link href="https://herotiga.github.io/2021/09/08/es6-note-02-let-const/"/>
    <id>https://herotiga.github.io/2021/09/08/es6-note-02-let-const/</id>
    <published>2021-09-08T09:28:56.000Z</published>
    <updated>2021-09-28T09:21:58.187Z</updated>
    
    <content type="html"><![CDATA[<p><code>let</code> 和 <code>const</code> 是es6新增的用于声明变量的命令 。<br><code>let</code> 用于可以代替 <code>var</code> ，用于声明作用域为该代码块的变量。<br><code>const</code> 用于声明作用域为该代码块的常量。</p><a id="more"></a><h2 id="es5和es6声明变量的几种方式"><a href="#es5和es6声明变量的几种方式" class="headerlink" title="es5和es6声明变量的几种方式"></a>es5和es6声明变量的几种方式</h2><h3 id="es5"><a href="#es5" class="headerlink" title="es5"></a>es5</h3><ul><li><code>var</code></li><li><code>function</code></li></ul><h3 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h3><ul><li><p><code>var</code></p></li><li><p><code>function</code></p></li><li><p><code>let</code></p></li><li><p><code>const</code></p></li><li><p><code>import</code></p></li><li><p><code>class</code></p></li></ul><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>ES6新增了 <code>let</code> 命令用于声明变量，只在所在代码块内有效。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的i的作用域仅仅在循环体内</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i</span><br><span class="line"><span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里var声明的i为全局变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><code>for</code> 循环中： <code>()</code> 内和 <code>{}</code> 内不是同一个作用域， <code>()</code> 位于 <code>{}</code> 的父作用域，孤儿 <code>{}</code> 内部可以再次声明已经在 <code>()</code> 中声明过的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 这里重新声明了i覆盖了上面的声明</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>另外：在同一个作用域内不可以使用 <code>let</code> 重复声明同一个变量。</p><h3 id="没有变量提升"><a href="#没有变量提升" class="headerlink" title="没有变量提升"></a>没有变量提升</h3><p><code>var</code> 有变量提升。<br><code>let</code> 没有变量提升。</p><p>故而， <code>let</code> 需要先声明后使用。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var，这里使用var声明的foo会被提升到顶部，但是对于foo的赋值没有被提升到顶部，故而可以获取到foo但是为undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let，这里使用let声明的bar不会被提升到顶部，会报引用错误</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="暂时性死区-TDZ"><a href="#暂时性死区-TDZ" class="headerlink" title="暂时性死区(TDZ)"></a>暂时性死区(TDZ)</h3><p>只要块级作用域内存在 <code>let</code> ，那么它所声明的变量就绑定了这个作用域且不受外部影响。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><article class="message is-warning"><div class="message-body"><p>这里很奇怪的一点就是：js代码是自上往下顺序执行的，代码块内如何提前知道下面有let声明了某个在let之前就被操作了的变量并在let之前就抛出错误呢？</p><p>找到了<a href="https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-hoisted">stackoverflow</a>的说法：let和const也是存在变量提升的，只是不像var变量提升的时候会被初始化为undefined，let和const会一直保持未初始化的状态。</p></div></article><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// TDZ开始</span></span><br><span class="line">    temp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tmp;</span><br><span class="line">    <span class="comment">// TDZ结束</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正因为 <code>let</code> 的TDZ特性，使得很多在 <code>let</code> 声明一个变量之前对于这个变量做的操作失效。</p><p>故而，在一个代码块内，对于一个变量，一定要先使用 <code>let</code> 声明后使用。</p><p>实例：隐蔽的死区</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x = y, y = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>这里y还没声明就赋值给了x，也就是y还没被声明就被使用了，此时为TDZ故而报错。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">var</span> x = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> x = x;</span><br></pre></td></tr></table></figure><p>软神的这句话可能有误：</p><blockquote><p>ES6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。</p></blockquote><pre><code>总而言之：需要先let声明后使用，否则就报错。</code></pre><h3 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h3><p>不允许使用 <code>let</code> 在同一作用域内多次声明一个变量，否则报错。</p><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><h3 id="es5作用域"><a href="#es5作用域" class="headerlink" title="es5作用域"></a>es5作用域</h3><p>es5的作用域：只有全局作用域和函数内作用域。</p><p>实例：函数体内部的声明覆盖了全局声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = <span class="string">'abc'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这里编写代码的本意是在 <code>console.log</code> 这行使用外部 <code>tmp</code> ，在 <code>if</code> 循环体内部重新声明变量 <code>tmp</code> ，但是结果却是 <code>undefined</code> 。<br>原因是循环体内部对于 <code>tmp</code> 的声明被提升到了函数的顶部，故而 <code>console.log</code> 打印的是已经被在函数内声明的 <code>tmp</code> 。</p><p>实例：计数变量泄露为全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// h</span></span><br><span class="line"><span class="comment">// e</span></span><br><span class="line"><span class="comment">// l</span></span><br><span class="line"><span class="comment">// l</span></span><br><span class="line"><span class="comment">// o</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>这里的 <code>i</code> 最终被计算成了5，并且是一个全局变量，造成了变量泄露。</p><h3 id="es6作用域"><a href="#es6作用域" class="headerlink" title="es6作用域"></a>es6作用域</h3><p>es6的作用域： <code>let</code> 为js提供了块作用域， <code>let</code> 声明的变量作用域仅在其所处的代码块内，并且外层代码块不受内层代码块的影响。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里声明的n的作用域在函数内部</span></span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> n = <span class="number">10</span>; <span class="comment">// 这里声明的n的作用域仅在if内部</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例：es6允许块作用域任意层嵌套， 内层可以访问外层，外层无法访问内层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1</span>; &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">2</span>; &#123;</span><br><span class="line">            <span class="keyword">let</span> num = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块作用域可以替代IIFE：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 外部不可访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 块作用域替代</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部不可访问</span></span><br></pre></td></tr></table></figure><h3 id="块作用域和函数声明"><a href="#块作用域和函数声明" class="headerlink" title="块作用域和函数声明"></a>块作用域和函数声明</h3><p>那么函数可以在块作用域内声明吗？</p><p>es5：只能在全局声明或者函数内作用域声明，但是浏览器不会报错。</p><p>es6：允许在块作用域内声明函数。</p><p>实例：下面的代码在es5中运行会得到 <code>I am inside!</code> ，因为if内部的重新声明会被提升到函数顶部从而覆盖了外部的声明。<br>而如果在es6中运行理论上会得到 <code>I am outside!</code> 但是实际上在浏览器中运行都会报错，原因是这段代码在es5和在es6中的运行结果截然相反，故而会导致严重的问题，为了保证对es5的兼容会在es6中报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 重复声明一次函数f</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>故而不要在块作用域内部声明函数或者如果要声明也要携程函数表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不建议</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要在块内部声明函数则用表达式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es6的块作用域必须有大括号 <code>{}</code> ，否则js不认为其是块作用域。<br>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有写大括号，报错</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数作用域仅在if内部</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>const</code> 声明一个只读的常量，其指向一个内存空间，内存空间内容不可改变。<br>故而 <code>const</code> 声明时就要赋值，因为一旦声明之后就无法改变。</p><p><code>const</code> 的作用域和 <code>let</code> 一样：只在其所声明的块作用域内有效。<br><code>const</code> 也存在TDZ，也需要先声明并赋值后使用。<br><code>const</code> 也不可以重复声明。</p><h3 id="const的本质"><a href="#const的本质" class="headerlink" title="const的本质"></a>const的本质</h3><p><code>const</code> 实质上是保证 <code>const</code> 变量指向的内存空间的内容不变。<br>对于基本数据类型而言：指向的内存空间就是保存了基本类型的数据（布尔，字符串，数字），故而一旦使用 <code>const</code> 声明了基本数据类型就无法改变。<br>对于符合数据类型而言：指向的内存空间保存了这个复杂类型的指针，而指针又指向了另外一个或者多个内存空间，这里的内存空间才是真正保存了复杂类型下的基本类型的值。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'mason'</span>;</span><br><span class="line">person.age = <span class="number">22</span>;</span><br><span class="line"><span class="comment">// 修改person对象的属性均成功</span></span><br><span class="line"></span><br><span class="line">person = &#123;&#125;;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// 这里给person赋了一个新的值&#123;&#125;，这里的&#123;&#125;内存地址和原来的不一样故报错</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line">arr.push(<span class="string">'a'</span>);</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="string">'b'</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// 这里给arr赋值了新的内存空间故而报错</span></span><br></pre></td></tr></table></figure><h2 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h2><p>浏览器中的顶层对象是 <code>window</code> 对象。<br>node环境中的顶层对象是 <code>global</code> 对象。</p><p>在es5中：顶层对象的属性和全局变量等价。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.person = <span class="string">'mason'</span>;</span><br><span class="line">person <span class="comment">// 'mason'</span></span><br><span class="line"></span><br><span class="line">person <span class="comment">// 'mason'</span></span><br><span class="line"><span class="built_in">window</span>.person <span class="comment">// 'mason'</span></span><br></pre></td></tr></table></figure><p>在es6中： <code>var</code> 和 <code>function</code> 声明的仍然是顶层对象的属性（或者说全局变量），而 <code>let</code> , <code>const</code> , <code>class</code> 声明的全局变量不属于顶层对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两种写法等价</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'mason'</span>;</span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'mason'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let声明的变量不属于顶层对象的属性</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'mason'</span>;</span><br><span class="line"><span class="built_in">window</span>.name</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="globalThis对象"><a href="#globalThis对象" class="headerlink" title="globalThis对象"></a>globalThis对象</h2><p>上面说了js在浏览器环境和在node环境中的顶层对象不同，或者说“在各个js的实现里面，顶层对象不统一。”</p><p>为了能让代码能适应多个实现的环境，在es2020里面引入了 <code>globalThis</code> 对象，该对象存在于所有环境，可以通过其拿到顶层对象。</p><figure class="highlight js"><figcaption><span>浏览器环境</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局作用域下，以下均为true</span></span><br><span class="line"><span class="built_in">window</span> === <span class="keyword">this</span></span><br><span class="line"><span class="built_in">window</span> === globalThis</span><br><span class="line"><span class="keyword">this</span> === globalThis</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>node</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局作用域下，以下均为true</span></span><br><span class="line">global === <span class="keyword">this</span></span><br><span class="line">global === globalThis</span><br><span class="line"><span class="keyword">this</span> === globalThis</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; 是es6新增的用于声明变量的命令 。&lt;br&gt;&lt;code&gt;let&lt;/code&gt; 用于可以代替 &lt;code&gt;var&lt;/code&gt; ，用于声明作用域为该代码块的变量。&lt;br&gt;&lt;code&gt;const&lt;/code&gt; 用于声明作用域为该代码块的常量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记——简介</title>
    <link href="https://herotiga.github.io/2021/09/08/es6-note-01-%E7%AE%80%E4%BB%8B/"/>
    <id>https://herotiga.github.io/2021/09/08/es6-note-01-%E7%AE%80%E4%BB%8B/</id>
    <published>2021-09-08T09:28:14.000Z</published>
    <updated>2021-09-28T09:22:03.124Z</updated>
    
    <content type="html"><![CDATA[<p>es6笔记</p><!-- ES6教程来自阮一峰老师：https://es6.ruanyifeng.com/ --><a id="more"></a><h2 id="ECMAScript和JavaScript的关系"><a href="#ECMAScript和JavaScript的关系" class="headerlink" title="ECMAScript和JavaScript的关系"></a>ECMAScript和JavaScript的关系</h2><p>ECMAScript是JavaScript的规格，JavaScript是ECMAScript的一种实现（还有JScript和ActionScript）。<br>日常场合，这两个词是可以互换的。</p><h2 id="ES6与ECMAScript2015的关系"><a href="#ES6与ECMAScript2015的关系" class="headerlink" title="ES6与ECMAScript2015的关系"></a>ES6与ECMAScript2015的关系</h2><p>ES6既是一个历史名词，也是一个泛指，含义是5.1版以后的JavaScript的下一代标准，涵盖了ES2015、ES2016、ES2017等等，而ES2015则是正式名称，特指该年发布的正式版本的语言标准。本书中提到ES6的地方，一般是指ES2015标准，但有时也是泛指“下一代JavaScript语言”。</p><h2 id="ECMAScript的历史"><a href="#ECMAScript的历史" class="headerlink" title="ECMAScript的历史"></a>ECMAScript的历史</h2><p>Node.js是JavaScript的服务器运行环境（runtime）。它对ES6的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看Node.js默认没有打开的ES6实验性语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux &amp; Mac</span></span><br><span class="line">$ node --v8-options | grep harmony</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">$ node --v8-options | findstr harmony</span><br></pre></td></tr></table></figure><h2 id="Babel转码器"><a href="#Babel转码器" class="headerlink" title="Babel转码器"></a>Babel转码器</h2><p>Babel是一个es6转码器，可以将es6转为es5代码以提高es6代码的向下兼容。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转码前, es6的肩头函数</span></span><br><span class="line">input.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转码后, es5的普通函数</span></span><br><span class="line">input.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在项目目录中使用Babel：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev @babel/core</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>安装完了第一步就是要配置 <code>.babelrc</code> 文件。</p><p>配置文件存在于项目根目录下，用于配置转码规则和插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 用于设定转码规则</span><br><span class="line">    &quot;presets&quot;: [],</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 用于设定插件 </span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装转码规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新转码规则</span></span><br><span class="line">$ npm install --save-dev @babel/preset-env</span><br><span class="line"></span><br><span class="line"><span class="comment"># react转码规则</span></span><br><span class="line">$ npm install --save-dev @babel/preset-react</span><br></pre></td></tr></table></figure><p>添加到 <code>.babelrc</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">      &quot;@babel&#x2F;env&quot;,</span><br><span class="line">      &quot;@babel&#x2F;preset-react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="命令行转码"><a href="#命令行转码" class="headerlink" title="命令行转码"></a>命令行转码</h3><p>安装命令行转码器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev @babel/cli</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转码结果输出到标准输出</span></span><br><span class="line">$ npx babel example.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转码结果写入一个文件</span></span><br><span class="line"><span class="comment"># --out-file 或 -o 参数指定输出文件</span></span><br><span class="line">$ npx babel example.js --out-file compiled.js</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ npx babel example.js -o compiled.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个目录转码</span></span><br><span class="line"><span class="comment"># --out-dir 或 -d 参数指定输出目录</span></span><br><span class="line">$ npx babel src --out-dir lib</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ npx babel src -d lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 参数生成source map文件</span></span><br><span class="line">$ npx babel src -d lib -s</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>阮一峰ES6教程：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6笔记&lt;/p&gt;
&lt;!-- ES6教程来自阮一峰老师：https://es6.ruanyifeng.com/ --&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js类型转换</title>
    <link href="https://herotiga.github.io/2021/09/08/js%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://herotiga.github.io/2021/09/08/js%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-09-08T03:09:23.000Z</published>
    <updated>2021-09-10T06:30:43.689Z</updated>
    
    <content type="html"><![CDATA[<p>js中时长发生着各种类型转换，有显式的有隐式的。<br>本文总结了js中的类型转换的场景和类型。</p><a id="more"></a><h2 id="js中的数据类型"><a href="#js中的数据类型" class="headerlink" title="js中的数据类型"></a>js中的数据类型</h2><p>js中的数据类型可以分为：基本数据类型和引用数据类型。</p><p>基本数据类型：</p><ul><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li><li>symbol</li><li>bigint</li></ul><p>引用数据类型：</p><ul><li>object</li><li>Array</li><li>Date</li><li>RegExp</li><li>Math</li><li>Error</li><li>Number</li><li>String</li><li>Boolean</li><li>function</li></ul><h2 id="类型之间的转换"><a href="#类型之间的转换" class="headerlink" title="类型之间的转换"></a>类型之间的转换</h2><p>类型转换分为显式转换和隐式转换。</p><p>显式转换：代码中使用函数进行类型转换。<br>隐式转换：不同数据类型之间使用运算符的时候，js自动的进行了类型转换。</p><p>类型转换最终只会转换成三种数据类型：</p><ul><li>Number: <code>Number()</code>, <code>parseInt()</code>, <code>parseFloat()</code></li><li>String: <code>String()</code>, <code>toString()</code></li><li>Boolean: <code>Boolean()</code></li></ul><h2 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h2><p>显式转换： <code>Boolean(2)</code></p><p>隐式转换：逻辑运算时触发， <code>if(2){}</code> , <code>!!2</code> , <code>2&amp;&amp;true</code></p><p>只有以下会被转为 <code>false</code> ，其余的都是 <code>true</code> ：</p><ul><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code></li><li><code>null</code></li><li><code>undefined</code></li></ul><h2 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h2><p>显式转换： <code>String([1, 2, 3])</code> , <code>String({})</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">'2'</span></span><br><span class="line"><span class="comment">// '12'</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> + &#123;&#125;</span><br><span class="line"><span class="comment">// 1[object Object]</span></span><br></pre></td></tr></table></figure><p>隐式转换：使用 <code>+</code> 连接一个string的时候触发，或者使用 <code>+</code> 连接一个bject的时候触发。</p><h2 id="转换为数字"><a href="#转换为数字" class="headerlink" title="转换为数字"></a>转换为数字</h2><p>显式转换： <code>Number()</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'10px'</span>)</span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'10'</span>)</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="built_in">Symbol</span>())</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">12312412321312312n</span>)</span><br><span class="line"><span class="comment">// 12312412321312312</span></span><br></pre></td></tr></table></figure><p>隐式转换：在比较运算符、按位操作、算术运算以及 <code>+</code> 触发。</p><h2 id="转换规则"><a href="#转换规则" class="headerlink" title="==转换规则"></a>==转换规则</h2><p><code>==</code> 运算符如果两边类型不同会进行类型转换。</p><ul><li><code>对象==字符串</code>：会将对象转换为字符串。</li><li><code>对象==对象</code>：比较指针。</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>Q:<br><code>let result = 100 + true + 21.2 + null + undefined + &quot;Tencent&quot; + [] + null + 9 + false;</code> 结果是什么？</p><p>A:<br><code>100 + true</code><br><code>101</code> , 加号两边存在数字则将另一个转为数组</p><p><code>101 + 21.2</code><br><code>122.2</code> , 数字加数字</p><p><code>122.2 + null</code><br><code>122.2</code> , 加号两边存在数字则将另一个转为数字</p><p><code>122.2 + undefined</code><br><code>NaN</code> , 加号两边存在数字则将 <code>undefined</code> 转为 <code>NaN</code> ，结果仍为 <code>NaN</code></p><p><code>NaN + &quot;Tencent&quot;</code><br><code>&quot;NaNTencent&quot;</code> , 加号两边存在字符串则将另一个转为字符串</p><p><code>&quot;NaNTencent&quot; + []</code><br><code>&quot;NaNTencent&quot;</code> , 加号两边存在字符串则将另一个 <code>[]</code> 转为字符串 <code>&quot;&quot;</code></p><p><code>&quot;NaNTencent&quot; + null</code><br><code>&quot;NaNTencentnull&quot;</code> , <code>null</code> 转为字符串为 <code>null</code></p><p><code>&quot;NaNTencentnull&quot; + 9</code><br><code>&quot;NaNTencentnull9&quot;</code> , 两边存在字符串，将 <code>9</code> 转为字符串</p><p><code>&quot;NaNTencentnull9&quot; + false</code><br><code>&quot;NaNTencentnull9false&quot;</code> , 同上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js中时长发生着各种类型转换，有显式的有隐式的。&lt;br&gt;本文总结了js中的类型转换的场景和类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>使用es6简化代码</title>
    <link href="https://herotiga.github.io/2021/09/08/es6%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81/"/>
    <id>https://herotiga.github.io/2021/09/08/es6%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81/</id>
    <published>2021-09-08T02:48:29.000Z</published>
    <updated>2021-09-28T09:22:09.889Z</updated>
    
    <content type="html"><![CDATA[<p>es6简化代码。</p><a id="more"></a><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><p>使用 <code>var</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5 5 5 5 5</span></span><br></pre></td></tr></table></figure><p>使用 <code>let</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 1 2 3 4</span></span><br></pre></td></tr></table></figure><p>es5使用闭包可以实现块作用域的效果。</p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="使用解构简化变量声明和赋值"><a href="#使用解构简化变量声明和赋值" class="headerlink" title="使用解构简化变量声明和赋值"></a>使用解构简化变量声明和赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="使用解构交换变量"><a href="#使用解构交换变量" class="headerlink" title="使用解构交换变量"></a>使用解构交换变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> tmp;</span><br><span class="line">tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a]</span><br></pre></td></tr></table></figure><h3 id="使用对象解构给对象赋值"><a href="#使用对象解构给对象赋值" class="headerlink" title="使用对象解构给对象赋值"></a>使用对象解构给对象赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    x,</span><br><span class="line">    y</span><br><span class="line">&#125; = obj;</span><br></pre></td></tr></table></figure><h3 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数解构"><a href="#函数参数解构" class="headerlink" title="函数参数解构"></a>函数参数解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PERSON = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    name,</span></span></span><br><span class="line"><span class="function"><span class="params">    age</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>今年<span class="subst">$&#123;age&#125;</span>岁`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getAge(PERSON);</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数内部 <code>this</code> 指向定义时所在对象且固定不变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> func(param) &#123;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6, 没参数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> ret</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6, 单个参数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">param</span> =&gt;</span> ret</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6, 多个参数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function">(<span class="params">param1, param2</span>) =&gt;</span> ret</span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>用于在字符串中嵌入变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NAME = <span class="string">'Mason'</span>;</span><br><span class="line"><span class="keyword">const</span> AGE = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">const</span> SELF_STATEMENT = <span class="string">`My name is <span class="subst">$&#123;NAME&#125;</span>, 今年<span class="subst">$&#123;AGE&#125;</span>岁`</span>;</span><br></pre></td></tr></table></figure><h2 id="展开符"><a href="#展开符" class="headerlink" title="展开符"></a>展开符</h2><p><code>... 变量名</code> 用于获取函数的多余参数可以代替 <code>arguments</code> 对象。<br><code>... 变量名</code> 可以将一个数组转化为用逗号隔开的参数序列 <code>param1, param2, ...paramN</code></p><p>用展开符合并数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr = [...arr1, ...arr2];</span><br></pre></td></tr></table></figure><p>用展开符取得对象中的属性和方法并拷贝到新对象中，只能对基本数据类型拷贝，如果成员含有引用类型则为浅拷贝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    ...obj1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对象字面量简写"><a href="#对象字面量简写" class="headerlink" title="对象字面量简写"></a>对象字面量简写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Mason'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    printName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组的-includes-判断数组中是否存在给定值"><a href="#数组的-includes-判断数组中是否存在给定值" class="headerlink" title="数组的 includes() 判断数组中是否存在给定值"></a>数组的 <code>includes()</code> 判断数组中是否存在给定值</h2><p>可以判断是否含有 <code>NaN</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="async-await-异步语法"><a href="#async-await-异步语法" class="headerlink" title="async/await 异步语法"></a><code>async/await</code> 异步语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">let</span> html = <span class="keyword">await</span> response.text();</span><br><span class="line">    <span class="keyword">return</span> html.match(<span class="regexp">/&lt;title&gt;([sS]+)&lt;/</span>title &gt; <span class="regexp">/i)[1] </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">getData(url).then(res) =&gt; console.log('success!');</span></span><br></pre></td></tr></table></figure><p>上面代码的执行顺序是：先执行 <code>getData()</code> 里面的三个操作，等待三个操作全部执行完毕再执行 <code>then()</code> 中的语句。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6简化代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
</feed>
