<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2022-10-21T07:32:10.988Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason小王子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue的作用域插槽(slot)</title>
    <link href="https://herotiga.github.io/2022/10/21/Vue%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD(slot)/"/>
    <id>https://herotiga.github.io/2022/10/21/Vue%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD(slot)/</id>
    <published>2022-10-21T07:08:59.000Z</published>
    <updated>2022-10-21T07:32:10.988Z</updated>
    
    <content type="html"><![CDATA[<p>父组件中向子组件的slot插入内容一般只能使用父组件本身的data，如果想要在父组件中使用子组件中的data作为内容插入子组件的slot该怎么办。</p><p>这个时候就要用到作用域插槽了。</p><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>子组件写好slot标签，父组件写好v-slot。</li><li>子组件slot标签绑定属性（属性名无所谓），属性值为子组件的data中的变量。</li><li>父组件以<code>#slotname=&quot;childvalue&quot;</code>的形式接收到子组件中的数据。</li><li>父组件在v-slot标签内使用<code></code>的方式向子组件slot中插入数据。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>child.vue:</p><figure class="highlight html"><figcaption><span>child.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">:d</span>=<span class="string">"name"</span>&gt;</span>备用内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">'Mason'</span>,</span></span><br><span class="line">            age: 22</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>parent.vue:</p><figure class="highlight html"><figcaption><span>parent.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> #<span class="attr">default</span>=<span class="string">"childData"</span>&gt;</span></span><br><span class="line">        &#123;&#123; childData.name &#125;&#125;</span><br><span class="line">        &#123;&#123; chileData.age &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;父组件中向子组件的slot插入内容一般只能使用父组件本身的data，如果想要在父组件中使用子组件中的data作为内容插入子组件的slot该怎么办。&lt;/p&gt;
&lt;p&gt;这个时候就要用到作用域插槽了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>js判断两个对象是否相同</title>
    <link href="https://herotiga.github.io/2022/09/27/js%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/"/>
    <id>https://herotiga.github.io/2022/09/27/js%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/</id>
    <published>2022-09-27T12:48:56.000Z</published>
    <updated>2022-10-22T11:14:57.183Z</updated>
    
    <content type="html"><![CDATA[<p>js判断两个对象是否相同（两个对象拥有相同的key和value就视为相同）。</p><p>此方法可以兼容key顺序不一致的情况。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isSameObj = <span class="function">(<span class="params">obj1, obj2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> obj1Keys = <span class="built_in">Object</span>.keys(obj1);</span><br><span class="line">    <span class="keyword">const</span> obj2Keys = <span class="built_in">Object</span>.keys(obj2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj1Keys.length !== obj2Keys.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; obj1Keys.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> key = obj1Keys[i];</span><br><span class="line">        <span class="keyword">if</span> (!obj2Keys.includes(key)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj1[key] !== obj2[key]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js判断两个对象是否相同（两个对象拥有相同的key和value就视为相同）。&lt;/p&gt;
&lt;p&gt;此方法可以兼容key顺序不一致的情况。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-17.19-消失的两个数字</title>
    <link href="https://herotiga.github.io/2022/09/27/leetcode-17-19-%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
    <id>https://herotiga.github.io/2022/09/27/leetcode-17-19-%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</id>
    <published>2022-09-27T09:02:53.000Z</published>
    <updated>2022-09-27T11:41:52.850Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode.cn/problems/missing-two-lcci/">https://leetcode.cn/problems/missing-two-lcci/</a></p><p>难度：困难</p><a id="more"></a><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>给定一个数组，包含从 1 到 N 所有的整数，但其中缺了两个数字。你能在 O(N) 时间内只用 O(1) 的空间找到它们吗？</p><p>以任意顺序返回这两个数字均可。</p><p>示例 1:</p><pre><code>输入: [1]输出: [2,3]</code></pre><p>示例 2:</p><pre><code>输入: [2,3]输出: [1,4]</code></pre><p>提示：nums.length &lt;= 30000</p><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><p>先给原数组排序，再对排序完的数组进行判断是否存在缺失数字，如果存在就push进res数组直到res数组满了，如果不存在就往两边搜索。</p><h3 id="求差集"><a href="#求差集" class="headerlink" title="求差集"></a>求差集</h3><p>时间复杂度和空间复杂度都比较高。</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="DP-1"><a href="#DP-1" class="headerlink" title="DP"></a>DP</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> missingTwo = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先对于nums做升序排序</span></span><br><span class="line">    <span class="keyword">let</span> sortedNums = nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sortedNumsLen = sortedNums.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值</span></span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扫描sortedNums中是否存在缺的数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sortedNums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> cur = sortedNums[i];</span><br><span class="line">        <span class="keyword">let</span> next = sortedNums[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (cur + <span class="number">1</span> !== next) &#123;</span><br><span class="line">            res.push(cur+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果仍然有缺失的数字则往两边搜索</span></span><br><span class="line">    <span class="comment">// 向左搜索</span></span><br><span class="line">    <span class="keyword">if</span> (res.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> head = sortedNums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; head - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            res.push(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向右搜索</span></span><br><span class="line">    <span class="keyword">if</span> (res.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tail = sortedNums[sortedNumsLen - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里需要保存一下res.length当前的值，因为for循环体内改变了res.length</span></span><br><span class="line">        <span class="keyword">let</span> resLen = res.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; (<span class="number">2</span> - resLen); i++) &#123;</span><br><span class="line">            res.push(tail + i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="求差集-1"><a href="#求差集-1" class="headerlink" title="求差集"></a>求差集</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> missingTwo = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 先对于nums做升序排序</span></span><br><span class="line">    <span class="keyword">let</span> sortedNums = nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sortedNumsLen = sortedNums.length;</span><br><span class="line">    <span class="keyword">let</span> correctNums = <span class="keyword">new</span> <span class="built_in">Array</span>(sortedNumsLen+<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充对照的数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = correctNums.length; i &lt; len; i++) &#123;</span><br><span class="line">        correctNums[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sortedNumsSet = <span class="keyword">new</span> <span class="built_in">Set</span>(sortedNums);</span><br><span class="line">    <span class="keyword">let</span> correctNumsSet = <span class="keyword">new</span> <span class="built_in">Set</span>(correctNums);</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> correctNums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!sortedNumsSet.has(item)) &#123;</span><br><span class="line">            res.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h2><p>向右搜索的for循环应该先保存一下<code>res.length</code>（见代码）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://leetcode.cn/problems/missing-two-lcci/&quot;&gt;https://leetcode.cn/problems/missing-two-lcci/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;难度：困难&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue2和Vue3数据绑定实现原理的变化</title>
    <link href="https://herotiga.github.io/2022/09/14/Vue2%E5%92%8CVue3%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <id>https://herotiga.github.io/2022/09/14/Vue2%E5%92%8CVue3%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E7%9A%84%E5%8F%98%E5%8C%96/</id>
    <published>2022-09-14T02:28:56.000Z</published>
    <updated>2022-09-25T14:15:17.587Z</updated>
    
    <content type="html"><![CDATA[<p>Vue数据绑定的实现原理从Vue2的 <code>Object.defineProperty()</code> 对象属性劫持改为了Vue3的 <code>Proxy</code> 数据代理。</p><a id="more"></a><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h2><p><code>Object.defineProperty()</code> 可以对于对象的已有属性进行监听、劫持、修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue数据绑定的实现原理从Vue2的 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 对象属性劫持改为了Vue3的 &lt;code&gt;Proxy&lt;/code&gt; 数据代理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>在Vue2中给data中的属性添加新属性的方法</title>
    <link href="https://herotiga.github.io/2022/09/14/%E7%BB%99Vue2%E7%9A%84data%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2022/09/14/%E7%BB%99Vue2%E7%9A%84data%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-09-14T01:43:45.000Z</published>
    <updated>2022-09-14T02:51:42.054Z</updated>
    
    <content type="html"><![CDATA[<p>由于Vue2的双向绑定是基于 <code>Object.defineProperty()</code> 的，这个方法只能监听 <code>data</code> 里面已经存在的属性，并不能对于新添加的属性进行监听，故而直接给data添加新属性是无法被vue监听到并绑定到页面上的。</p><p>这里注意：是没办法添加data下的一级属性的，必须事先定义。</p><p>下面是几种给data中的属性添加新属性的方法。</p><a id="more"></a><h2 id="set"><a href="#set" class="headerlink" title="$set()"></a>$set()</h2><p>可以使用 <code>Vue.set(target, key, value)</code> 或者 <code>this.$set(target, key, value)</code> 来给data添加新属性。</p><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><p>可以通过重新赋值的方式添加属性。</p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        msg: &#123;</span><br><span class="line">            name: <span class="string">'mason'</span>,</span><br><span class="line">            age: <span class="number">22</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    updateMsg() &#123;</span><br><span class="line">        <span class="comment">// 右边是一个新的对象，vue检测到msg地址的变化会更新msg</span></span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.msg, &#123;<span class="attr">gender</span>: <span class="string">'male'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="$forceUpdate()"></a>$forceUpdate()</h2><p>不建议使用这个方法！</p><p><code>$forceUpdate()</code> 可以强制更新vue实例。</p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        msg: &#123;</span><br><span class="line">            name: <span class="string">'mason'</span>,</span><br><span class="line">            age: <span class="number">22</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    updateMsg() &#123;</span><br><span class="line">        <span class="keyword">this</span>.msg.gender = <span class="string">'male'</span>;</span><br><span class="line">        <span class="keyword">this</span>.$forceUpdate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Vue2的双向绑定是基于 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 的，这个方法只能监听 &lt;code&gt;data&lt;/code&gt; 里面已经存在的属性，并不能对于新添加的属性进行监听，故而直接给data添加新属性是无法被vue监听到并绑定到页面上的。&lt;/p&gt;
&lt;p&gt;这里注意：是没办法添加data下的一级属性的，必须事先定义。&lt;/p&gt;
&lt;p&gt;下面是几种给data中的属性添加新属性的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>js手写发布订阅（pubsub）</title>
    <link href="https://herotiga.github.io/2022/08/30/js%E6%89%8B%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>https://herotiga.github.io/2022/08/30/js%E6%89%8B%E5%86%99%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</id>
    <published>2022-08-30T08:53:18.000Z</published>
    <updated>2022-09-30T03:09:08.711Z</updated>
    
    <content type="html"><![CDATA[<p>面了一个央企，一上来就让我手写pubsub，没写出来，今天梳理和学习一下怎么写。</p><p>发布订阅模式：包含发布者（publisher），订阅者（subscriber），消息中心（message center）。</p><p>发布者发布消息给消息中心，并且可以携带参数。</p><p>订阅者向消息中心订阅消息，并且可以获取发布者发送的参数。</p><p>消息中心在获取到发布者的消息后通知订阅者并且转发参数。</p><a id="more"></a><h2 id="消息中心"><a href="#消息中心" class="headerlink" title="消息中心"></a>消息中心</h2><p>消息中心具有的功能是：消息中心类被实例化后可以接受publish新消息进去，也可以接受subscribe消息，如果消息中心收到了新的publish的消息是有人订阅的则通知订阅者。</p><p>消息中心本身可以以消息类型和消息内容的方式存储消息。</p><p>消息中心还可以以订阅者和订阅的消息类型的方式存储用户的订阅。</p><figure class="highlight js"><figcaption><span>MessageCenter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageCenter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// 消息集合：存放形式是消息类型（消息名称）和消息内容的键值对</span></span><br><span class="line">        <span class="keyword">this</span>.messages = &#123;&#125;;</span><br><span class="line">        <span class="comment">// 监听集合：存放形式是订阅者和订阅消息类型的键值对</span></span><br><span class="line">        <span class="keyword">this</span>.listeners = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// publish方法：在消息中心中添加发布者的消息，参数是消息类型和消息内容</span></span><br><span class="line">    publish(type, content) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.messages.hasOwnProperty(type)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.messages[type] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.messages[type].push(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// subscribe方法：在消息中心中添加订阅者订阅的内容</span></span><br><span class="line">    subscribe(type, callback) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.listeners.hasOwnProperty(type)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.listeners[type] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.listeners[type].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// notify方法：通知订阅者</span></span><br><span class="line">    notify(type) &#123;</span><br><span class="line">        <span class="keyword">const</span> contents = <span class="keyword">this</span>.messages[type];</span><br><span class="line">        <span class="keyword">const</span> subscribers = <span class="keyword">this</span>.listeners[type] || [];</span><br><span class="line">        subscribers.forEach(<span class="function">(<span class="params">callback, index</span>) =&gt;</span> callback(contents[index]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h2><figure class="highlight js"><figcaption><span>Publisher</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span> </span>&#123;</span><br><span class="line">    <span class="comment">// context是MessageCenter实例</span></span><br><span class="line">    <span class="keyword">constructor</span>(name, context) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publish(type, content) &#123;</span><br><span class="line">        <span class="keyword">this</span>.context.publish(type, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h2><figure class="highlight js"><figcaption><span>Subscriber</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span> </span>&#123;</span><br><span class="line">    <span class="comment">// context是MessageCenter实例</span></span><br><span class="line">    <span class="keyword">constructor</span>(name, context) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    subscribe(type, callback) &#123;</span><br><span class="line">        <span class="keyword">this</span>.context.subscribe(type, callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面了一个央企，一上来就让我手写pubsub，没写出来，今天梳理和学习一下怎么写。&lt;/p&gt;
&lt;p&gt;发布订阅模式：包含发布者（publisher），订阅者（subscriber），消息中心（message center）。&lt;/p&gt;
&lt;p&gt;发布者发布消息给消息中心，并且可以携带参数。&lt;/p&gt;
&lt;p&gt;订阅者向消息中心订阅消息，并且可以获取发布者发送的参数。&lt;/p&gt;
&lt;p&gt;消息中心在获取到发布者的消息后通知订阅者并且转发参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>vue2和vue3的区别</title>
    <link href="https://herotiga.github.io/2022/08/30/vue2%E5%92%8Cvue3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://herotiga.github.io/2022/08/30/vue2%E5%92%8Cvue3%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-08-30T07:24:56.000Z</published>
    <updated>2022-09-09T12:08:03.757Z</updated>
    
    <content type="html"><![CDATA[<p>vue2和vue3的区别。</p><a id="more"></a><h2 id="vue2和vue3的数据绑定原理发生了变化"><a href="#vue2和vue3的数据绑定原理发生了变化" class="headerlink" title="vue2和vue3的数据绑定原理发生了变化"></a>vue2和vue3的数据绑定原理发生了变化</h2><p>vue2利用 <code>Object.defineProperty()</code> 完成的对数据的劫持，结合发布订阅来实现的双向数据绑定，但是只能监听某一个属性，不能对整个对象进行监听。</p><p>vue3使用的是es6的 <code>Proxy</code> 的API来完成的双向数据绑定，可以监听整个对象。</p><h2 id="vue3支持多个根节点"><a href="#vue3支持多个根节点" class="headerlink" title="vue3支持多个根节点"></a>vue3支持多个根节点</h2><p>vue2只支持一个页面根节点，vue3支持多个。</p><h2 id="vue3可以使用composition-API"><a href="#vue3可以使用composition-API" class="headerlink" title="vue3可以使用composition API"></a>vue3可以使用composition API</h2><p>composition API可以让我们通过代码功能的不同来分组API，可以使得代码更加直观。</p><p>vue2数据定义在 <code>data</code> 里面，方法定义在 <code>methods</code> 里面。</p><p>vue3可以首先引入 <code>reactive</code> ， <code>setup</code> 中使用reactive将变量包装为响应式变量，在setup的最后 <code>return</code> 这些响应式变量，最后 <code>template</code> 中就可以使用这些变量。</p><h2 id="生命周期的变化"><a href="#生命周期的变化" class="headerlink" title="生命周期的变化"></a>生命周期的变化</h2><pre><code>Vue2--------------vue3beforeCreate  -&gt; setup()created       -&gt; setup()beforeMount   -&gt; onBeforeMountmounted       -&gt; onMountedbeforeUpdate  -&gt; onBeforeUpdateupdated       -&gt; onUpdatedbeforeDestroy -&gt; onBeforeUnmountdestroyed     -&gt; onUnmountedactivated     -&gt; onActivateddeactivated   -&gt; onDeactivatederrorCaptured -&gt; onErrorCaptured</code></pre><h2 id="vue3可以按需引用"><a href="#vue3可以按需引用" class="headerlink" title="vue3可以按需引用"></a>vue3可以按需引用</h2><p>vue3按需引用api。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue2和vue3的区别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>js箭头函数(lambda表达式)和普通函数的区别</title>
    <link href="https://herotiga.github.io/2022/08/30/js%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%92%8C%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://herotiga.github.io/2022/08/30/js%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%92%8C%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-08-30T07:10:35.000Z</published>
    <updated>2022-10-12T09:10:39.519Z</updated>
    
    <content type="html"><![CDATA[<p>区别从书写形式 -&gt; 函数是否具名 -&gt; 是否有arguments对象 -&gt; 是否可以作为构造函数 -&gt; this指向</p><a id="more"></a><h2 id="书写形式不同"><a href="#书写形式不同" class="headerlink" title="书写形式不同"></a>书写形式不同</h2><p>略。</p><h2 id="函数匿名性"><a href="#函数匿名性" class="headerlink" title="函数匿名性"></a>函数匿名性</h2><p>普通函数可以匿名或者具名，箭头函数只能匿名。</p><h2 id="可否引用arguments"><a href="#可否引用arguments" class="headerlink" title="可否引用arguments"></a>可否引用arguments</h2><p>匿名函数不绑定arguments对象（可以使用剩余参数替代），普通函数绑定arguments。</p><h2 id="可否作为构造函数"><a href="#可否作为构造函数" class="headerlink" title="可否作为构造函数"></a>可否作为构造函数</h2><p>箭头函数不能作为构造函数。</p><p>为什么箭头函数不能作为构造函数？</p><p>因为普通函数有constructor，来自原型链（prototype）上。</p><p>箭头函数没有prototype，故而没有constructor，故而不能作为构造函数。</p><h2 id="this指向不同"><a href="#this指向不同" class="headerlink" title="this指向不同"></a>this指向不同</h2><p>箭头函数this指向这个箭头函数被定义时所处的对象，如果没有对象则指向window，无法改变this指向。</p><p>普通函数this指向调用这个函数的对象（在构造函数中，this指向实例对象），如果没有调用对象则指向window，可以通过call，apply，bind改变this指向。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;区别从书写形式 -&amp;gt; 函数是否具名 -&amp;gt; 是否有arguments对象 -&amp;gt; 是否可以作为构造函数 -&amp;gt; this指向&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式（ongoing）</title>
    <link href="https://herotiga.github.io/2022/07/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://herotiga.github.io/2022/07/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-07-11T01:07:59.000Z</published>
    <updated>2022-07-11T23:58:05.677Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式是在软件开发过程中对于问题的解决方案，也是软件开发的最佳实践。</p><p>比如如果某个接口的结构已经无法满足现在的需求，但是由于众多功能对于这个接口的依赖导致我们又不能改动这个接口，这个时候就可以使用适配器模式来解决这个问题。</p><a id="more"></a><blockquote><p>适配器模式详细内容：<a href="https://www.runoob.com/design-pattern/adapter-pattern.html">https://www.runoob.com/design-pattern/adapter-pattern.html</a></p></blockquote><h2 id="常见的设计模式"><a href="#常见的设计模式" class="headerlink" title="常见的设计模式"></a>常见的设计模式</h2><ul><li>单例模式：保证一个类只有一个实例，只提供一个全局访问点。先判断实例是否已经存在，如果存在就直接返回该实例，不存在就先创建实例。</li><li>工厂模式：工厂负责实现实例的内部逻辑。抽象产品是所有产品对象的父类，负责描述产品实例的所有公共接口。产品实例是抽象产品的实例。</li><li>策略模式：定义一系列单独封装的算法，且他们可以相互替换。其中分为策略类（可变，封装具体的算法，负责具体计算）和环境类（不变，接受客户请求，将请求分配给一个策略类）。</li><li>代理模式：给对象提供一个代理品或者占位符方便对它的访问。</li><li>中介者模式：通过中间对象实现各个相关部分的通信。</li><li>装饰者模式：不改变对象自身的基础上，运行期间动态的给对象添加方法。</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式会在全局作用域下只创建一个实例对象，所有代码都只调用这一个实例。</p><p>js实现单例模式：</p><figure class="highlight js"><figcaption><span>单例模式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateSingleton</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加getName方法</span></span><br><span class="line">CreateSingleton.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建单例对象主函数</span></span><br><span class="line"><span class="keyword">const</span> Singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ins;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 还未创建，创建一个实例</span></span><br><span class="line">        <span class="keyword">if</span> (!ins) &#123;</span><br><span class="line">            ins = <span class="keyword">new</span> CreateSingleton(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已创建，直接返回实例</span></span><br><span class="line">        <span class="keyword">return</span> ins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// new一个测试实例</span></span><br><span class="line"><span class="keyword">let</span> insA = <span class="keyword">new</span> Singleton(<span class="string">'mason'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(insA); </span><br><span class="line"><span class="comment">// CreateSingleton &#123; name: 'mason' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再new一个实例，看看是否使用的是上面new的实例</span></span><br><span class="line"><span class="keyword">let</span> insB = <span class="keyword">new</span> Singleton(<span class="string">'alex'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(insB); </span><br><span class="line"><span class="comment">// CreateSingleton &#123; name: 'mason' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(insA === insB); </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>前端使用到单例模式的场景：</p><ul><li>页面上同时一般只能最多有一个modal。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></li><li><a href="https://vue3js.cn/interview/design/design.html">https://vue3js.cn/interview/design/design.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式是在软件开发过程中对于问题的解决方案，也是软件开发的最佳实践。&lt;/p&gt;
&lt;p&gt;比如如果某个接口的结构已经无法满足现在的需求，但是由于众多功能对于这个接口的依赖导致我们又不能改动这个接口，这个时候就可以使用适配器模式来解决这个问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cs" scheme="https://herotiga.github.io/categories/cs/"/>
    
    
  </entry>
  
  <entry>
    <title>上手微信小程序开发</title>
    <link href="https://herotiga.github.io/2022/07/07/%E4%B8%8A%E6%89%8B%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>https://herotiga.github.io/2022/07/07/%E4%B8%8A%E6%89%8B%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</id>
    <published>2022-07-07T05:21:37.000Z</published>
    <updated>2022-07-10T23:59:46.580Z</updated>
    
    <content type="html"><![CDATA[<p>小程序的css和js和其他前端项目一样，只是HTML换成了WXML标签，故而小程序的本质就是网页。</p><p>小程序和网页的区别是：小程序使用的是小程序内提供的API故而小程序不支持浏览器。</p><a id="more"></a><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>基于微信，故而可以调用微信的API比如拍照、支付、登录注册等，无需考虑平台差异因为微信小程序基于微信平台。</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ol><li>js</li><li>css</li></ol><h3 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h3><ol><li>到微信公众平台注册申请一个appid，得到一个appid和appsecret。</li><li>下载微信提供的小程序开发工具，用于运行和调试。</li></ol><h3 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h3><p>这里不使用微信新建小程序的功能，手动从头到尾写一下小程序的结构。</p><ol><li>新建项目目录比如hello</li><li>新建app.js文件</li></ol><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个小程序实例，可以传入一个配置对象</span></span><br><span class="line">App();</span><br></pre></td></tr></table></figure><ol start="3"><li>新建配置文件app.json，记录了一些配置。</li></ol><figure class="highlight json"><figcaption><span>app.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// pages属性表明小程序包含哪些页面，值是一个数组，数组的每一项就是一个页面</span></span><br><span class="line">   <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/home/home"</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>&quot;pages/home/home&quot;</code> 中的pages存放所有的页面，每一个页面都有自己的目录，这里的页面的目录名是第一个home，小程序会加载页面目录下的home.js文件（扩展名可以省略），故而这个目录表示小程序加载pages目录下的home页面下的home.js文件，home.js文件名可以随便起名。</p><ol start="4"><li>新建home页面目录和下面的home.js文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p pages/home</span><br><span class="line">touch pages/home/home.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Page()方法由小程序提供用于初始化一个页面实例，参数是一个配置对象</span></span><br><span class="line">Page(&#123;&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>pages/home</code>下新建一个home.wxml文件，wxml是类似于html的微信页面标记语言。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><ol start="6"><li>打开微信小程序开发工具，导入hello项目。</li></ol><h2 id="WXML语言"><a href="#WXML语言" class="headerlink" title="WXML语言"></a>WXML语言</h2><p>wxml文件类似于html文件，也是在里面写各种标记语言。</p><p>不过使用的是微信小程序提供的wxml的标签。</p><p>常用标签：</p><ul><li>view：表示一个区块，用于区别其他区块，类似于div</li><li>text：表示一段inline文本，类似span</li></ul><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><pre><code>|- app.json|- app.js|- pages|- home    |- home.wxml    |- home.js</code></pre><p>所有的小程序都是类似上面的结构。</p><h2 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a>项目配置文件</h2><p>app.json是小程序项目的全局配置文件。</p><p>app.json中海油window属性，用于设置小程序的窗口。</p><figure class="highlight json"><figcaption><span>app.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/home/home"</span></span><br><span class="line">  ], </span><br><span class="line">  <span class="attr">"window"</span>: &#123;</span><br><span class="line">    <span class="comment">// window是一个对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导航栏颜色</span></span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#ff0000"</span>,</span><br><span class="line">    <span class="comment">// 导航栏文本颜色，black或者white（默认）</span></span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"white"</span>,</span><br><span class="line">    <span class="comment">// 导航栏标题</span></span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"小程序 Demo"</span>     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，app.json还可以配置各种组件，比如选项卡。</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h3><p>小程序允许在项目根目录防止一个app.wxss文件，他是一个全局样式文件，里面写css。</p><figure class="highlight css"><figcaption><span>app.wxss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页面选择器 */</span></span><br><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line">    <span class="comment">/* style */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* text选择器 */</span></span><br><span class="line"><span class="selector-tag">text</span> &#123;</span><br><span class="line">    <span class="comment">/* style */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>官方推荐使用flex布局。</p><p>如果要书写局部样式，比如要对pages/home这个页面写一个专门的样式文件，则需要在该目录下新建home.wxss文件，该文件的样式只对于home页面生效。</p><p>home页面的flex布局：</p><figure class="highlight css"><figcaption><span>home.wxss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line">  <span class="comment">/* 将页面高度设置为屏幕的高度 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 将页面的宽度设置为屏幕的宽度，小程序的总宽度为750rpx */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 页面一级子元素采用水平居中 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="comment">/* 页面一级子元素垂直居中 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="weui"><a href="#weui" class="headerlink" title="weui"></a>weui</h3><p>腾讯提供了一套ui框架叫weui。</p><p>weui demo：weui.io</p><p>weui的小程序版本是weui-wxss。</p><p>使用weui-wxss：</p><ol><li>将weui.wxss文件复制到app.wxss头部。</li><li>给wxml文件加上weui-wxss的class，类似bootstrap。</li></ol><figure class="highlight html"><figcaption><span>home.wxml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"weui-btn weui-btn_primary"</span>&gt;</span></span><br><span class="line">    主操作</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"weui-btn weui-btn_primary weui-btn_loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"weui-loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>正在加载</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"weui-btn weui-btn_primary weui-btn_disabled"</span>&gt;</span></span><br><span class="line">    禁止点击</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用到什么class就查文档。</p><h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><figure class="highlight html"><figcaption><span>home.wxml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- swiper是轮播图组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper</span></span></span><br><span class="line"><span class="tag">    <span class="attr">indicator-dots</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">autoplay</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"width: 750rpx;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片一 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/200"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片二 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/250"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片三 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/300"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加入脚本"><a href="#加入脚本" class="headerlink" title="加入脚本"></a>加入脚本</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>就是脚本里面的某些数据，可以自动成为页面的全局变量，两者绑定，也就是MVVM。</p><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'张三'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>home页面可以自动读取上面的data。</p><p>绑定到页面中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>数据绑定只对于当前页面有效，如果需要页面之间共享数据则需要写入全局配置中。</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line"><span class="comment">//   全局data</span></span><br><span class="line">  globalData: &#123;</span><br><span class="line">    now: (<span class="keyword">new</span> <span class="built_in">Date</span>()).toLocaleString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在全局变量配置好了，在页面中获取变量：</p><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getApp方法用于获取app实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp();</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    now: app.globalData.now</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>小程序常用事件：</p><ul><li>tap：触摸后离开</li><li>longpress：长按，超过350ms触发</li><li>touchstart：触摸开始</li><li>touchmove：触摸后移动</li><li>touchcancel：触摸后被打断</li><li>touchend：触摸结束</li></ul><p>事件的传播分两个阶段：捕获（从外层元素到内层元素捕获），然后是冒泡（从内层元素到外层元素传播），故而一个事件在同一个元素会触发两次。</p><p>小程序允许指定元素的触发阶段，方法是为事件属性名加上下面的前缀：</p><ul><li>capture-bind：捕获阶段触发。</li><li>capture-catch：捕获阶段触发，并中断事件，不再向下传播，即中断捕获阶段，并取消随后的冒泡阶段。</li><li>bind：冒泡阶段触发。</li><li>catch：冒泡阶段触发，并取消事件进一步向上冒泡。</li></ul><figure class="highlight html"><figcaption><span>home.wxml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里为button添加了一个bind属性，在tap事件后的冒泡阶段触发buttonHandler --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">"buttonHandler"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'张三'</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//   event是事件对象</span></span><br><span class="line">  buttonHandler(event) &#123;</span><br><span class="line">    <span class="comment">// this指向页面实例</span></span><br><span class="line">    <span class="comment">// 不能直接修改data，需要通过setData修改data，然后触发绑定机制导致页面上的全局变量发生变化</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      name: <span class="string">'李四'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="动态提示Toast"><a href="#动态提示Toast" class="headerlink" title="动态提示Toast"></a>动态提示Toast</h3><p>小程序使用Toast给用户提示。</p><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'张三'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  buttonHandler(event) &#123;</span><br><span class="line">    <span class="comment">// setData的第二个参数是回调函数</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      name: <span class="string">'李四'</span></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 调用Toast，传入一个配置对象</span></span><br><span class="line">      <span class="comment">// wx对象是微信小程序提供的原生对象，所有的API都定义在这个对象上面</span></span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'操作完成'</span>,</span><br><span class="line">        duration: <span class="number">700</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="对话框Modal"><a href="#对话框Modal" class="headerlink" title="对话框Modal"></a>对话框Modal</h3><p>使用<code>wx.showModal()</code>可以新建一个对话框。</p><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'张三'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  buttonHandler(event) &#123;</span><br><span class="line">    <span class="comment">// 获取页面实例that</span></span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 对于showModal方法传入一个配置对象</span></span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">      title: <span class="string">'操作确认'</span>,</span><br><span class="line">      content: <span class="string">'你确认要修改吗？'</span>,</span><br><span class="line">    <span class="comment">//   成功后的回调方法</span></span><br><span class="line">      success (res) &#123;   </span><br><span class="line">        <span class="comment">// 使用res.confirm判断用户点击的是确定还是取消</span></span><br><span class="line">        <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">          that.setData(&#123;</span><br><span class="line">            name: <span class="string">'李四'</span></span><br><span class="line">          &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             wx.showToast(&#123;</span><br><span class="line">               title: <span class="string">'操作完成'</span>,</span><br><span class="line">               duration: <span class="number">700</span></span><br><span class="line">             &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'用户点击取消'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="comment">//   失败后的回调</span></span><br><span class="line">      fail(res) &#123;</span><br><span class="line">        <span class="comment">// 失败处理</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="WXML渲染语法"><a href="#WXML渲染语法" class="headerlink" title="WXML渲染语法"></a>WXML渲染语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">'事项 A'</span>, <span class="string">'事项 B'</span>, <span class="string">'事项 C'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>wxml中遍历items：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;items&#125;&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123;index&#125;&#125;、 &#123;&#123;item&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="客户端数据存储"><a href="#客户端数据存储" class="headerlink" title="客户端数据存储"></a>客户端数据存储</h3><p>小程序允许将一部分数据保存在客户端（微信）中，方便读取。</p><p>本地存储（同步）：<code>wx.setStorageSync(key, value)</code><br>本地读取（同步）：<code>wx.getStorageSync(key)</code></p><p>客户端存储主要用于缓存不重要的数据。</p><h3 id="远程数据请求"><a href="#远程数据请求" class="headerlink" title="远程数据请求"></a>远程数据请求</h3><p>发布出去的小程序所请求的服务器域名都是要事先登记的，但是开发阶段没有限制（需要在本地设置里面勾选）。</p><p>请求：<code>wx.request({})</code>，参数是一个配置对象。</p><h3 id="open-data组件"><a href="#open-data组件" class="headerlink" title="open-data组件"></a>open-data组件</h3><p><code>&lt;open-data&gt;&lt;/open-data&gt;</code>组件可以在页面上显式用户的身份信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- type属性指定要显示的用户信息类型 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">"userAvatarUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">"userNickName"</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他信息类型：</p><ul><li>userNickName：用户昵称</li><li>userAvatarUrl：用户头像</li><li>userGender：用户性别</li><li>userCity：用户所在城市</li><li>userProvince：用户所在省份</li><li>userCountry：用户所在国家</li><li>userLanguage：用户的语言</li></ul><h3 id="获取用户个人信息"><a href="#获取用户个人信息" class="headerlink" title="获取用户个人信息"></a>获取用户个人信息</h3><p>获取用户个人信息需要得到授权，可以通过按钮获取用户授权。</p><p>wxml代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bind:getuserinfo</span>=<span class="string">"buttonHandler"</span>&gt;</span></span><br><span class="line">    授权获取用户个人信息</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js代码：获取用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123; <span class="attr">name</span>: <span class="string">''</span> &#125;,</span><br><span class="line">  buttonHandler(event) &#123;</span><br><span class="line">    <span class="comment">// 实际开发中使用wx.getSetting()判断一下是否已经得到用户授权</span></span><br><span class="line">    <span class="keyword">if</span> (!event.detail.userInfo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      name: event.detail.userInfo.nickName</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3><p>页面跳转的wxml方法：</p><p>小程序每个页面的路径都要放在配置文件app.json中的pages属性中。</p><p>pages数组第一个页面是小程序打开时默认展示的页面。</p><p>小程序页面之间通过<code>navigator</code>标签，url属性实现跳转。</p><p>页面跳转的js方法：</p><p>使用<code>wx.navigateTo()</code>方法，传入一个配置对象。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>微信小程序开发文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">https://developers.weixin.qq.com/miniprogram/dev/framework/</a></li><li>微信小程序开发指南：<a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0008aeea9a8978ab0086a685851c0a">https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0008aeea9a8978ab0086a685851c0a</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html">https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-two.html">https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-two.html</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-three.html">https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-three.html</a></li><li><a href="https://www.ruanyifeng.com/blog/2020/11/wechat-miniprogram-tutorial-part-four.html">https://www.ruanyifeng.com/blog/2020/11/wechat-miniprogram-tutorial-part-four.html</a></li><li>小程序面试题：<a href="https://vue3js.cn/interview/applet/applet.html">https://vue3js.cn/interview/applet/applet.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序的css和js和其他前端项目一样，只是HTML换成了WXML标签，故而小程序的本质就是网页。&lt;/p&gt;
&lt;p&gt;小程序和网页的区别是：小程序使用的是小程序内提供的API故而小程序不支持浏览器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="https://herotiga.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-2119-反转两次的数字</title>
    <link href="https://herotiga.github.io/2022/06/28/leetcode-2119-%E5%8F%8D%E8%BD%AC%E4%B8%A4%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://herotiga.github.io/2022/06/28/leetcode-2119-%E5%8F%8D%E8%BD%AC%E4%B8%A4%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2022-06-28T12:12:02.000Z</published>
    <updated>2022-06-28T12:15:49.135Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>反转 一个整数意味着倒置它的所有位。</p><p>例如，反转 2021 得到 1202 。反转 12300 得到 321 ，不保留前导零 。<br>给你一个整数 num ，反转 num 得到 reversed1 ，接着反转 reversed1 得到 reversed2 。如果 reversed2 等于 num ，返回 true ；否则，返回 false 。</p><p>示例 1：</p><pre><code>输入：num = 526输出：true解释：反转 num 得到 625 ，接着反转 625 得到 526 ，等于 num 。</code></pre><p>示例 2：</p><pre><code>输入：num = 1800输出：false解释：反转 num 得到 81 ，接着反转 81 得到 18 ，不等于 num 。</code></pre><p>示例 3：</p><pre><code>输入：num = 0输出：true解释：反转 num 得到 0 ，接着反转 0 得到 0 ，等于 num 。</code></pre><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>数字先转为字符串，再逆转字符串，丢掉前面的0，再逆转字符串，再丢掉前面的0。</p><h3 id="求余"><a href="#求余" class="headerlink" title="求余"></a>求余</h3><p>原始的数字，如果第一位为0，则两次反转后不会丢失。<br>如果最后一位为0，那么在第一次反转后就会丢失。</p><p>故而：如果最后一位为0就return false，如果不为0就return true。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="模拟-1"><a href="#模拟-1" class="headerlink" title="模拟"></a>模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSameAfterReversals = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> numStr = num + <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> numStrReversedArray = numStr.split(<span class="string">''</span>).reverse();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = numStrReversedArray.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numStrReversedArray[i] === <span class="string">'0'</span>) &#123;</span><br><span class="line">            numStrReversedArray.shift();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> numStrReversedArrayResult = numStrReversedArray.reverse();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = numStrReversedArrayResult.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numStrReversedArrayResult[i] === <span class="string">'0'</span>) &#123;</span><br><span class="line">            numStrReversedArrayResult.shift();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = numStrReversedArrayResult.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> numStr === result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/leetcode-5963-%E6%9A%B4%E5%8A%9B.png" alt="执行结果"></p><h3 id="求余-1"><a href="#求余-1" class="headerlink" title="求余"></a>求余</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSameAfterReversals = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">10</span> !== <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/leetcode-5963-%E5%88%86%E6%9E%90.png" alt="执行结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>React组件的生命周期</title>
    <link href="https://herotiga.github.io/2022/06/17/React%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://herotiga.github.io/2022/06/17/React%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-06-17T06:45:31.000Z</published>
    <updated>2022-06-18T06:02:09.976Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于React17版本开始的新的生命周期。</p><p>React组件的生命周期分为三个阶段：Mounting -&gt; Updating -&gt; Unmounting</p><a id="more"></a><p><img src="https://www.runoob.com/wp-content/uploads/2016/02/ogimage.png" alt="组件生命周期"></p><h2 id="Mounting"><a href="#Mounting" class="headerlink" title="Mounting"></a>Mounting</h2><ol><li>调用组件的构造函数<code>constructor()</code>。</li><li>调用<code>getDerivedStateFromProps()</code>，在Mounting和Updating阶段都会被调用。</li><li>调用<code>render()</code>函数，组件初始化一定会调用的只有render函数。</li><li>组件挂载完毕。</li><li>触发<code>componentDidMount()</code>钩子函数。</li></ol><h2 id="Updating"><a href="#Updating" class="headerlink" title="Updating"></a>Updating</h2><p>组件的 <code>props</code> 或者 <code>state</code> 发生变化，组件就会更新。</p><ol><li>调用<code>getDerivedStateFromProps()</code>，根据<code>shouldComponentUpdate()</code>的返回值，判断组件的输出是否受当前state或props更改的影响。</li><li>调用<code>shouldComponentUpdate()</code>。</li><li>调用<code>render()</code>函数，唯一必须会被调用的函数。</li><li>调用<code>getSnapshotBeforeUpdate()</code>，在最近一次渲染输出之前调用。</li><li>组件更新完毕。</li><li>调用<code>componentDidUpdate()</code>，在组件更新后会被立即调用。</li></ol><h2 id="Unmounting"><a href="#Unmounting" class="headerlink" title="Unmounting"></a>Unmounting</h2><ol><li>调用<code>componentWillUnmount()</code>钩子函数，在组件卸载及销毁之前直接调用。</li><li>组件被卸载或者销毁。</li></ol><p>可以看出react组件生命周期与vue的组件生命周期有区别但是不大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文基于React17版本开始的新的生命周期。&lt;/p&gt;
&lt;p&gt;React组件的生命周期分为三个阶段：Mounting -&amp;gt; Updating -&amp;gt; Unmounting&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://herotiga.github.io/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>React井字棋实例</title>
    <link href="https://herotiga.github.io/2022/06/17/react%E4%BA%95%E5%AD%97%E6%A3%8B%E5%AE%9E%E4%BE%8B/"/>
    <id>https://herotiga.github.io/2022/06/17/react%E4%BA%95%E5%AD%97%E6%A3%8B%E5%AE%9E%E4%BE%8B/</id>
    <published>2022-06-17T00:29:33.000Z</published>
    <updated>2022-06-17T01:08:54.735Z</updated>
    
    <content type="html"><![CDATA[<p>React官网的入门实例井字棋。</p><p>感觉React比Vue容易学一些，比Vue更加直观简单。</p><a id="more"></a><figure class="highlight jsx"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button className=<span class="string">"square"</span> onClick=&#123;props.onClick&#125;&gt;</span><br><span class="line">      &#123;props.value&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Board extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  renderSquare(i) &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Square</span></span><br><span class="line"><span class="regexp">        value=&#123;this.props.squares[i]&#125;</span></span><br><span class="line"><span class="regexp">        onClick=&#123;() =&gt; this.props.onClick(i)&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">0</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">1</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">2</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">6</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">7</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">8</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      history: [</span><br><span class="line">        &#123;</span><br><span class="line">          squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      stepNumber: <span class="number">0</span>,</span><br><span class="line">      xIsNext: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick(i) &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history.slice(<span class="number">0</span>, <span class="keyword">this</span>.state.stepNumber + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> current = history[history.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> squares = current.squares.slice();</span><br><span class="line">    <span class="keyword">if</span> (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    squares[i] = <span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      history: history.concat([</span><br><span class="line">        &#123;</span><br><span class="line">          squares: squares</span><br><span class="line">        &#125;</span><br><span class="line">      ]),</span><br><span class="line">      stepNumber: history.length,</span><br><span class="line">      xIsNext: !<span class="keyword">this</span>.state.xIsNext</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  jumpTo(step) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      stepNumber: step,</span><br><span class="line">      xIsNext: (step % <span class="number">2</span>) === <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history;</span><br><span class="line">    <span class="keyword">const</span> current = history[<span class="keyword">this</span>.state.stepNumber];</span><br><span class="line">    <span class="keyword">const</span> winner = calculateWinner(current.squares);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> moves = history.map(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> desc = move ?</span><br><span class="line">        <span class="string">'Go to move #'</span> + move :</span><br><span class="line">        <span class="string">'Go to game start'</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;li key=&#123;move&#125;&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.jumpTo(move)&#125;&gt;&#123;desc&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> status;</span><br><span class="line">    <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">      status = <span class="string">"Winner: "</span> + winner;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      status = <span class="string">"Next player: "</span> + (<span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"game"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"game-board"</span>&gt;</span><br><span class="line">          &lt;Board</span><br><span class="line">            squares=&#123;current.squares&#125;</span><br><span class="line">            onClick=&#123;i =&gt; <span class="keyword">this</span>.handleClick(i)&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;&#123;status&#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;ol&gt;&#123;moves&#125;&lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const root = ReactDOM.createRoot(document.getElementById("root"));</span></span><br><span class="line"><span class="regexp">root.render(&lt;Game /</span>&gt;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateWinner</span>(<span class="params">squares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React官网的入门实例井字棋。&lt;/p&gt;
&lt;p&gt;感觉React比Vue容易学一些，比Vue更加直观简单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://herotiga.github.io/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue teleport to</title>
    <link href="https://herotiga.github.io/2022/06/05/Vue-teleport-to/"/>
    <id>https://herotiga.github.io/2022/06/05/Vue-teleport-to/</id>
    <published>2022-06-05T00:01:32.000Z</published>
    <updated>2022-06-05T00:49:33.003Z</updated>
    
    <content type="html"><![CDATA[<p>官网文档写的过于啰嗦。</p><p>一句话总结就是： <code>teleport</code> 组件用于包裹html代码或者组件，配合 <code>to</code> 可以指定包裹的内容被渲染到哪个标签之下（使用类似jQuery的选择器指定标签，使用id，class等选择器，不要使用标签选择器）。</p><a id="more"></a><h2 id="teleport-to"><a href="#teleport-to" class="headerlink" title="teleport, to"></a>teleport, to</h2><p>如果在父组件parent中使用了teleport包裹子组件child，那么在代码逻辑上child依然是parent的子组件，但是可以指定teleport的to属性为parent之外的位置，这样就改变了child渲染的位置。</p><p>在同一个目标上使用teleport，多个teleport可以将内容追加挂载到同一个标签之下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">"#modals"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">"#modals"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- result--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"modals"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>禁用teleport，给teleport添加 <code>disabled</code> 属性，值为Boolean。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li>docs: <a href="https://v3.cn.vuejs.org/guide/teleport.html">https://v3.cn.vuejs.org/guide/teleport.html</a></li><li>API: <a href="https://v3.cn.vuejs.org/api/built-in-components.html#teleport">https://v3.cn.vuejs.org/api/built-in-components.html#teleport</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网文档写的过于啰嗦。&lt;/p&gt;
&lt;p&gt;一句话总结就是： &lt;code&gt;teleport&lt;/code&gt; 组件用于包裹html代码或者组件，配合 &lt;code&gt;to&lt;/code&gt; 可以指定包裹的内容被渲染到哪个标签之下（使用类似jQuery的选择器指定标签，使用id，class等选择器，不要使用标签选择器）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue获取页面元素</title>
    <link href="https://herotiga.github.io/2022/06/04/Vue%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0/"/>
    <id>https://herotiga.github.io/2022/06/04/Vue%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0/</id>
    <published>2022-06-03T23:09:17.000Z</published>
    <updated>2022-06-03T23:18:24.563Z</updated>
    
    <content type="html"><![CDATA[<p>Vue如何像jQuery一样获取页面DOM呢？</p><p>尽量不要直接操作DOM。</p><a id="more"></a><p>Vue可以在元素或者组件上使用 <code>ref=&quot;refname&quot;</code> 来给元素或者组件一个锚点。</p><p>然后可以使用 <code>this.$refs.refname</code> 来获取元素。</p><h2 id="在组件内部使用ref"><a href="#在组件内部使用ref" class="headerlink" title="在组件内部使用ref"></a>在组件内部使用ref</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'base-input'</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input ref="input" /&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        focusInput() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.input.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">this</span>.focusInput()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="在父组件中使用ref"><a href="#在父组件中使用ref" class="headerlink" title="在父组件中使用ref"></a>在父组件中使用ref</h2><p>比如在父组件中使用上面定义的子组件 <code>base-input</code> ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中，在子组件上写ref --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">"usernameInput"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件中获取子组件</span></span><br><span class="line"><span class="keyword">this</span>.$refs.usernameInput.focusInput()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue如何像jQuery一样获取页面DOM呢？&lt;/p&gt;
&lt;p&gt;尽量不要直接操作DOM。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue异步组件以及配合suspense使用</title>
    <link href="https://herotiga.github.io/2022/06/04/Vue%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://herotiga.github.io/2022/06/04/Vue%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-03T22:45:47.000Z</published>
    <updated>2022-06-03T23:06:15.062Z</updated>
    
    <content type="html"><![CDATA[<p>异步组件的使用场景是，当一个项目被分成很多歌组件的时候，当在一个组件中需要到另一个组件的时候，可以使用异步组件的方式异步请求一个服务器上的组件。</p><a id="more"></a><p>异步组件的核心是使用 <code>Vue.defineAsyncComponent</code> 方法，参数是一个Promise工厂函数。</p><p>具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Vue.defineAsyncComponent方法</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    createApp,</span><br><span class="line">    defineAsyncComponent</span><br><span class="line">&#125; = Vue</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'async-example'</span>, defineAsyncComponent(</span><br><span class="line">    () =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">            template: <span class="string">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>或者如果使用webpack的话可以这样动态导入组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    defineAsyncComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'async-component'</span>, defineAsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./components/AsyncComponent.vue'</span>)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>在局部注册的组件中使用动态组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createApp,</span><br><span class="line">    defineAsyncComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">createApp(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        AsyncComponent: defineAsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">            <span class="keyword">import</span>(<span class="string">'./components/AsyncComponent.vue'</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>suspense的作用：在异步组件渲染完毕之前展示一些内容用于提升用户体验。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里async-component是一个已经定义好的异步组件，代码省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suspense</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 异步组件加载成功时展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-component</span>&gt;</span><span class="tag">&lt;/<span class="name">async-component</span>&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 异步组件加载失败时展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>异步组件加载失败！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suspense</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异步组件的使用场景是，当一个项目被分成很多歌组件的时候，当在一个组件中需要到另一个组件的时候，可以使用异步组件的方式异步请求一个服务器上的组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue动态组件及其缓存</title>
    <link href="https://herotiga.github.io/2022/06/04/Vue%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%85%B6%E7%BC%93%E5%AD%98/"/>
    <id>https://herotiga.github.io/2022/06/04/Vue%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%85%B6%E7%BC%93%E5%AD%98/</id>
    <published>2022-06-03T22:28:43.000Z</published>
    <updated>2022-06-03T22:37:44.359Z</updated>
    
    <content type="html"><![CDATA[<p>Vue可以使用 <code>:is</code> 来绑定动态组件。</p><a id="more"></a><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下面的组件绑定了一个activeComponent变量，activeComponent是一个组件名，改变activeComponent的值可以达到切换组件的作用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"activeComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面component组件的每一次切换会导致其被一次次创建和销毁，在一些不需要重新渲染的场景比如tab的切换就无端增加了开销。</p><p>下面是缓存动态组件的方法。</p><h2 id="缓存动态组件"><a href="#缓存动态组件" class="headerlink" title="缓存动态组件"></a>缓存动态组件</h2><p>只需要用 <code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code> 将动态组件包裹起来即可缓存失活的组件，这样失活的组件就不会被销毁和再创建，减少了开销。</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"activeComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue可以使用 &lt;code&gt;:is&lt;/code&gt; 来绑定动态组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue中使用Lodash实现防抖和节流</title>
    <link href="https://herotiga.github.io/2022/06/03/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8Lodash%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://herotiga.github.io/2022/06/03/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8Lodash%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2022-06-03T06:50:45.000Z</published>
    <updated>2022-06-03T06:54:55.288Z</updated>
    
    <content type="html"><![CDATA[<p>Lodash实现防抖和节流。</p><a id="more"></a><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>为了实现lodash组件独立，需要在 <code>created</code> 中添加函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">app.component(<span class="string">'save-button'</span>, &#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="comment">// 使用 Lodash 实现防抖</span></span><br><span class="line">        <span class="keyword">this</span>.debouncedClick = _.debounce(<span class="keyword">this</span>.click, <span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    unmounted() &#123;</span><br><span class="line">        <span class="comment">// 移除组件时，取消定时器</span></span><br><span class="line">        <span class="keyword">this</span>.debouncedClick.cancel()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        click() &#123;</span><br><span class="line">            <span class="comment">// ... 响应点击 ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button @click="debouncedClick"&gt;</span></span><br><span class="line"><span class="string">      Save</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lodash实现防抖和节流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue模板表达式中所能访问的全局变量</title>
    <link href="https://herotiga.github.io/2022/06/03/Vue%E6%A8%A1%E6%9D%BF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E6%89%80%E8%83%BD%E8%AE%BF%E9%97%AE%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>https://herotiga.github.io/2022/06/03/Vue%E6%A8%A1%E6%9D%BF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E6%89%80%E8%83%BD%E8%AE%BF%E9%97%AE%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</id>
    <published>2022-06-03T06:34:33.000Z</published>
    <updated>2022-06-03T06:48:54.839Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的模板表达式是放在沙盒中的，只能访问一个受限的全局变量列表。</p><p>具体在模板表达式中可以访问到哪些全局变量，如下。</p><a id="more"></a><p>code: <a href="https://github.com/vuejs/core/blob/main/packages/shared/src/globalsWhitelist.ts#L3">https://github.com/vuejs/core/blob/main/packages/shared/src/globalsWhitelist.ts#L3</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; makeMap &#125; <span class="keyword">from</span> <span class="string">'./makeMap'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> GLOBALS_WHITE_LISTED =</span><br><span class="line">  <span class="string">'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,'</span> +</span><br><span class="line">  <span class="string">'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,'</span> +</span><br><span class="line">  <span class="string">'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isGloballyWhitelisted = <span class="comment">/*#__PURE__*/</span> makeMap(GLOBALS_WHITE_LISTED)</span><br></pre></td></tr></table></figure><p>同时，使用模板时应该遵守一条原则：模板中的表达式不应该有副作用，比如更改数据或者触发异步进程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的模板表达式是放在沙盒中的，只能访问一个受限的全局变量列表。&lt;/p&gt;
&lt;p&gt;具体在模板表达式中可以访问到哪些全局变量，如下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>JSX语法</title>
    <link href="https://herotiga.github.io/2022/06/02/jsx%E8%AF%AD%E6%B3%95/"/>
    <id>https://herotiga.github.io/2022/06/02/jsx%E8%AF%AD%E6%B3%95/</id>
    <published>2022-06-02T08:40:01.000Z</published>
    <updated>2022-06-18T06:36:21.127Z</updated>
    
    <content type="html"><![CDATA[<p>JSX是JavaScript的扩展语法，react使用JSX代替JavaScript。</p><p>使用JSX需要引入babel。</p><a id="more"></a><h2 id="JSX语法规则"><a href="#JSX语法规则" class="headerlink" title="JSX语法规则"></a>JSX语法规则</h2><ol><li>创建VDOM不能用引号包裹html代码。</li><li>标签中使用<code>{}</code>包裹js表达式。</li><li>用<code>className</code>代替<code>class</code>，用<code>htmlFor</code>代替<code>for</code>。</li><li>标签style属性的值要用两对花括号包裹，花括号中间是属性名:属性值的写法，用逗号隔开。</li><li>只能有一个根标签。</li><li>所有标签都要闭合。</li><li>react对于大写开头的标签会渲染对应的组件，对于正常的html标签不作处理。</li></ol><h2 id="如何创建组件"><a href="#如何创建组件" class="headerlink" title="如何创建组件"></a>如何创建组件</h2><ol><li>直接创建VDOM变量，然后用render函数渲染</li></ol><p>使用babel解析JSX语法。</p><figure class="highlight jsx"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建VDOM</span></span><br><span class="line"><span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#123;data.id.toLowerCase()&#125;</span>&gt;</span>hello, it's me!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">// react渲染VDOM</span></span><br><span class="line">ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">"container_id"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载VDOM</span></span><br><span class="line">ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">"container_id"</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li>使用函数创建VDOM</li></ol><figure class="highlight jsx"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">componentA</span>(<span class="params">porps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name, age&#125; = props;</span><br><span class="line">    <span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>my name is : &#123;name&#125;, and &#123;age&#125; yo.<span class="tag">&lt;<span class="name">div</span>/&gt;</span>;</span></span><br><span class="line"><span class="xml">    return VDOM;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用class创建VDOM</li></ol><figure class="highlight jsx"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">componentB</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            name: <span class="string">'Mason'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;&#123;<span class="keyword">this</span>.state.name&#125; &lt;div /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块和组件"><a href="#模块和组件" class="headerlink" title="模块和组件"></a>模块和组件</h2><p>react的模块和组件思想和vue一样。</p><p>react组件分为函数式组件和类式组件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSX是JavaScript的扩展语法，react使用JSX代替JavaScript。&lt;/p&gt;
&lt;p&gt;使用JSX需要引入babel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://herotiga.github.io/categories/react/"/>
    
    
  </entry>
  
</feed>
