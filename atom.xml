<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2020-12-05T07:13:50.363Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript学习笔记</title>
    <link href="https://herotiga.github.io/2020/12/03/typescript-tutorial/"/>
    <id>https://herotiga.github.io/2020/12/03/typescript-tutorial/</id>
    <published>2020-12-03T14:29:36.000Z</published>
    <updated>2020-12-05T07:13:50.363Z</updated>
    
    <content type="html"><![CDATA[<!--     reference:     1. https://www.runoob.com/typescript/ts-tutorial.html    2. https://ts.xcatliu.com/ --><p><code>TypeScript</code> 是JavaScript的超集且支持ES6标准，由微软开发。</p><p>TypeScript是设计用来开发大型应用的，可以编译成js并运行在浏览器上。</p><a id="more"></a><hr><h2 id="TypeScript语言特性"><a href="#TypeScript语言特性" class="headerlink" title="TypeScript语言特性"></a>TypeScript语言特性</h2><h3 id="TypeScript扩展的内容"><a href="#TypeScript扩展的内容" class="headerlink" title="TypeScript扩展的内容"></a>TypeScript扩展的内容</h3><p>TypeScript是js的扩展，扩展的内容如下：</p><ul><li>类型批注和编译时类型检查</li><li>类型推断</li><li>类型擦除</li><li>接口</li><li>枚举</li><li>Mixin</li><li>泛型编程</li><li>名字空间</li><li>元组</li><li>await</li></ul><p>以及从ECMA2015一直了如下内容：</p><ul><li>类</li><li>模块</li><li>lambda函数的箭头语法</li><li>可选参数和默认参数</li></ul><h3 id="TypeScript和JavaScript的区别"><a href="#TypeScript和JavaScript的区别" class="headerlink" title="TypeScript和JavaScript的区别"></a>TypeScript和JavaScript的区别</h3><p>ts是js的超集，它扩展了js的语法。</p><p>ts通过类型注解提供编译时的静态类型检查。</p><p>ts可以处理已有的js代码并只对其中的ts代码进行编译。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str : <span class="built_in">string</span> = <span class="string">"this is a string."</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><h2 id="TypeScript安装"><a href="#TypeScript安装" class="headerlink" title="TypeScript安装"></a>TypeScript安装</h2><h3 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用npm全局安装ts</span></span><br><span class="line">cnpm install -g typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否安装成功</span></span><br><span class="line">tsc -v</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>将ts编译为js代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ts文件扩展名为.ts</span></span><br><span class="line">tsc demo.ts</span><br><span class="line">tsc demo1.ts demo2.ts demo3.ts</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>ts已经被编译成了js文件，使用node命令运行js。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node demo.js</span><br></pre></td></tr></table></figure><h2 id="TypeScript基本语法"><a href="#TypeScript基本语法" class="headerlink" title="TypeScript基本语法"></a>TypeScript基本语法</h2><p>TypeScript程序由模块、函数、变量、语句和表达式以及注释组成。</p><h3 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h3><p>tsc常用编译参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示帮助信息</span></span><br><span class="line">--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入扩展模块</span></span><br><span class="line">--module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置ECMA版本</span></span><br><span class="line">--target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 额外生成一个.d.ts扩展名的文件。</span></span><br><span class="line">tsc ts-hw.ts --declaration</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件的注释</span></span><br><span class="line">--removeComments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译多个文件并合并到一个输出的文件</span></span><br><span class="line">--out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个 sourcemap (.map) 文件。sourcemap 是一个存储源代码与编译代码对应位置映射的信息文件。</span></span><br><span class="line">--sourcemap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在表达式和声明上有隐含的 any 类型时报错</span></span><br><span class="line">--module noImplicitAny</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。</span></span><br><span class="line">--watch</span><br></pre></td></tr></table></figure><h3 id="TypeScript保留关键字"><a href="#TypeScript保留关键字" class="headerlink" title="TypeScript保留关键字"></a>TypeScript保留关键字</h3><ul><li>保留关键字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">breakascatchswitch</span><br><span class="line">caseifthrowelse</span><br><span class="line">varnumberstringget</span><br><span class="line">moduletypeinstanceoftypeof</span><br><span class="line">publicprivateenumexport</span><br><span class="line">finallyforwhilevoid</span><br><span class="line">nullsuperthisnew</span><br><span class="line">inreturntruefalse</span><br><span class="line">anyextendsstaticlet</span><br><span class="line">packageimplementsinterfacefunction</span><br><span class="line">newtryyieldconst</span><br><span class="line">continuedo</span><br></pre></td></tr></table></figure><ul><li>空白和换行</li></ul><p>ts会忽略空格、tab和换行。</p><ul><li><p>ts区别大小写</p></li><li><p>ts中分号可选</p></li></ul><p>建议使用分号。</p><ul><li>注释</li></ul><p>建议每段代码都写注释以提高程序可读性。</p><p>编译器会忽略注释。</p><p>ts支持的注释类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="TypeScript面向对象"><a href="#TypeScript面向对象" class="headerlink" title="TypeScript面向对象"></a>TypeScript面向对象</h3><p>TypeScript是面向对象的编程语言。</p><p>面向对象有两个重要概念：对象和类。</p><ul><li>类：类是一个模板，描述一类对象的状态和行为。</li><li>对象：对象是类的实例，有状态和行为。</li><li>方法：方法是类的操作的实现步骤。</li></ul><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line"><span class="keyword">class</span> Person &#123; </span><br><span class="line">  <span class="comment">// 定义一个name方法</span></span><br><span class="line">   name():<span class="built_in">void</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"wangwei"</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Person这个类的实例mason</span></span><br><span class="line"><span class="keyword">var</span> mason = <span class="keyword">new</span> Person(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用mason这个实例的name方法</span></span><br><span class="line">mason.name();</span><br></pre></td></tr></table></figure><p>现在将这个ts编译为js，编译之后的js代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    Person.prototype.name = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"wangwei"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> Person;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> mason = <span class="keyword">new</span> Person();</span><br><span class="line">mason.name();</span><br></pre></td></tr></table></figure><h2 id="TypeScript基本数据类型"><a href="#TypeScript基本数据类型" class="headerlink" title="TypeScript基本数据类型"></a>TypeScript基本数据类型</h2><ul><li><code>any</code>关键字声明任意类型。</li></ul><p>TypeScript针对类型不明确时提供了any类型。</p><p>三种用途：</p><ol><li>变量的值会动态改变。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">any</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="string">'abc'</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>改写原有代码的时候，使用any类型可以允许在编译的时候可选择的包含或者移除类型检查。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">x.ifItExists();</span><br><span class="line"></span><br><span class="line">x.toFixed();</span><br></pre></td></tr></table></figure><ol start="3"><li>定义存储各种类型数据的数组的时候使用any。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="string">'a string'</span>,<span class="literal">true</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">'new string'</span>;</span><br></pre></td></tr></table></figure><ul><li><code>number</code>关键字声明数字类型，采用双精度64位浮点数，可以用来表示整数和分数。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明并赋值一个二进制数</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">0b10101</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明并赋值一个八进制数</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">0o712</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明并赋值一个十进制数</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明并赋值一个十六进制数</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">0xf100a</span>;</span><br></pre></td></tr></table></figure><ul><li><code>string</code>关键字声明字符串类型，使用单引号或者双引号表示字符串，反引号`定义多行文本和内嵌表达式。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">'mason'</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> gender: <span class="built_in">string</span> = <span class="string">'male'</span>;</span><br><span class="line"><span class="keyword">let</span> words: <span class="built_in">string</span> = <span class="string">`我的名字叫<span class="subst">$&#123;name&#125;</span>，今年<span class="subst">$&#123;age&#125;</span>岁，性别<span class="subst">$&#123;gender&#125;</span>。`</span>;</span><br></pre></td></tr></table></figure><ul><li><code>boolean</code>关键字声明布尔型，两个值为<code>true</code>和<code>false</code>。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fake: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ul><li><code>number[]</code>来声明数组类型。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在元素类型后面加上[]即可声明数组</span></span><br><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用数组泛型</span></span><br><span class="line"><span class="keyword">let</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><ul><li>元组类型用来表示已知元素数量和类型的数组，各元素的类型不必相同，对应位置的类型需要相同。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明元组，元组各个位置上的数据类型要相符，下面尝试赋值</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值正常</span></span><br><span class="line">x = [<span class="string">'asd'</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值报错</span></span><br><span class="line">x = [<span class="number">1</span>,<span class="string">'add'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出asd</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><ul><li><code>enum</code>关键字，枚举类型用于定义数值集合。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125;;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Blue;</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure><ul><li><code>void</code>关键字用于标识方法没有返回值。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>null</code>关键字标识对象值缺失。</li></ul><p>js中的null表示什么都没有。<br>null是一个只有一个值的特殊类型，表示一个空对象引用。<br><code>typeof null</code> 得到 <code>object</code> 。</p><ul><li><code>undefined</code>关键字用于初始化变量为一个未定义的值。</li></ul><p>js中的undefined是一个没有设置值的变量。</p><ul><li><code>never</code>是其他类型的子类型，代表不会出现的值。</li></ul><p>声明为never类型的变量只能被never类型所赋值，在函数中它通常表现为抛出异常或无法执行到终止点（例如无限循环）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: never;</span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行错误，数字类型不能转为never类型</span></span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行正确，never类型可以赋值给never类型</span></span><br><span class="line">x = <span class="function">(<span class="params">(<span class="params"></span>)=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'exception'</span>)&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 运行正确，<span class="params">never</span>类型可以赋值给数字类型</span></span><br><span class="line"><span class="function"><span class="params">y</span> = (<span class="params">(<span class="params"></span>)=&gt;&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'exception'</span>)&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 返回值为<span class="params">never</span>的函数可以是抛出异常的情况</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">throw</span> <span class="params">new</span> <span class="params">Error</span>(<span class="params">message</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 返回值为<span class="params">never</span>的函数可以是无法被执行到的终止点的情况</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">loop</span><span class="params">()</span>: <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">while</span> (<span class="params"><span class="literal">true</span></span>) &#123;&#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>JavaScript是弱类型语言故而没有整数类型，TypeScript是强类型语言但是只能用number关键字声明数字并且不区分整数和浮点数故而也没有整数类型。</strong></p><p><strong>可以使用|来支持多种类型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>tips：</p><p>如果某个属性的值是计算出来的，则它后面的一个变量必须初始化，否则编译报错。</p><h2 id="TypeScript变量声明"><a href="#TypeScript变量声明" class="headerlink" title="TypeScript变量声明"></a>TypeScript变量声明</h2><p>变量用于引用内存地址。</p><p>变量可以看做是存储数据的容器。</p><p>ts变量命名规则：变量名由数字、字母和 <code>_</code> 以及 <code>$</code> 构成，且不能以数字开头。</p><p>变量使用前必须声明。</p><p>各种声明方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量类型并初始化</span></span><br><span class="line"><span class="keyword">var</span> [var_name]: [data_type] = [value];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明变量但不初始化，值默认为undefined</span></span><br><span class="line"><span class="keyword">var</span> [var_name]: [data_type];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明变量并初始化，但不设置类型，此时变量可以是任意类型</span></span><br><span class="line"><span class="keyword">var</span> [var_name] = [value];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明变量，不设置类型和初始化，类型可以是任意类型，值默认为undefined</span></span><br><span class="line"><span class="keyword">var</span> [var_name];</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uname:<span class="built_in">string</span> = <span class="string">"mason"</span>;</span><br><span class="line"><span class="keyword">var</span> score1:<span class="built_in">number</span> = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">var</span> score2:<span class="built_in">number</span> = <span class="number">41.5</span></span><br><span class="line"><span class="keyword">var</span> sum = score1 + score2</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"名字: "</span>+uname)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第一个科目成绩: "</span>+score1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第二个科目成绩: "</span>+score2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"总成绩: "</span>+sum)</span><br></pre></td></tr></table></figure><p>变量名不能使用 <code>name</code> ，会与 <code>windows.name</code> 冲突。</p><p>编译为js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uname = <span class="string">"mason"</span>;</span><br><span class="line"><span class="keyword">var</span> score1 = <span class="number">90</span>;</span><br><span class="line"><span class="keyword">var</span> score2 = <span class="number">41.5</span>;</span><br><span class="line"><span class="keyword">var</span> sum = score1 + score2;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"名字: "</span> + uname);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第一个科目成绩: "</span> + score1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"第二个科目成绩: "</span> + score2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"总成绩: "</span> + sum);</span><br></pre></td></tr></table></figure><p>ts是强类型语言，声明类型和字面量类型不同则编译错误：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明为number类型却复制为string类型，编译错误</span></span><br><span class="line"><span class="keyword">var</span> num: <span class="built_in">number</span> = <span class="string">"this is a string."</span>;</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言(Type Assertion)可以用于手动指定一个值的类型，也就是将一个变量改变为另一个类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">&lt;类型&gt;值</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二，在tsx中必须使用该方法</span></span><br><span class="line">值 <span class="keyword">as</span> 类型</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明变量为string类型</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法一将其变为number类型</span></span><br><span class="line"><span class="keyword">var</span> str2: <span class="built_in">number</span> = &lt;<span class="built_in">number</span>&gt; &lt;<span class="built_in">any</span>&gt; str;</span><br></pre></td></tr></table></figure><p>关于断言：</p><ol><li>当A类型是B类型的子集或者A类型是B类型的父集，A类型都能被成功断言为A类型，这个是为了安全考虑，若强行断言则可以使用<code>any</code>。</li><li><strong>类型断言不是类型转换</strong>，类型转换是在程序运行时完成的，而类型断言则是纯粹的编译时语法。</li></ol><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>当没有给出类型的时候，tsc会利用类型推断来推断类型。</p><p>如果缺乏声明而导致不能推断出类型，则默认其类型为 <code>any</code> 。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里不是js声明，这里是ts声明变量，却没有声明类型，类型推断为number</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里num已经被推断为number却赋值了string类型，故而编译失败</span></span><br><span class="line">num = <span class="string">'this is a string.'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>ts中的变量作用域：</p><ol><li>全局作用域：全局变量定义在程序结构的外部，在任何位置都可以调用。</li><li>类作用域：也称之为字段，类变量声明在一个类里面且在类的方法外面。可以使用类的对象访问。类变量可以使静态的，可以通过类名直接访问。</li><li>局部作用域：局部变量，生命在一个代码块中，作用域就在这个代码块。</li></ol><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> global_var = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Numbers &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    template_var = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> static_var = <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">    varNum(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="keyword">var</span> scoped_var = <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是上面的四种变量对应的访问方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="built_in">console</span>.log(global_var);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例变量，需要先new一个实例</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Numbers();</span><br><span class="line"><span class="built_in">console</span>.log(obj.template_var);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态变量</span></span><br><span class="line"><span class="built_in">console</span>.log(Numbers.static_var);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量外部无法访问，只能在其所在的代码块访问</span></span><br></pre></td></tr></table></figure><p>更多参考：<a href="https://ts.xcatliu.com/basics/type-assertion.html">https://ts.xcatliu.com/basics/type-assertion.html</a></p><h2 id="TypeScript运算符"><a href="#TypeScript运算符" class="headerlink" title="TypeScript运算符"></a>TypeScript运算符</h2><p>ts有以下几种运算符：</p><ol><li>算术运算符</li><li>逻辑运算符</li><li>关系运算符</li><li>按位运算符</li><li>赋值运算符</li><li>三元/条件运算符</li><li>字符串运算符</li><li>类型运算符</li></ol><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>有 <code>+</code> , <code>-</code> , <code>*</code> , <code>/</code> , <code>%</code> , <code>++</code> , <code>--</code> ，其中 <code>++</code> , <code>--</code> 还有写在值之前和之后之分。</p><p>比如 <code>++</code> ，写在值之前是先自增再用，写在值之后是先用再自增。</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算法计算表达式是 <code>true</code> 还是 <code>false</code> 。</p><p>关系运算符有这些： <code>==</code> , <code>!=</code> , <code>&gt;</code> , <code>&lt;</code> , <code>&gt;=</code> , <code>&lt;=</code> 。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符用于测定变量或者值之间的逻辑。</p><p>逻辑运算符有这些： <code>&amp;&amp;</code> , <code>||</code> , <code>!</code> 。</p><p>其中 <code>&amp;&amp;</code> 和 <code>||</code> 可以短路： <code>&amp;&amp;</code> 左边为 <code>true</code> 则返回右边的， <code>||</code> 之前的变量或值为 <code>true</code> 则返回 <code>&amp;&amp;</code> 之前的变量或值。</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符是对变量按位进行二进制操作（有一元操作符和二元操作符）。</p><p>位运算符有这些：</p><ul><li><code>&amp;</code>：按位与处理两个长度相同的二进制数。</li><li><code>|</code>：按位或处理两个长度相同的二进制数。</li><li><code>~</code>：取反，取反是一元运算符，对一个二进制数的每一位执行逻辑反操作。</li><li><code>^</code>：按位异或运算，对等长二进制模式按位或二进制数的每一位执行逻辑异按位或操作。操作的结果是如果某位不同则该位为 1，否则该位为 0。</li><li><code>&lt;&lt;</code>：把 &lt;&lt; 左边的运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数指定移动的位数，高位丢弃，低位补 0。</li><li><code>&gt;&gt;</code>：把 &gt;&gt; 左边的运算数的各二进位全部右移若干位，&gt;&gt; 右边的数指定移动的位数。</li><li><code>&gt;&gt;&gt;</code>：无符号右移，与有符号右移位类似，除了左边一律使用0 补位。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">alert: 这里b是3，按位取反后为什么是-4？</span><br><span class="line">(~b) &#x3D;&gt;  -4</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符有： <code>=</code> , <code>+=</code> , <code>-=</code> , <code>*=</code> , <code>/=</code> 。</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>语法： <code>condition ? expression1 : expression2</code></p><p>三元运算符 <code>?</code> 有三个操作数，第一个操作数为 <code>true</code> 则返回第二个操作数，为 <code>false</code> 则返回第三个操作数。</p><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">number</span> = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">var</span> result = num &gt;= <span class="number">0</span> ? <span class="string">"大于0"</span> : <span class="string">"小于0"</span>;</span><br></pre></td></tr></table></figure><h3 id="类型运算符"><a href="#类型运算符" class="headerlink" title="类型运算符"></a>类型运算符</h3><ul><li>typeof：一元运算符，返回数据类型。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：number</span></span><br></pre></td></tr></table></figure><ul><li>instanceof：判断对象是否是指定类型。</li></ul><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><ul><li><p>符号运算符：用于取负值。</p></li><li><p>字符串运算符（链接运算符）：用于拼接两个字符串。</p></li></ul><h2 id="TypeScript条件语句"><a href="#TypeScript条件语句" class="headerlink" title="TypeScript条件语句"></a>TypeScript条件语句</h2><p>条件语句用于基于不同的条件执行不同的操作。</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>if语句由布尔表达式和多个语句组成。</p><p>语法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type1</span></span><br><span class="line"><span class="keyword">if</span> (expression) &#123;</span><br><span class="line">    <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type2</span></span><br><span class="line"><span class="keyword">if</span> (expression) &#123;</span><br><span class="line">    <span class="comment">// statement1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// statement2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type3</span></span><br><span class="line"><span class="keyword">if</span> (expression) &#123;</span><br><span class="line">    <span class="comment">// statement1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">    <span class="comment">// statement2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// statement3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch…case语句"><a href="#switch…case语句" class="headerlink" title="switch…case语句"></a>switch…case语句</h3><p><code>switch...case</code> 语句允许测试一个变量等于多个值时的情况，每一个值都是一个case，被测变量以此检查case。</p><p>switch…case语句规则：</p><ul><li>expression是一个常量表达式（整形或者枚举型）。</li><li>case可以与多个，后面跟一个值和冒号。</li><li>expression和exp必须要是相同的数据类型。</li><li>expression和exp相等时执行case后面的语句，直到遇到<code>break;</code>跳出switch。</li><li>如果语句不包含break则顺序往下面的case执行直到遇到break。</li><li>switch可以有多个default，放置在switch最后面。</li></ul><p>语法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> exp1: &#123;</span><br><span class="line">        <span class="comment">// statement</span></span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">// 可选</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> exp2: &#123;</span><br><span class="line">        <span class="comment">// statement</span></span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">// 可选</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">        <span class="comment">// statement</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TypeScript循环"><a href="#TypeScript循环" class="headerlink" title="TypeScript循环"></a>TypeScript循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (init; condition; inc) &#123;</span><br><span class="line">    <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 for 循环的控制流程解析：</p><ol><li>init 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。</li><li>接下来，会判断 condition。如果为 true，则执行循环主体。如果为 false，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。</li><li>在执行完 for 循环主体后，控制流会跳回上面的 increment 语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。</li><li>条件再次被判断。如果为 true，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为 false 时，for 循环终止。</li></ol><p>在这里，statement(s) 可以是一个单独的语句，也可以是几个语句组成的代码块。</p><p>condition 可以是任意的表达式，当条件为 true 时执行循环，当条件为 false 时，退出循环。</p><p>实例：计算5的阶乘5!</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> count: <span class="built_in">number</span> = <span class="number">5</span>; count &gt; <span class="number">0</span>; count--) &#123;</span><br><span class="line">    result = result * count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// 120</span></span><br></pre></td></tr></table></figure><h3 id="for…in循环"><a href="#for…in循环" class="headerlink" title="for…in循环"></a>for…in循环</h3><p>for…in循环用于一组值的集合或列表进行迭代输出。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">in</span> list) &#123;</span><br><span class="line">    <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>val</code> 为string或者any。</p><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num: <span class="built_in">any</span>;</span><br><span class="line"><span class="keyword">var</span> str: <span class="built_in">any</span> = <span class="string">"a b c"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (num <span class="keyword">in</span> str) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str[num]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    c</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="for…of-forEach-every-some"><a href="#for…of-forEach-every-some" class="headerlink" title="for…of, forEach, every, some"></a>for…of, forEach, every, some</h3><ul><li><code>for...of</code>是es6中引入的代替<code>for...in</code>和<code>forEach()</code>，用于创建一个循环来迭代可迭代的对象，支持新的迭代协议。</li></ul><p>可以使用for…of遍历数组、字符串、映射（maps）、集合（sets）等等可迭代的数据结构。</p><p>实例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someArray = [<span class="number">1</span>, <span class="string">"string"</span>, <span class="literal">false</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry of someArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entry); <span class="comment">// 1, "string", false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- 

    reference: 

    1. https://www.runoob.com/typescript/ts-tutorial.html
    2. https://ts.xcatliu.com/

 --&gt;

&lt;p&gt;&lt;code&gt;TypeScript&lt;/code&gt; 是JavaScript的超集且支持ES6标准，由微软开发。&lt;/p&gt;
&lt;p&gt;TypeScript是设计用来开发大型应用的，可以编译成js并运行在浏览器上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ts" scheme="https://herotiga.github.io/categories/ts/"/>
    
    
  </entry>
  
  <entry>
    <title>使用commitizen规范化commit信息</title>
    <link href="https://herotiga.github.io/2020/11/23/commitizen/"/>
    <id>https://herotiga.github.io/2020/11/23/commitizen/</id>
    <published>2020-11-23T12:21:15.000Z</published>
    <updated>2020-11-24T14:00:43.971Z</updated>
    
    <content type="html"><![CDATA[<p><code>commitizen</code> 可以规范化 <code>git commit</code> 信息以便回溯。</p><a id="more"></a><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g commitizen</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先add文件</span></span><br><span class="line">git add &lt;filename&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用j和k上下选择类型，输入影响范围，输入短描述和长描述</span></span><br><span class="line">git cz</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><ol><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></li><li><a href="https://www.jianshu.com/p/36d970a2b4da">https://www.jianshu.com/p/36d970a2b4da</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;commitizen&lt;/code&gt; 可以规范化 &lt;code&gt;git commit&lt;/code&gt; 信息以便回溯。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://herotiga.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>开源围棋人工智能leela-zero的使用和学习</title>
    <link href="https://herotiga.github.io/2020/11/15/leela-zero/"/>
    <id>https://herotiga.github.io/2020/11/15/leela-zero/</id>
    <published>2020-11-15T14:01:57.000Z</published>
    <updated>2020-11-18T12:51:30.749Z</updated>
    
    <content type="html"><![CDATA[<p>最近迷恋上了围棋， <code>AlphaGo</code> 不开放API，了解到一个开源的围棋AI叫 <code>leela-zero</code> ，小试一下。</p><a id="more"></a><h2 id="安装及编译（macos）"><a href="#安装及编译（macos）" class="headerlink" title="安装及编译（macos）"></a>安装及编译（macos）</h2><ul><li>方法一：macos可以直接brew安装leela-zero</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install leela-zero</span><br></pre></td></tr></table></figure><ul><li>方法二：手动编译</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/leela-zero/leela-zero</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> leela-zero</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line">brew install boost cmake zlib</span><br><span class="line"></span><br><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">cmake ..</span><br><span class="line">cmake --build .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">./tests</span><br></pre></td></tr></table></figure><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>leela-zero无法直接使用，需要先安装一个GUI并通过GTP协议与其进行交互，支持GTP2。</p><p>主要有下面几种：</p><ul><li><a href="https://github.com/featurecat/lizzie/releases">Lizzie</a>：Leela Zero的专门客户</li><li>Sabaki</li><li>LeelaSabaki</li><li>GoReviewPartner</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/leela-zero/leela-zero">project: leela-zero</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近迷恋上了围棋， &lt;code&gt;AlphaGo&lt;/code&gt; 不开放API，了解到一个开源的围棋AI叫 &lt;code&gt;leela-zero&lt;/code&gt; ，小试一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ai" scheme="https://herotiga.github.io/categories/ai/"/>
    
    
  </entry>
  
  <entry>
    <title>mac卸载java8</title>
    <link href="https://herotiga.github.io/2020/09/26/mac-uninstall-jdk8/"/>
    <id>https://herotiga.github.io/2020/09/26/mac-uninstall-jdk8/</id>
    <published>2020-09-26T04:45:20.000Z</published>
    <updated>2020-09-26T05:09:24.379Z</updated>
    
    <content type="html"><![CDATA[<p>卸载java8换成java11 LTS。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin</span><br><span class="line">sudo rm -rf /Library/PreferencesPanes/JavaControlPanel.prefPane</span><br><span class="line">sudo rm -rf ~/Library/Application\ Support/Java</span><br><span class="line"><span class="comment"># jdk版本使用ls /Library/Java/JavaVirtualMachines/查询</span></span><br><span class="line">sudo rm -rf /Library/Java/JavaVirtualMachines/[jdk version]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;卸载java8换成java11 LTS。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://herotiga.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>初识JVM调优</title>
    <link href="https://herotiga.github.io/2020/09/07/jvm-tuning/"/>
    <id>https://herotiga.github.io/2020/09/07/jvm-tuning/</id>
    <published>2020-09-06T16:53:47.000Z</published>
    <updated>2020-12-05T00:21:26.995Z</updated>
    
    <content type="html"><![CDATA[<p>关于jvm调优，其实大多数项目不需要jvm调优，需要调优的往往是比较极端的业务。</p><a id="more"></a><h2 id="是否需要调优"><a href="#是否需要调优" class="headerlink" title="是否需要调优"></a>是否需要调优</h2><p>一般项目不需要调优，加xms和xmx参数就可以了。即使是高并发服务也不需要调优，jvm本身就是为低延时、高并发、大吞吐的服务设计和优化的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms1g -Xmx2g -jar abc.jar</span><br></pre></td></tr></table></figure><p>对于项目来说，主要还是要将精力放在项目本身的调优。</p><p><strong>jvm调优的前提是对服务的全面监控和性能数据的收集以及我们对jvm的运行原理的非常熟悉。</strong></p><p>首先需要了解系统的运行状况，如果系统的响应时间很短，资源占用也不高，那么这种调优是没什么意义的。<br>系统运行状况参数：</p><ul><li>响应时间</li><li>TPS（每秒处理事务数量）</li><li>资源占用量（系统性能受限于最差的那个）</li></ul><p>jvm调优主要针对一些极端的项目，比如一些对吞吐量要求高而对时延要求不高的服务，就像12306。<br>针对12306这种服务，可能需要调整一些参数，比如让gc中的generation分布更加合理。</p><h2 id="如何调优"><a href="#如何调优" class="headerlink" title="如何调优"></a>如何调优</h2><p>jvm调优主要包括：1. 合理分配jvm内存空间。2. 选择适合的gc回收器。</p><ol><li>合理分配jvm内存空间：jvm内存分配不合理的表现是频繁的gc从而降低系统的吞吐量和增加响应时间。</li></ol><p>主要方法是调整堆内存空间以减少Full GC，调整新生代减少MinorGC，设置合理的Eden和Survivor区的比例。</p><ol start="2"><li>选择合理的垃圾回收器</li></ol><p>垃圾回收主要回收堆（主要是对象）和方法区（主要是废弃常量和类），需要响应快可以选择CMS和G1，需要吞吐高可以选择Parallel Scavenge。</p><p>jvm调优大部分调的是gc参数，主要是下面几点：</p><ul><li>最大堆和最小堆的大小</li><li>gc算法</li><li>新生代的大小</li></ul><p>jdk8及以前：gc算法会自动在Parallel和CMS中选择，新生代根据经验调节大小，这样就达到了性能和STW的平衡。</p><p>jdk9开始的版本：gc默认算法变为G1，只需要调整最大堆大小和STW期望值既可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jvm调优，其实大多数项目不需要jvm调优，需要调优的往往是比较极端的业务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://herotiga.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>初识JVM</title>
    <link href="https://herotiga.github.io/2020/09/06/jvm-primary/"/>
    <id>https://herotiga.github.io/2020/09/06/jvm-primary/</id>
    <published>2020-09-06T07:32:58.000Z</published>
    <updated>2020-12-05T00:21:34.453Z</updated>
    
    <content type="html"><![CDATA[<p>JVM，也就是Java Virtual Machine（Java虚拟机），JVM是虚构出来的计算机，它的作用是在物理计算机上模仿各种计算机功能实现的。</p><p>Java能“一次编译，到处运行”的原因就是JVM屏蔽了不同操作系统和不同硬件的差异，这样Java开发者就可以无需考虑平台差异，只需要面向JVM编程即可。</p><a id="more"></a><hr><p>JVM的本质是一个程序，当它开始执行class文件的时候就执行class文件中的指令。<br>JVM上运行的是 <code>.class</code> 字节码文件，字节码文件是由 <code>.java</code> 文件经过编译器javac编译产生的，可以在JRE（JVM+Java类库）上运行。</p><p>正是由于JVM上面运行的是 <code>.class</code> ，所以不仅是Java，只要是能编译成 <code>.class</code> 的语言都可以在JVM上运行。<br>比如python，python可以通过编译器jython将 <code>.py</code> 编译为 <code>.class</code> ，然后在JVM上运行。<br>除此之外还有：kotlin, scala, clojure, groovy, jruby, ceylon, eta, haxe, fantom, rhino。</p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/JVM架构.png" width="400"><p>JVM的组成：堆，方法区，栈，本地方法栈，程序计数器等等。<br>其中方法回收堆和方法区是共享区，而栈、程序计数器和本地方法栈区是JVM的。</p><h2 id="JVM、JRE和JDK三者的关系"><a href="#JVM、JRE和JDK三者的关系" class="headerlink" title="JVM、JRE和JDK三者的关系"></a>JVM、JRE和JDK三者的关系</h2><p>JDK（Java开发工具包）包含了Java语言、JVM、Java API和Javac等工具。<br>JRE（Java运行时环境）包含了JVM和Java API。<br>也就是说：JDK包含了JRE，JRE又包含了JVM。</p><p>层级图示：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/jvm-jre-jdk.png" alt=""></p><h2 id="JVM的实现原理"><a href="#JVM的实现原理" class="headerlink" title="JVM的实现原理"></a>JVM的实现原理</h2><h3 id="类装载器（ClassLoader）"><a href="#类装载器（ClassLoader）" class="headerlink" title="类装载器（ClassLoader）"></a>类装载器（ClassLoader）</h3><p>类装载器（ClassLoader），负责装载class文件，然后交由execution engine执行。<br>类装载器：启动类加载器（JVM实现的一部分）和用户自定义类加载器（Java程序的一部分）。</p><h3 id="本地方法栈（native-method-stack）"><a href="#本地方法栈（native-method-stack）" class="headerlink" title="本地方法栈（native method stack）"></a>本地方法栈（native method stack）</h3><p>本地方法栈的作用是登记native方法，然后在execution engine执行的时候加载本地方法库。</p><h3 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h3><p>又叫内存栈，栈负责java程序的运行，在线程创建的时候创建出来，在线程销毁的时候释放。</p><h3 id="程序计数器（program-counter）"><a href="#程序计数器（program-counter）" class="headerlink" title="程序计数器（program counter）"></a>程序计数器（program counter）</h3><p>是方法区中的方法字节码由引擎读取下一条指令。</p><h3 id="方法区（method-area）"><a href="#方法区（method-area）" class="headerlink" title="方法区（method area）"></a>方法区（method area）</h3><p>是线程共享的。</p><h3 id="堆（heap）"><a href="#堆（heap）" class="headerlink" title="堆（heap）"></a>堆（heap）</h3><p>用于存储对象实例。<br>堆的内存空间需要JVM GC回收。</p><h3 id="本地接口（native-interface）"><a href="#本地接口（native-interface）" class="headerlink" title="本地接口（native interface）"></a>本地接口（native interface）</h3><p>用于融合不同的编程语言。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA">wikipedia: JVM</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JVM，也就是Java Virtual Machine（Java虚拟机），JVM是虚构出来的计算机，它的作用是在物理计算机上模仿各种计算机功能实现的。&lt;/p&gt;
&lt;p&gt;Java能“一次编译，到处运行”的原因就是JVM屏蔽了不同操作系统和不同硬件的差异，这样Java开发者就可以无需考虑平台差异，只需要面向JVM编程即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://herotiga.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java复习笔记（二）</title>
    <link href="https://herotiga.github.io/2020/09/05/java-review-02/"/>
    <id>https://herotiga.github.io/2020/09/05/java-review-02/</id>
    <published>2020-09-05T13:54:07.000Z</published>
    <updated>2020-09-07T20:23:46.511Z</updated>
    
    <content type="html"><![CDATA[<p>Day02: 2020.09.05</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>java中的所有变量使用之前都必须要声明。</p><a id="more"></a><p>声明实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">3</span>, e = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">byte</span> z = <span class="number">2</span>;</span><br><span class="line">String str = <span class="string">"this is a line of string"</span>;</span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">2.14</span>;</span><br><span class="line"><span class="keyword">char</span> x = <span class="string">'a'</span>;</span><br></pre></td></tr></table></figure><p>java支持的变量类型有：<br>类变量：独立于方法之外的变量，用static修饰。<br>实例变量：独立于方法之外的变量，没有static修饰。<br>局部变量：类的方法中的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    String str = <span class="string">'asd'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li>局部变量声明在方法、构造方法或者语句块中。</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，执行完毕就会被销毁。</li><li>访问修饰符不能用于局部变量。</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见。</li><li>局部变量是在栈上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后必须要初始化才能使用。</li></ul><p>实例1：age是一个局部变量，定义在pupAge()中，age的作用域就限制在该方法中。<br>Test.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">// pupAge()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pupAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">        age = age + <span class="number">7</span>;</span><br><span class="line">        System.out.println(<span class="string">"小狗的年龄是："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主函数，调用pupAge()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// new一个Test类的实例</span></span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="comment">// 调用Test类的pupAge()方法，如果成功的话则第一次会输出7，而且再次运行也会是输出7</span></span><br><span class="line">        test.pupAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次运行输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小狗的年龄是：7</span><br></pre></td></tr></table></figure><p>第二次运行输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小狗的年龄是：7</span><br></pre></td></tr></table></figure><p>可以看到age并没有再次+7，也就是说age变量仅限于执行中，执行完毕age就被销毁了。</p><p>实例2：下面的局部变量age变量没有初始化，故而javac的时候会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pupAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 局部变量age没有初始化</span></span><br><span class="line">      <span class="keyword">int</span> age;</span><br><span class="line">      age = age + <span class="number">7</span>;</span><br><span class="line">      System.out.println(<span class="string">"小狗的年龄是 : "</span> + age);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Test test = <span class="keyword">new</span> Test();</span><br><span class="line">      test.pupAge();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出错：variable number might not have been initialized。<br>变量还没有被初始化。</p><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><ul><li>声明在一个类中，但是在方法、构造方法和语句块之外。</li><li>当一个对象被实例化后，每个实例变量的值就跟着确定。</li><li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁。</li><li>实例变量的值至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方法获取实例变量信息。</li><li>实例变量可以声明在使用前或者使用后。</li><li>访问修饰符可以修饰实例变量。</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的，一般情况下应该吧实例变量设为私有，通过使用访问修饰符可以使实例变量对子类可见。</li><li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定。</li><li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li></ul><p>实例：Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">   <span class="comment">// 这个实例变量对子类可见</span></span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line">   <span class="comment">// 私有变量，仅在该类可见</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">   <span class="comment">//在构造器中对name赋值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> <span class="params">(String empName)</span></span>&#123;</span><br><span class="line">      name = empName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//设定salary的值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> empSal)</span></span>&#123;</span><br><span class="line">      salary = empSal;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 打印信息</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"名字 : "</span> + name );</span><br><span class="line">      System.out.println(<span class="string">"薪水 : "</span> + salary);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Employee empOne = <span class="keyword">new</span> Employee(<span class="string">"RUNOOB"</span>);</span><br><span class="line">      empOne.setSalary(<span class="number">1000.0</span>);</span><br><span class="line">      empOne.printEmp();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">名字 : RUNOOB</span><br><span class="line">薪水 : 1000.0</span><br></pre></td></tr></table></figure><h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><ul><li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li><li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li><li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。</li><li>静态变量在第一次被访问时创建，在程序结束时销毁。</li><li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。</li><li>默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li><li>静态变量可以通过：<code>ClassName.VariableName</code>的方式访问。</li><li>类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</li></ul><p>实例：Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="comment">//salary是静态的私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="comment">// DEPARTMENT是一个常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEPARTMENT = <span class="string">"开发人员"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    salary = <span class="number">10000</span>;</span><br><span class="line">        System.out.println(DEPARTMENT+<span class="string">"平均工资:"</span>+salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开发人员平均工资:10000.0</span><br></pre></td></tr></table></figure><p>如果其他类想要访问该变量，可以这样访问：<code>Employee.DEPARTMENT</code>。</p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>修饰符的分类：</p><ul><li>访问修饰符</li><li>非访问修饰符</li></ul><p>修饰符用来定义类、方法或者变量，通常放在语句的最前端。</p><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。</p><p>一共有4中访问控制修饰符：</p><ul><li>default（即不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li>private: 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。</li><li>public: 对所有类可见。使用对象：类、接口、变量、方法。</li><li>protected: 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/java%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6.png" alt="访问控制"></p><p>默认访问修饰符：不使用任何关键字。</p><p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 public static final,而接口里的方法默认情况下访问权限为 public。</p><hr><p>Day02: 2020.09.05</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Day02: 2020.09.05&lt;/p&gt;
&lt;h2 id=&quot;变量类型&quot;&gt;&lt;a href=&quot;#变量类型&quot; class=&quot;headerlink&quot; title=&quot;变量类型&quot;&gt;&lt;/a&gt;变量类型&lt;/h2&gt;&lt;p&gt;java中的所有变量使用之前都必须要声明。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://herotiga.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java复习笔记（一）</title>
    <link href="https://herotiga.github.io/2020/09/04/java-review-01/"/>
    <id>https://herotiga.github.io/2020/09/04/java-review-01/</id>
    <published>2020-09-04T11:11:09.000Z</published>
    <updated>2020-09-07T20:19:14.840Z</updated>
    
    <content type="html"><![CDATA[<p>Day01: 2020.09.04</p><p>今天开始复习java，一天复习一点。</p><p>复习资料来自：<a href="https://www.runoob.com/java/java-tutorial.html">菜鸟教程：java</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Java是Sun Microsystems在1995年发布的高级程序设计语言。</p><p>Sun Microsystems是IT及互联网技术服务公司（已被甲骨文收购）Sun Microsystems 创建于1982年。主要产品是工作站及服务器。</p><p>Java可以运行在ARM和x86多个平台上，比如windows、macos、linux、unix等等。</p><a id="more"></a><p>Java有什么：</p><ol><li>Java语言</li><li>JVM</li><li>Java API</li><li>Javac等工具</li></ol><p>jdk：1，2，3，4<br>jre（Java运行时环境）：2，3</p><p>从底层到顶层：JVM -&gt; JRE -&gt; JDK</p><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>老规矩，现在写第一个java程序：HelloWorld.java</p><p>下面创建java文件，<strong>文件名要和类名相同</strong>。</p><p>创建HelloWorld.java文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch HelloWorld.java</span><br></pre></td></tr></table></figure><p>HelloWorld.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中的<code>String args[]</code>和<code>String[] args</code>都可以，但是还是推荐使用<code>String[] args</code>以避免歧义。</p><h3 id="编译并运行"><a href="#编译并运行" class="headerlink" title="编译并运行"></a>编译并运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将java文件编译为class字节码文件</span></span><br><span class="line">javac HelloWorld.java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行，无需加.class扩展名</span></span><br><span class="line">java HelloWorld</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="java体系"><a href="#java体系" class="headerlink" title="java体系"></a>java体系</h3><p>java有三个体系：Java EE（企业版）,Java SE（标准版）,Java ME（微型版）。<br>我使用了Java SE的jdk。</p><h3 id="java特性"><a href="#java特性" class="headerlink" title="java特性"></a>java特性</h3><ul><li>简单</li><li>面向对象</li><li>分布式</li><li>健壮性</li><li>安全</li><li>体系结构中立</li><li>可移植</li><li>解释型</li><li>高性能</li><li>多线程</li><li>动态</li></ul><h3 id="java历史"><a href="#java历史" class="headerlink" title="java历史"></a>java历史</h3><p>1995年5月23日，Java语言诞生</p><h3 id="java开发工具"><a href="#java开发工具" class="headerlink" title="java开发工具"></a>java开发工具</h3><p>硬件要求：内存1G以上。<br>系统要求：linux、macos、windows。<br>JDK：7、8…<br>编辑器：notepad、sublime text（收费）、vscode（开源且免费）等等。<br>IDE：eclipse（开源且免费）、idea（收费）等等。</p><p>编辑器/IDE这里我主要使用vscode和idea。</p><h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><p>开发java需要在机器上安装<a href="https://www.oracle.com/java/technologies/javase-downloads.html">oracle jdk</a>（java开发工具包）或者<a href="http://openjdk.java.net/">OpenJDK</a>。</p><p>我这里使用Java SE 8。</p><p>查看是否安装成功：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/jdk-installation.png" alt="jdk installation"></p><p>安装成功！</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><strong>一个Java程序可以认为是一系列对象的集合</strong>，而这些对象通过彼此的方法来协同。</p><h3 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h3><p>下面十几个重要的概念：</p><ul><li>对象：对象是类的一个实例，有状态和行为。</li><li>类：是一个模板，描述一类对象的状态和行为。</li><li>方法：方法就是行为，逻辑运算、数据修改等所有动作都是在方法中修改的。</li><li>实例变量：每个对象都有独特的实例变量，对象的状态由实例变量的值决定。</li></ul><h3 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h3><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 第一个Java程序</span></span><br><span class="line"><span class="comment">     * 它将打印字符串 Hello World</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>); <span class="comment">// 打印 Hello World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存 编译 运行：</p><ol><li>创建文件：<code>HelloWorld.java</code></li><li>编写代码</li><li>编译：<code>javac HelloWorld.java</code></li><li>运行：<code>java HelloWorld</code></li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>几条tips：</p><ol><li>java大小写敏感。</li><li>类名首字母大写，并且如果类名是由多个单词组成，那么每个单词首字母都要大写。</li><li>方法名以小写开头，采用驼峰式命名。</li><li>java文件名和类名要相同。</li><li>主方法入口：<code>public static void main(String[] args){}</code>，在最后的<code>{}</code>中编写代码。</li></ol><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>类名、变量名、方法名都叫做<strong>标识符</strong>。</p><p>标识符规则：</p><ol><li>只能以A-Z,a-z,$,_开始。</li><li>第一个字符之后可以用A-Z,a-z,$,_以及数组。</li><li>关键字不能作为标识符。</li><li>标识符大小写敏感。</li></ol><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>java中的修饰符用来修饰类中的属性和方法。</p><p>修饰符种类：</p><ul><li>访问控制修饰符：default,public,protected,private</li><li>非访问控制修饰符：final,abstract,static,synchronized</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>java变量类型：</p><ul><li>局部变量</li><li>类变量（静态变量）</li><li>成员变量（非静态变量）</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是存储在堆上的对象，可以保存多个同类型的变量。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>所谓枚举就是：限制了变量只能是预先设定好的值。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreshJuice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> FreshJuiceSize&#123; SMALL, MEDIUM, LARGE &#125;</span><br><span class="line">    FreshJuiceSize size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreshJuiceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FreshJuice juice = <span class="keyword">new</span> FreshJuice();</span><br><span class="line">        juice.size = FreshJuice.FreshJuiceSize.medium;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>java关键字有这些：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/java%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="java关键字"></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>支持单行、多行注释，编译器会忽略注释。<br>编译器还会忽略空白行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单行注释方法一</span></span><br><span class="line">        <span class="comment">/* 单行注释方法二 */</span></span><br><span class="line">        <span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">         * 多行注释</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>java可以使用继承来重用已存在的类，被继承的类称之为超类，派生出来的类称之为子类。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>java中的接口可以理解我对象之间相互通信的协议。</p><h3 id="关于Java的编译运行"><a href="#关于Java的编译运行" class="headerlink" title="关于Java的编译运行"></a>关于Java的编译运行</h3><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/java%E6%BA%90%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%BC%96%E8%AF%91%E5%9E%8B%E8%BF%90%E8%A1%8C%E5%8C%BA%E5%88%AB.png" alt=""></p><p>由图可见，<code>.java</code>源文件经过编译后生成<code>.class</code>字节码文件，然后交由JVM解释运行。<br>故而从性能而言，java还是不如c/cpp这些编译型语言。</p><h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><p>java的基本概念：</p><ul><li>封装</li><li>继承</li><li>多态</li><li>抽象</li><li>类</li><li>对象</li><li>实例</li><li>方法</li><li>重载</li></ul><p>对象：对象是类的一个实例，有状态和行为。<br>类：类是一个模板，描述一类对象的状态和行为。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象就是类的实例，有自己的属性和方法。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类就是对象的模板，是对对象的抽象。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  String breed;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类可以包含这几种变量：局部变量，成员变量，类变量。<br>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。<br>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。<br>类变量：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>每个类都有构造防范，如果没有定义则编译器会自动提供一个默认的构造方法。</p><p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这个构造器仅有一个参数：name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>对象是由类创建的。</p><p>如何创建对象？<br>使用关键字<code>new</code>创建新对象：</p><ol><li>首先声明一个对象。</li><li>使用new创建对象。</li><li>初始化对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">"小狗的名字是 : "</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问对象变量和方法"><a href="#访问对象变量和方法" class="headerlink" title="访问对象变量和方法"></a>访问对象变量和方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实例化对象 */</span></span><br><span class="line">Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line"><span class="comment">/* 访问类中的变量 */</span></span><br><span class="line">myPuppy.age;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">myPuppy.barking();</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> puppyAge;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">"小狗的名字是 : "</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">( <span class="keyword">int</span> age )</span></span>&#123;</span><br><span class="line">       puppyAge = age;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">( )</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"小狗的年龄为 : "</span> + puppyAge ); </span><br><span class="line">       <span class="keyword">return</span> puppyAge;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">/* 创建对象 */</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line">      <span class="comment">/* 通过方法来设定age */</span></span><br><span class="line">      myPuppy.setAge( <span class="number">2</span> );</span><br><span class="line">      <span class="comment">/* 调用另一个方法获取age */</span></span><br><span class="line">      myPuppy.getAge( );</span><br><span class="line">      <span class="comment">/*你也可以像下面这样访问成员变量 */</span></span><br><span class="line">      System.out.println(<span class="string">"变量值 : "</span> + myPuppy.puppyAge ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/java-puppy.png" alt=""></p><h3 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h3><ul><li>一个源文件只能有一个public类。</li><li>一个源文件可以有多个非public类。</li><li>源文件名要和public类名相同。</li><li>如果一个类定义在某个包中，那么package语句要在源文件首行。</li><li>如果源文件包含import语句，import应该放在package语句和类定义之间。如果没有package语句则import要放在源文件最前面。</li><li>import和package对源文件中定义的所有类都有效，在同一源文件中，不能给不同的类不同的包声明。</li></ul><p>类有若干种访问级别，并且类也分不同的类型：抽象类和 final 类等。<br>还有特殊的类比如内部类和匿名类。</p><h3 id="java包"><a href="#java包" class="headerlink" title="java包"></a>java包</h3><p>包用来对类和接口分类。</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>实例：下面代码将会使编译器载入<code>java_installation/java/io</code>路径下的所有类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>现在创建两个类：Employee和EmployeeTest，Employee类没有主函数，EmployeeTest有主函数。这里EmployeeTest调用了Employee的属性和方法。</p><p>Employee.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">   String name;</span><br><span class="line">   <span class="keyword">int</span> age;</span><br><span class="line">   String designation;</span><br><span class="line">   <span class="keyword">double</span> salary;</span><br><span class="line">   <span class="comment">// Employee 类的构造器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 设置age的值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empAge</span><span class="params">(<span class="keyword">int</span> empAge)</span></span>&#123;</span><br><span class="line">      age =  empAge;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 设置designation的值*/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empDesignation</span><span class="params">(String empDesig)</span></span>&#123;</span><br><span class="line">      designation = empDesig;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 设置salary的值*/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empSalary</span><span class="params">(<span class="keyword">double</span> empSalary)</span></span>&#123;</span><br><span class="line">      salary = empSalary;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 打印信息 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"名字:"</span>+ name );</span><br><span class="line">      System.out.println(<span class="string">"年龄:"</span> + age );</span><br><span class="line">      System.out.println(<span class="string">"职位:"</span> + designation );</span><br><span class="line">      System.out.println(<span class="string">"薪水:"</span> + salary);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">/* 使用构造器创建两个对象 */</span></span><br><span class="line">      Employee empOne = <span class="keyword">new</span> Employee(<span class="string">"RUNOOB1"</span>);</span><br><span class="line">      Employee empTwo = <span class="keyword">new</span> Employee(<span class="string">"RUNOOB2"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 调用这两个对象的成员方法</span></span><br><span class="line">      empOne.empAge(<span class="number">26</span>);</span><br><span class="line">      empOne.empDesignation(<span class="string">"高级程序员"</span>);</span><br><span class="line">      empOne.empSalary(<span class="number">1000</span>);</span><br><span class="line">      empOne.printEmployee();</span><br><span class="line"> </span><br><span class="line">      empTwo.empAge(<span class="number">21</span>);</span><br><span class="line">      empTwo.empDesignation(<span class="string">"菜鸟程序员"</span>);</span><br><span class="line">      empTwo.empSalary(<span class="number">500</span>);</span><br><span class="line">      empTwo.printEmployee();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac EmployeeTest.java</span><br><span class="line">java EmployeeTest</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">名字:RUNOOB1</span><br><span class="line">年龄:26</span><br><span class="line">职位:高级程序员</span><br><span class="line">薪水:1000.0</span><br><span class="line">名字:RUNOOB2</span><br><span class="line">年龄:21</span><br><span class="line">职位:菜鸟程序员</span><br><span class="line">薪水:500.0</span><br></pre></td></tr></table></figure><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>变量就是用来存储数据的，java创建变量的时候会向内存申请空间。<br>内存管理系统根据变量的类型为其分配内存空间，改内存空间仅能用于存储改类型的数据。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申请一个内存空间，类型为int，并将数字7存入</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><!-- more --><p>java两大数据类型：</p><ul><li>内置数据类型</li><li>引用数据类型</li></ul><h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><p>java内置了8中基本数据类型，其中有6种数字数据类型（4个整型+2个浮点型），一个字符数据类型，一个布尔型。</p><ol><li>byte</li></ol><p>byte类型是8位、有符号、二进制补码表示的整数。<br>最小值是-128（-2^7），最大值是127（2^7-1），默认值为0。<br>byte类型的用处是节约空间，因为byte类型的空间占用只有int类型的1/4，主要是代替整数。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>short</li></ol><p>short类型是16位、有符号、二进制补码表示的整数。<br>最小值是-32768（-2^15），最大值是32767（2^15 - 1），默认值为0。<br>一个short变量的空间占用是int类型的1/2。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>int</li></ol><p>int类型是32位、有符号、二进制补码表示的整数。<br>最小值是-2,147,483,648（-2^31），最大值是2,147,483,647（2^31 - 1），默认值为0。<br>一般整型变量默认为int类型。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>long</li></ol><p>long类型是64位、有符号的、二进制补码表示的整数。<br>最小值是-9,223,372,036,854,775,808（-2^63），最大值是9,223,372,036,854,775,807（2^63 -1），默认值为0L。<br>long类型主要是用在对于数字需求比较大的系统上。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大小写皆可，不过为了区分它和1，建议采用大写的L</span></span><br><span class="line"><span class="keyword">long</span> a = <span class="number">100000L</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>float</li></ol><p>float类型是单精度、32位、符合IEEE754标准的浮点数。<br>float在存储大型浮点数组的时候可以节省内存空间。<br>默认值为0.0f。<br>浮点数不能用于表示精确的值。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">234.5f</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li>double</li></ol><p>double类型是双精度的、64位、符合IEEE754标准的浮点数。<br>浮点数默认类型为double类型。<br>double也不能表示精确的值。<br>默认值0.0d</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 =<span class="number">123.4</span>;</span><br></pre></td></tr></table></figure><ol start="7"><li>boolean</li></ol><p>boolean类型是表示一个比特的信息。<br>boolean取值只有<code>true</code>和<code>false</code>。<br>默认值<code>false</code>。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> opened = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><ol start="8"><li>char</li></ol><p>char类型是一个单一的16位unicode字符。<br>最小值<code>\u0000</code>（即为0），最大值<code>\uffff</code>（即为65,535）。<br>char类型可以存储任意字符。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> words = <span class="string">'this'</span>;</span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimitiveTypeTest</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// byte  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：byte 二进制位数："</span> + Byte.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Byte"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Byte.MIN_VALUE="</span> + Byte.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Byte.MAX_VALUE="</span> + Byte.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// short  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：short 二进制位数："</span> + Short.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Short"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Short.MIN_VALUE="</span> + Short.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Short.MAX_VALUE="</span> + Short.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// int  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：int 二进制位数："</span> + Integer.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Integer"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Integer.MIN_VALUE="</span> + Integer.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Integer.MAX_VALUE="</span> + Integer.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// long  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：long 二进制位数："</span> + Long.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Long"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Long.MIN_VALUE="</span> + Long.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Long.MAX_VALUE="</span> + Long.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// float  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：float 二进制位数："</span> + Float.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Float"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Float.MIN_VALUE="</span> + Float.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Float.MAX_VALUE="</span> + Float.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// double  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：double 二进制位数："</span> + Double.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Double"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Double.MIN_VALUE="</span> + Double.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Double.MAX_VALUE="</span> + Double.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// char  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：char 二进制位数："</span> + Character.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Character"</span>);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">"最小值：Character.MIN_VALUE="</span>  </span><br><span class="line">                + (<span class="keyword">int</span>) Character.MIN_VALUE);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">"最大值：Character.MAX_VALUE="</span>  </span><br><span class="line">                + (<span class="keyword">int</span>) Character.MAX_VALUE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">基本类型：byte 二进制位数：8</span><br><span class="line">包装类：java.lang.Byte</span><br><span class="line">最小值：Byte.MIN_VALUE&#x3D;-128</span><br><span class="line">最大值：Byte.MAX_VALUE&#x3D;127</span><br><span class="line"></span><br><span class="line">基本类型：short 二进制位数：16</span><br><span class="line">包装类：java.lang.Short</span><br><span class="line">最小值：Short.MIN_VALUE&#x3D;-32768</span><br><span class="line">最大值：Short.MAX_VALUE&#x3D;32767</span><br><span class="line"></span><br><span class="line">基本类型：int 二进制位数：32</span><br><span class="line">包装类：java.lang.Integer</span><br><span class="line">最小值：Integer.MIN_VALUE&#x3D;-2147483648</span><br><span class="line">最大值：Integer.MAX_VALUE&#x3D;2147483647</span><br><span class="line"></span><br><span class="line">基本类型：long 二进制位数：64</span><br><span class="line">包装类：java.lang.Long</span><br><span class="line">最小值：Long.MIN_VALUE&#x3D;-9223372036854775808</span><br><span class="line">最大值：Long.MAX_VALUE&#x3D;9223372036854775807</span><br><span class="line"></span><br><span class="line">基本类型：float 二进制位数：32</span><br><span class="line">包装类：java.lang.Float</span><br><span class="line">最小值：Float.MIN_VALUE&#x3D;1.4E-45</span><br><span class="line">最大值：Float.MAX_VALUE&#x3D;3.4028235E38</span><br><span class="line"></span><br><span class="line">基本类型：double 二进制位数：64</span><br><span class="line">包装类：java.lang.Double</span><br><span class="line">最小值：Double.MIN_VALUE&#x3D;4.9E-324</span><br><span class="line">最大值：Double.MAX_VALUE&#x3D;1.7976931348623157E308</span><br><span class="line"></span><br><span class="line">基本类型：char 二进制位数：16</span><br><span class="line">包装类：java.lang.Character</span><br><span class="line">最小值：Character.MIN_VALUE&#x3D;0</span><br><span class="line">最大值：Character.MAX_VALUE&#x3D;65535</span><br></pre></td></tr></table></figure><p>java中各个类型的默认值：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/datatype-defaultvalue.png" alt="default value"></p><p>实例：输出各个数据类型的默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> bool;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span> by;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> l;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">short</span> sh;</span><br><span class="line">    <span class="keyword">static</span> String str;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bool :"</span> + bool);</span><br><span class="line">        System.out.println(<span class="string">"Byte :"</span> + by);</span><br><span class="line">        System.out.println(<span class="string">"Character:"</span> + ch);</span><br><span class="line">        System.out.println(<span class="string">"Double :"</span> + d);</span><br><span class="line">        System.out.println(<span class="string">"Float :"</span> + f);</span><br><span class="line">        System.out.println(<span class="string">"Integer :"</span> + i);</span><br><span class="line">        System.out.println(<span class="string">"Long :"</span> + l);</span><br><span class="line">        System.out.println(<span class="string">"Short :"</span> + sh);</span><br><span class="line">        System.out.println(<span class="string">"String :"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Bool     :false</span><br><span class="line">Byte     :0</span><br><span class="line">Character:</span><br><span class="line">Double   :0.0</span><br><span class="line">Float    :0.0</span><br><span class="line">Integer  :0</span><br><span class="line">Long     :0</span><br><span class="line">Short    :0</span><br><span class="line">String   :null</span><br></pre></td></tr></table></figure><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型指向一个对象，指向对象的变量是引用变量。<br>这些变量在声明的时候被指定为一个特定类型比如Puppy等等，一旦声明就不能改变。</p><p>对象、数组都是引用数据类型。</p><p>所有引用类型默认值都是<code>null</code>。</p><p>一个引用变量可以用来引用任何与之兼容的类型。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Site site = <span class="keyword">new</span> Site(<span class="string">"cool"</span>);</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量也就是不能被修改的量。</p><p>如何定义常量？<br>使用<code>final</code>关键字修饰常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415</span>;</span><br></pre></td></tr></table></figure><p>正如上面缩写，常量名为了便于识别一般使用全大写。</p><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p><strong>字面量</strong>：其实，字面量的意思就是“字面上的量”，比如java中的一个数字<code>66</code>就是一个字面量，还有<code>&quot;this is a line of string!&quot;</code>就是一个字面量，还比如<code>true</code>和<code>false</code>也是字面量。</p><p>字面量表示的是如何表达一个值，所以在声明并赋值变量的时候，赋值符号<code>=</code>后面的<code>;</code>前面的就是字面量。</p><p>byte,int,long,short都可以用十进制、八进制、十六进制表示。<br>前缀<code>0</code>表示八进制，前缀<code>0x</code>表示十六进制。<br>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> decimal = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> octal = <span class="number">0144</span>;</span><br><span class="line"><span class="keyword">int</span> hexa =  <span class="number">0x64</span>;</span><br></pre></td></tr></table></figure><p>java的字符串字面量是由两个引号包裹的字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello World"</span></span><br><span class="line"><span class="string">"two\nlines"</span></span><br><span class="line"><span class="string">"\"This is in quotes\""</span></span><br></pre></td></tr></table></figure><p>除此之外，字符串还可以包含任意unicode字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">'\u0001'</span>;</span><br><span class="line">String a = <span class="string">"\u0001"</span>;</span><br></pre></td></tr></table></figure><p>转义字符：<br>换行：<code>\n</code><br>回车：<code>\r</code><br>换页符：<code>\f</code><br>退格：<code>\b</code><br>空字符：<code>\0</code><br>空格：<code>\s</code><br>制表符：<code>\t</code><br>双引号：<code>\&quot;</code><br>单引号：<code>\&#39;</code><br>反斜杠：<code>\\</code><br>八进制字符：<code>\ddd</code><br>16进制unicode字符：<code>\uxxx</code></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>整型、常量、字符型数据可以混合运算。<br>转换从低级到高级。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低级  --------------------------------------- 高级</span><br><span class="line">byte,short,char —&gt; int —&gt; long —&gt; float —&gt; double</span><br></pre></td></tr></table></figure><p>数据类型转换规则：</p><ul><li>对boolean类型不能转换。</li><li>不能将对象类型转换为不相关类的对象。</li><li>将容量大的类型转换为小容量的类型的时候需要使用强制类型转换。</li><li>转换可能导致数据溢出或者精度损失。</li><li>浮点数转换到整数是通过舍弃小数得到的。</li></ul><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个int型变量i并赋值128</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对i进行强制类型转换为byte型，因为byte最大值为127，故而强制类型转换会导致溢出</span></span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浮点数转换为整数</span></span><br><span class="line">(<span class="keyword">int</span>)<span class="number">12.3</span> == <span class="number">12</span>;</span><br><span class="line">(<span class="keyword">int</span>)-<span class="number">45.89f</span> == -<span class="number">45</span></span><br></pre></td></tr></table></figure><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>规则：转换前的数据类型的位数要低于转换后的数据类型。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZiDongLeiZhuan</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            <span class="keyword">char</span> c1=<span class="string">'a'</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="keyword">int</span> i1 = c1;<span class="comment">//char自动类型转换为int</span></span><br><span class="line">            System.out.println(<span class="string">"char自动类型转换为int后的值等于"</span>+i1);</span><br><span class="line">            <span class="keyword">char</span> c2 = <span class="string">'A'</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="keyword">int</span> i2 = c2+<span class="number">1</span>;<span class="comment">//char 类型和 int 类型计算</span></span><br><span class="line">            System.out.println(<span class="string">"char类型和int计算后的值等于"</span>+i2);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char自动类型转换为int后的值等于97</span><br><span class="line">char类型和int计算后的值等于66</span><br></pre></td></tr></table></figure><p>上面字符对应的数字要查ASCII码。</p><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>规则：转换的数据类型必须兼容。</p><p>格式：新类型 新变量名 = (新类型)旧变量名<br>比如：<code>byte b = (byte)a;</code></p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiangZhiZhuanHuan</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i1;<span class="comment">//强制类型转换为byte</span></span><br><span class="line">        System.out.println(<span class="string">"int强制类型转换为byte后的值等于"</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int强制类型转换为byte后的值等于123</span><br></pre></td></tr></table></figure><h4 id="隐含强制类型转换"><a href="#隐含强制类型转换" class="headerlink" title="隐含强制类型转换"></a>隐含强制类型转换</h4><ul><li>整数的默认类型是int</li><li>浮点型不存在隐含强制类型转换，因为定义float/double的时候必须在浮点数后面加上<code>f/F</code>或者<code>d/D</code>。</li></ul><hr><p>Day01: 2020.09.04</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Day01: 2020.09.04&lt;/p&gt;
&lt;p&gt;今天开始复习java，一天复习一点。&lt;/p&gt;
&lt;p&gt;复习资料来自：&lt;a href=&quot;https://www.runoob.com/java/java-tutorial.html&quot;&gt;菜鸟教程：java&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;Java是Sun Microsystems在1995年发布的高级程序设计语言。&lt;/p&gt;
&lt;p&gt;Sun Microsystems是IT及互联网技术服务公司（已被甲骨文收购）Sun Microsystems 创建于1982年。主要产品是工作站及服务器。&lt;/p&gt;
&lt;p&gt;Java可以运行在ARM和x86多个平台上，比如windows、macos、linux、unix等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://herotiga.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>所谓面向过程、面向对象以及函数式语言的误区</title>
    <link href="https://herotiga.github.io/2020/09/03/%E6%89%80%E8%B0%93%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80/"/>
    <id>https://herotiga.github.io/2020/09/03/%E6%89%80%E8%B0%93%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80/</id>
    <published>2020-09-02T16:00:22.000Z</published>
    <updated>2020-09-17T14:17:06.168Z</updated>
    
    <content type="html"><![CDATA[<p>java是面向对象语言？clang是面向过程语言？lisp是函数式编程语言？</p><a id="more"></a><p>比如python和javascript，我们既可以用他们写出函数式编程的代码，也可以用他们写出面向对象风格的代码，还可以写出两者兼具的代码。</p><p>即使是java也可以用其写出函数式风格的代码。</p><p>还有common lisp这种函数式编程语言的代表也可以写出面向对象的代码。</p><p>因此，一刀切的将语言分为面向对象、面向过程、函数式是不科学的。</p><p>其实每一门语言都拥有多种特性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java是面向对象语言？clang是面向过程语言？lisp是函数式编程语言？&lt;/p&gt;
    
    </summary>
    
    
      <category term="cs" scheme="https://herotiga.github.io/categories/cs/"/>
    
    
  </entry>
  
  <entry>
    <title>所谓编译型语言和解释型语言的误区</title>
    <link href="https://herotiga.github.io/2020/09/02/%E6%89%80%E8%B0%93%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%AF%E5%8C%BA/"/>
    <id>https://herotiga.github.io/2020/09/02/%E6%89%80%E8%B0%93%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%AF%E5%8C%BA/</id>
    <published>2020-09-02T15:42:59.000Z</published>
    <updated>2020-09-17T14:16:54.367Z</updated>
    
    <content type="html"><![CDATA[<p>什么是解释型语言？什么是编译型语言？<br>python是解释型语言？clang是编译型语言？java是解释型语言？<br>no，no，no。<br>其实这种根深蒂固的说法是<strong>错的</strong>。</p><a id="more"></a><p>一门编程语言本身并不具有是解释型语言还是编译型的属性，准确的说法是：<strong>某个语言的特定实现是编译型或者解释型的。</strong></p><p>比如javascript这个语言，它既有解释型的实现比如早期浏览器的js引擎，也有编译型的实现比如chrome的v8引擎。</p><p>再拿一个后端的语言scheme为例，chichen scheme为scheme提供了两套实现方式，一个是解释器csi，另一个是编译器csc。</p><p>故而，所谓的编译型、解释型并不是一门语言本身固有的属性，而是语言实现的特性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是解释型语言？什么是编译型语言？&lt;br&gt;python是解释型语言？clang是编译型语言？java是解释型语言？&lt;br&gt;no，no，no。&lt;br&gt;其实这种根深蒂固的说法是&lt;strong&gt;错的&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cs" scheme="https://herotiga.github.io/categories/cs/"/>
    
    
  </entry>
  
  <entry>
    <title>对于当前社会中的学习的思考</title>
    <link href="https://herotiga.github.io/2020/09/01/think-about-learning/"/>
    <id>https://herotiga.github.io/2020/09/01/think-about-learning/</id>
    <published>2020-09-01T14:09:15.000Z</published>
    <updated>2020-09-25T18:35:28.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>人类文明从工业革命开始直到现在的移动互联网时代以及即将到来的人工智能时代，其两百年间所取得的科学技术的成就远超过去几千年的总和。</p><p>在科学技术飞速发展的同时，借助于互联网和移动互联网的兴起，大量的知识和经验在其中被不断的输出到人类社会的知识库中，并且借助于终端设备和网络的普及使得大量的人可以以极低的成本和门槛接触到大量的专业知识。</p><p>同时，大量的专业知识也在其中得以被高速的迭代升级。<br>举个例子：两百年前的一个普通人只要学会纺织或者打铁就能靠此技能安生立命一辈子。但是当代社会变化速度过快，几年前的技能已经不能满足当前的社会要求了，前端的发展甚至几个月都会又一次巨变。</p><a id="more"></a><h2 id="持续学习、持续实践"><a href="#持续学习、持续实践" class="headerlink" title="持续学习、持续实践"></a>持续学习、持续实践</h2><p>软件开发中有一个概念叫持续集成(CI)、持续部署(CD)。<br>就我个人而言，我希望我自己可以做到持续学习(CL)、持续实践(CP)。<br>持续学习、持续实践是什么意思呢？就是持续的吸收工作所需要的技术和适应当前社会生存所需要的各种技能和心态的调整，并且在持续的学习中进行对固化思维的持续更新。<br>再在实际工作和生活中将学习的内容得以实践。</p><h2 id="终身学习"><a href="#终身学习" class="headerlink" title="终身学习"></a>终身学习</h2><p>由持续学习便引来了终身学习。</p><p>大多数人怎么想我不管，对我来说，人生不只是：毕业&gt;结婚&gt;生娃&gt;养娃&gt;教育娃&gt;等娃结婚&gt;娃为自己养老送终，这么简单。</p><p>从很早我就发现我和常人不一样，我对自己的判断是：我和人群中的大多数人不一样，我是人群中能够翻出一些水花的人。</p><p>所以终身学习就成了我去年开始的slogan。我以前从来没立过slogna，但是我发现我现在需要终身学习，所以slogan就是博客的profile上面的那句”A lifelong learner”。</p><h2 id="学习什么"><a href="#学习什么" class="headerlink" title="学习什么"></a>学习什么</h2><p>对于我一个互联网行业的从业者而言，学习的内容除了更新的技术和其他计算机技术之外，还有如下内容：</p><ul><li>对于行业发展趋势的预测和判断。</li><li>对于国家政策推动产业的了解。</li><li>对于未来人们生活方式变化的了解。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;人类文明从工业革命开始直到现在的移动互联网时代以及即将到来的人工智能时代，其两百年间所取得的科学技术的成就远超过去几千年的总和。&lt;/p&gt;
&lt;p&gt;在科学技术飞速发展的同时，借助于互联网和移动互联网的兴起，大量的知识和经验在其中被不断的输出到人类社会的知识库中，并且借助于终端设备和网络的普及使得大量的人可以以极低的成本和门槛接触到大量的专业知识。&lt;/p&gt;
&lt;p&gt;同时，大量的专业知识也在其中得以被高速的迭代升级。&lt;br&gt;举个例子：两百年前的一个普通人只要学会纺织或者打铁就能靠此技能安生立命一辈子。但是当代社会变化速度过快，几年前的技能已经不能满足当前的社会要求了，前端的发展甚至几个月都会又一次巨变。&lt;/p&gt;
    
    </summary>
    
    
      <category term="methodology" scheme="https://herotiga.github.io/categories/methodology/"/>
    
    
  </entry>
  
  <entry>
    <title>短链接原理及设计</title>
    <link href="https://herotiga.github.io/2020/08/31/short-url/"/>
    <id>https://herotiga.github.io/2020/08/31/short-url/</id>
    <published>2020-08-30T17:59:44.000Z</published>
    <updated>2020-09-06T12:38:40.017Z</updated>
    
    <content type="html"><![CDATA[<p>经常看到社交app以及短信中出现推销的链接很短。<br>那么这是如何做到的呢？还有为什么要将长链接做短呢？<br>这篇文章就探索一下什么是短链接，短链接的原理是什么，以及如何设计一个高性能的短链接。</p><a id="more"></a><h2 id="什么是短链接"><a href="#什么是短链接" class="headerlink" title="什么是短链接"></a>什么是短链接</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>这是一个真实的短链接：</p><p><a href="https://dwz.cn/4kuYDdGu">https://dwz.cn/4kuYDdGu</a></p><p>点击跳转后其真实的长链接为：</p><p><a href="https://app.smzdm.com/xiazai/?json=%7B%22url%22%3A%22https%3A%2F%2Ftest.smzdm.com%2Fp%2F10192%2F%3Futm_source%3D083002%26utm_medium%3D083002%26utm_campaign%3D083002%22%2C%22channel_name%22%3A%22test%22%2C%22article_id%22%3A%2210192%22%2C%22linkVal%22%3A%2210192%22%2C%22frompage%22%3A%22message%22%2C%22targetpage%22%3A%22test%22%2C%22roll_type%22%3A%222%22%2C%22download%22%3A%220%22%2C%22open_from%22%3A%22message%22%2C%22open_target%22%3A%22test%22%7D">https://app.smzdm.com/xiazai/?json=%7B%22url%22%3A%22https%3A%2F%2Ftest.smzdm.com%2Fp%2F10192%2F%3Futm_source%3D083002%26utm_medium%3D083002%26utm_campaign%3D083002%22%2C%22channel_name%22%3A%22test%22%2C%22article_id%22%3A%2210192%22%2C%22linkVal%22%3A%2210192%22%2C%22frompage%22%3A%22message%22%2C%22targetpage%22%3A%22test%22%2C%22roll_type%22%3A%222%22%2C%22download%22%3A%220%22%2C%22open_from%22%3A%22message%22%2C%22open_target%22%3A%22test%22%7D</a></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>发现了什么？</p><p><strong>原本的长链接真的太长了！有没有？</strong></p><p>故而，短链接的优点就是短，所以经常出现在对链接长度有限制的平台比如微博。<br>其实短链接还有其他的优点，不过都是基于短链接长度短而来的衍生优势。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>那么问题来了，短链接带来的缺点又有什么？<br>是响应时间的变长，其实短链接是靠时间换空间的一个东西。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们分析一下刚才点击短链接到最终得到真实链接的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/short-url.png" alt="原理"></p><p>客户端点击短链接后访问短链接服务器，服务器302暂时重定向到真实的url。<br>所以说短链接是用时间换空间。</p><p>那么服务器用301还是302呢？<br>用302。为什么？</p><blockquote><ul><li>301，代表 <strong>永久重定向</strong>，也就是说第一次请求拿到长链接后，下次浏览器再去请求短链的话，不会向短网址服务器请求了，而是直接从浏览器的缓存里拿，这样在 server 层面就无法获取到短网址的点击数了，如果这个链接刚好是某个活动的链接，也就无法分析此活动的效果。所以我们一般不采用 301。</li><li>302，代表 <strong>临时重定向</strong>，也就是说每次去请求短链都会去请求短网址服务器（除非响应中用 Cache-Control 或 Expired 暗示浏览器缓存）,这样就便于 server 统计点击数，所以虽然用 302 会给 server 增加一点压力，但在数据异常重要的今天，这点代码是值得的，所以推荐使用 302！</li></ul></blockquote><h2 id="短链接的设计"><a href="#短链接的设计" class="headerlink" title="短链接的设计"></a>短链接的设计</h2><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>我们对比长链接和短链接，发现有一个共同点：都是由域名+域名后面一串字符构成。<br>其实也就是将长链接域名后面的一长串映射成为了短链接的一短串。<br>也就是说，我们的任务就是将长的那一串经可能变短。</p><p>想到了什么？<br>对，哈希算法可以做到。<br>不过常见的md5、sha系列的输出都太长，md5输出是128bit，sha1已经是输出最短的了也有160bit的输出。<br>这个长度的输出太长了，而且md5，sha等哈希算法都是加密算法，所以对服务器的性能消耗较高，故而不适合作为长链接映射为短链接的哈希算法。</p><p>MurmurHash算法是一种非加密型哈希函数，适用于一般的哈希检索操作。与其它流行的哈希函数相比，对于规律性较强的 key，MurmurHash的随机分布特征表现更良好，非加密也就意味着MurmurHash的性能比md5等好得多。</p><p>MurmurHash算法可选两种长度：32bit和128bit。<br>32bit已经很够用了。</p><p>MurmurHash的输出是一串十进制数，可以将其转为62进制从而进一步压缩。</p><h3 id="短链接工具"><a href="#短链接工具" class="headerlink" title="短链接工具"></a>短链接工具</h3><ol><li><a href="https://sina.lt/">https://sina.lt/</a></li><li><a href="http://tool.chinaz.com/tools/dwz.aspx">http://tool.chinaz.com/tools/dwz.aspx</a></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzA5NDIzNzY1OQ==&mid=2735615797&idx=1&sn=f43aab3ad3b42b1528a82a82dfbf6e28&chksm=b6ab298181dca0977c6a5c62c3069d7c635ce7b575952151a9f1a4ad5c91505c93889df6d23f&scene=21#wechat_redirect">高性能短链接设计：长链接</a></li><li><a href="http://dwz.date/cp5D">高性能短链接设计：短链接</a></li></ol><p>怎么样？打开短链接是不是感觉比长链接要慢一点？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常看到社交app以及短信中出现推销的链接很短。&lt;br&gt;那么这是如何做到的呢？还有为什么要将长链接做短呢？&lt;br&gt;这篇文章就探索一下什么是短链接，短链接的原理是什么，以及如何设计一个高性能的短链接。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://herotiga.github.io/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>解决github.io子域名dns污染</title>
    <link href="https://herotiga.github.io/2020/08/07/github-dns%E6%B1%A1%E6%9F%93/"/>
    <id>https://herotiga.github.io/2020/08/07/github-dns%E6%B1%A1%E6%9F%93/</id>
    <published>2020-08-06T16:12:09.000Z</published>
    <updated>2020-09-10T08:17:05.049Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>上个月月末开始就发现本博客的herotiga.github.io域名无法访问了，于是我试着打开了各个大佬的github.io的博客果然都一样，当时就发觉这是一场有组织有纪律的dns污染行为。</p></div></article><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>从v2ex反应的情况来看，默认自动从ISP获取的dns都被污染了，所以手动更换一个公共dns服务器即可。</p><p>我选择了 <code>114.114.114.114</code> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;上个月月末开始就发现本博客的herotiga.github.io域名无法访问了，于是我试着打开了各个大佬的github.io的博客果然都一样，当时就发觉这是一场有组织有纪律的dns污染行为。&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://herotiga.github.io/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>linux使用技巧</title>
    <link href="https://herotiga.github.io/2020/08/06/linux-tips-01/"/>
    <id>https://herotiga.github.io/2020/08/06/linux-tips-01/</id>
    <published>2020-08-06T05:48:28.000Z</published>
    <updated>2020-09-02T09:24:39.271Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些linux使用技巧。</p><a id="more"></a><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><ol><li>!!</li></ol><p><code>!!</code>命令指向最近执行的一条命令，当我们使用<code>apt-get</code>安装软件的时候有时候会忘了写<code>sudo</code>，这个时候只需要如下既可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo !!</span><br></pre></td></tr></table></figure><ol start="2"><li>cd -</li></ol><p>返回刚才的目录。</p><ol start="3"><li>^old^new</li></ol><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"goed"</span></span><br></pre></td></tr></table></figure><p>错误将good写成了goed。</p><p>只需要<code>^e^o</code>既可。</p><p>代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"goed"</span></span><br><span class="line">^e^o</span><br></pre></td></tr></table></figure><p>回车既可。</p><ol start="4"><li>man ascii</li></ol><p>显示ascii码表。</p><p>有时候需要用到ascii码的时候就不需要打开浏览器然后再打开google搜索了。</p><ol start="5"><li>ctrl-x e</li></ol><p>快速启动默认编辑器。</p><ol start="6"><li>netstat -tlnp</li></ol><p>列出本机进程监听的端口号。</p><ol start="7"><li>tail  -f  /path/to/file.log |  sed  ‘/^Finished: SUCCESS$/  q’</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail  -f  /path/to/file.log |  sed  <span class="string">'/^Finished: SUCCESS$/  q'</span></span><br></pre></td></tr></table></figure><p>当log文件里面出现<code>Finished: SUCCESS</code>的时候退出<code>tail</code>，用于实时监控并且过滤log是否出现了某条记录。</p><ol start="8"><li>ssh user@server bash &lt; /path/to/local/script.sh</li></ol><p>用到了输入重定向。<br>在远程服务器运行本地一个脚本文件。</p><ol start="9"><li>screen -d -m -S some_name ping my_router</li></ol><p>后台运行一段不终止的程序，可以随时查看它的状态。</p><p>-d -m参数启动分离模式，-S指定一个session标识。</p><p>可以通过-R命令重新挂载一个标识的session。</p><p>参考：<code>man screen</code>或者<code>tldr screen</code></p><ol start="10"><li>wget</li></ol><p>下载一个网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --random-wait -r -p -e robots=off -U mozilla https://www.baidu.com</span><br></pre></td></tr></table></figure><ol start="11"><li>curl</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com</span><br></pre></td></tr></table></figure><ol start="12"><li>lsof -i</li></ol><p>实时查看本机网络服务活动状态。</p><ol start="13"><li>python -m SimpleHTTPServer</li></ol><p>将当前目录设置为HTTP服务目录，并可以通过8000端口访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认运行在8000端口</span></span><br><span class="line">http://localhost:8000/</span><br></pre></td></tr></table></figure><ol start="14"><li>列出我最常用的十条命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> |  awk  <span class="string">'&#123;CMD[$2]++;count++;&#125; END &#123;  for  (a  in  CMD  )print  CMD[a]</span></span><br><span class="line"><span class="string">" "  CMD[a]/count*100  "% " a  &#125;'</span> |  grep  -v  <span class="string">"./"</span> |  column  -c3  -s <span class="string">" "</span>  -t |</span><br><span class="line"> sort  -nr |  nl |  head  -n10</span><br></pre></td></tr></table></figure><h2 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h2><ol><li>cmatrix</li></ol><p>cmatrix是一款在命令行下显示黑客帝国中代码雨的插件，简直是中二少年的福音啊。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install cmatrix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">cmatrix</span><br></pre></td></tr></table></figure><p>cmatrix还有个进阶版叫<a href="https://github.com/will8211/unimatrix">unimatrix</a>，效果差不多，不过可配置的东西很丰富。</p><ol start="2"><li>neofetch</li></ol><p>neofetch是一款显示系统信息的工具。</p><blockquote><p>官网：<a href="https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/">https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install neofetch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><ol start="3"><li>lolcat</li></ol><p>lolcat是一款将输出信息变为彩虹色的工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install lolcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">ls -lha | lolcat</span><br></pre></td></tr></table></figure><ol start="4"><li>tldr</li></ol><p>我们知道man的替代品有info（英文手册）和cman（中文的man）。</p><p>除此之外还有tldr，tldr是直接给出了命令的常用用法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tldr ls</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些linux使用技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用curl代替postman</title>
    <link href="https://herotiga.github.io/2020/07/26/curl-postman/"/>
    <id>https://herotiga.github.io/2020/07/26/curl-postman/</id>
    <published>2020-07-26T13:27:35.000Z</published>
    <updated>2020-09-10T11:23:57.456Z</updated>
    
    <content type="html"><![CDATA[<p>curl是一个命令行工具，功能是发出请求并得到应答，最后输出到终端。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>查看源码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印在终端中</span></span><br><span class="line">curl www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输出保存为文件</span></span><br><span class="line">curl -o &lt;filename&gt; www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动跳转</span></span><br><span class="line">curl -L www.baidu.com</span><br></pre></td></tr></table></figure><ol start="2"><li>显示头信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示代码和头信息</span></span><br><span class="line">curl -i www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示头信息</span></span><br><span class="line">curl -I www.baidu.com</span><br></pre></td></tr></table></figure><ol start="3"><li>显示通信过程</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -v www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看详细信息</span></span><br><span class="line">curl --trace &lt;filename&gt; www.baidu.com</span><br><span class="line">curl --trace-ascii &lt;filename&gt; www.baidu.com</span><br></pre></td></tr></table></figure><ol start="4"><li>GET/POST</li></ol><p>GET:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl baidu.com/form.cgi?data=xxx</span><br></pre></td></tr></table></figure><p>POST:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --data <span class="string">"data=xxx"</span> baidu.com/form.cgi</span><br></pre></td></tr></table></figure><p>表单编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST--data-urlencode <span class="string">"date=April 1"</span> baidu.com/form.cgi</span><br></pre></td></tr></table></figure><ol start="5"><li>http动词</li></ol><p>默认GET</p><p>-X参数用来指定动词。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST www.baidu.com</span><br><span class="line">curl -X DELETE www.baidu.com</span><br></pre></td></tr></table></figure><ol start="6"><li>上传文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --form upload=@filename --form press=OK [URL]</span><br></pre></td></tr></table></figure><ol start="7"><li>referer</li></ol><p>该字段用于指示从哪个url跳转而来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --referer http://www.baidu.com http://www.baidu.com</span><br></pre></td></tr></table></figure><ol start="8"><li>User Agent</li></ol><p>该字段表示客户端的代理信息。</p><p>模拟用户代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user-agent <span class="string">"[User Agent]"</span> [URL]</span><br></pre></td></tr></table></figure><ol start="9"><li>cookie</li></ol><p>发送cookie：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --cookie <span class="string">"name=xxx"</span> www.baidu.com</span><br></pre></td></tr></table></figure><ol start="10"><li>增加头信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --header <span class="string">"Content-Type:application/json"</span> http://example.com</span><br></pre></td></tr></table></figure><ol start="11"><li>HTTP认证</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user name:password baidu.com</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html">http://www.ruanyifeng.com/blog/2011/09/curl.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">http://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;curl是一个命令行工具，功能是发出请求并得到应答，最后输出到终端。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>哈希碰撞</title>
    <link href="https://herotiga.github.io/2020/07/20/hash-collision/"/>
    <id>https://herotiga.github.io/2020/07/20/hash-collision/</id>
    <published>2020-07-19T16:45:49.000Z</published>
    <updated>2020-09-25T03:59:23.751Z</updated>
    
    <content type="html"><![CDATA[<p><strong>哈希函数</strong>（hash function）就是将不同的输入映射为独一无二的固定长度的哈希值。</p><p>哈希是对输入信息的一种summarize，故而存在输出相同的情况，这种情况就称之为哈希碰撞。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/hash-collision-wiki.png" alt="hash"></p><p>由于hash是压缩映射，故而必然会导致哈希碰撞。</p><p>那么如何降低哈希碰撞的概率呢？</p><p>最简单粗暴的方法就是增加哈希值的取值范围，或者说增加哈希值的长度。<br>但是更长的哈希值也意味着占用的存储空间和消耗的cpu时间也会随之增长。</p><p>我们在实际开发中要做的就是在消耗资源的量和安全性之间找到balance使得我们能在有很高安全性的同时尽可能使用较少的资源消耗。</p><h2 id="生日攻击"><a href="#生日攻击" class="headerlink" title="生日攻击"></a>生日攻击</h2><p>假设哈希值是均匀分布的，那么影响哈希碰撞的因素有以下两点：</p><ul><li>哈希值取值范围</li><li>哈希值生命周期中的计算次数</li></ul><p>在数学中有一个生日问题，就是说假设全班有n个同学，一年365天（简化模型），那么班上有同学生日为同一天的概率有多大。</p><p>答案很出人意料。如果至少两个同学生日相同的概率不超过5%，那么这个班只能有7个人。事实上，一个23人的班级有50%的概率，至少两个同学生日相同；50人班级有97%的概率，70人的班级则是99.9%的概率。</p><p>这意味着，如果哈希值的取值空间是365，只要计算23个哈希值，就有50%的可能产生碰撞。也就是说，哈希碰撞的可能性，远比想象的高。实际上，有一个近似的公式。</p><p>$$<br>\sqrt{\frac{\pi}{2} N}<br>$$</p><p>50%的哈希碰撞概率所需要的计算次数，N表示哈希的取值空间。生日问题的 N 就是365，算出来是 23.9。</p><p>这个公式告诉我们，哈希碰撞所需耗费的计算次数，跟取值空间的平方根是一个数量级。</p><p>这种利用哈希空间不足够大，而制造碰撞的攻击方法，就被称为生日攻击（birthday attack）。</p><h2 id="哈希碰撞概率公式"><a href="#哈希碰撞概率公式" class="headerlink" title="哈希碰撞概率公式"></a>哈希碰撞概率公式</h2><p>这里省略了计算过程。</p><p>$$<br>p(n, d) \approx 1-e^{\frac{-n(n-1)}{2 d}}<br>$$</p><h2 id="封装为函数"><a href="#封装为函数" class="headerlink" title="封装为函数"></a>封装为函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculate = <span class="function">(<span class="params">d, n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> exponent = (-n * (n - <span class="number">1</span>)) / (<span class="number">2</span> * d)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.E ** exponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8">https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html">http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;哈希函数&lt;/strong&gt;（hash function）就是将不同的输入映射为独一无二的固定长度的哈希值。&lt;/p&gt;
&lt;p&gt;哈希是对输入信息的一种summarize，故而存在输出相同的情况，这种情况就称之为哈希碰撞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://herotiga.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>技术周报-01</title>
    <link href="https://herotiga.github.io/2020/07/19/weekly-01/"/>
    <id>https://herotiga.github.io/2020/07/19/weekly-01/</id>
    <published>2020-07-19T11:33:33.000Z</published>
    <updated>2020-09-07T20:45:30.337Z</updated>
    
    <content type="html"><![CDATA[<p>技术周报</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;技术周报&lt;/p&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="https://herotiga.github.io/categories/weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>使用neofetch和lolcat美化输出</title>
    <link href="https://herotiga.github.io/2020/07/17/neofetch/"/>
    <id>https://herotiga.github.io/2020/07/17/neofetch/</id>
    <published>2020-07-17T03:21:39.000Z</published>
    <updated>2020-09-10T11:28:29.914Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/">https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/</a></p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install neofetch</span><br><span class="line">brew install lolcat</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用neofetch查看本机信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch</span><br></pre></td></tr></table></figure><p>使用lolcat彩虹化输出信息颜色：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lha | lolcat</span><br></pre></td></tr></table></figure><p>当然也可以使用neofetch配合lolcat将输出的本机信息彩虹化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch | lolcat</span><br></pre></td></tr></table></figure><h2 id="疗效"><a href="#疗效" class="headerlink" title="疗效"></a>疗效</h2><p>单独使用fetch：</p><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/neofetch-template.png" alt=""></p><p>fetch+lolcat：</p><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/neofetch-lolcat.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/&quot;&gt;https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>htop：一款unix交互进程管理器</title>
    <link href="https://herotiga.github.io/2020/07/08/%E5%AE%89%E8%A3%85htop/"/>
    <id>https://herotiga.github.io/2020/07/08/%E5%AE%89%E8%A3%85htop/</id>
    <published>2020-07-08T09:01:35.000Z</published>
    <updated>2020-07-08T09:14:58.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>htop - an interactive process viewer for Unix</p></blockquote><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载源码：<a href="http://hisham.hm/htop/releases/">http://hisham.hm/htop/releases/</a></p><p>下载完毕后<code>tar -zxvf</code>解包。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>进入解包完的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="疗效"><a href="#疗效" class="headerlink" title="疗效"></a>疗效</h2><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/htop%E7%96%97%E6%95%88.png" alt="htop疗效"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;htop - an interactive process viewer for Unix&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>解决termius下不支持中文的问题</title>
    <link href="https://herotiga.github.io/2020/07/04/%E8%A7%A3%E5%86%B3termius%E4%B8%8B%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://herotiga.github.io/2020/07/04/%E8%A7%A3%E5%86%B3termius%E4%B8%8B%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-04T09:59:35.000Z</published>
    <updated>2020-07-05T06:44:37.885Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>发现在termius下中文文件名乱码的问题.</p></div></article><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>插入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LANG&#x3D;en_US.UTF-8</span><br></pre></td></tr></table></figure><p>done!</p>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;发现在termius下中文文件名乱码的问题.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
</feed>
