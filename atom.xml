<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2020-09-04T13:58:35.445Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java复习笔记（一）</title>
    <link href="https://herotiga.github.io/2020/09/04/java-review-01/"/>
    <id>https://herotiga.github.io/2020/09/04/java-review-01/</id>
    <published>2020-09-04T11:11:09.000Z</published>
    <updated>2020-09-04T13:58:35.445Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始复习java，一天复习一点。</p><blockquote><p>学习内容来自：<a href="https://www.runoob.com/java/java-tutorial.html">菜鸟教程：java</a></p></blockquote><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>Java</strong>是Sun Microsystems在1995年发布的高级程序设计语言。</p><p>Sun Microsystems是IT及互联网技术服务公司（已被甲骨文收购）Sun Microsystems 创建于1982年。主要产品是工作站及服务器。</p><p>Java可以运行在ARM和x86多个平台上，比如windows、macos、linux、unix等等。</p><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>老规矩，现在写第一个java程序：HelloWorld.java</p><p>下面创建java文件，<strong>文件名要和类名相同</strong>。</p><p>创建HelloWorld.java文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch HelloWorld.java</span><br></pre></td></tr></table></figure><p>HelloWorld.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中的<code>String args[]</code>和<code>String[] args</code>都可以，但是还是推荐使用<code>String[] args</code>以避免歧义。</p><h3 id="编译并运行"><a href="#编译并运行" class="headerlink" title="编译并运行"></a>编译并运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将java文件编译为class字节码文件</span></span><br><span class="line">javac HelloWorld.java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行，无需加.class扩展名</span></span><br><span class="line">java HelloWorld</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="java体系"><a href="#java体系" class="headerlink" title="java体系"></a>java体系</h3><p>java有三个体系：Java EE（企业版）,Java SE（标准版）,Java ME（微型版）。<br>我使用了Java SE的jdk。</p><h3 id="java特性"><a href="#java特性" class="headerlink" title="java特性"></a>java特性</h3><ul><li>简单</li><li>面向对象</li><li>分布式</li><li>健壮性</li><li>安全</li><li>体系结构中立</li><li>可移植</li><li>解释型</li><li>高性能</li><li>多线程</li><li>动态</li></ul><h3 id="java历史"><a href="#java历史" class="headerlink" title="java历史"></a>java历史</h3><p>1995年5月23日，Java语言诞生</p><h3 id="java开发工具"><a href="#java开发工具" class="headerlink" title="java开发工具"></a>java开发工具</h3><p>硬件要求：内存1G以上。<br>系统要求：linux、macos、windows。<br>JDK：7、8…<br>编辑器：notepad、sublime text（收费）、vscode（开源且免费）等等。<br>IDE：eclipse（开源且免费）、idea（收费）等等。</p><p>编辑器/IDE这里我主要使用vscode和idea。</p><h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><p>开发java需要在机器上安装<a href="https://www.oracle.com/java/technologies/javase-downloads.html">JDK</a>（java开发工具包）。</p><p>我这里使用Java SE 8。</p><p>查看是否安装成功：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/jdk-installation.png" alt="jdk-installation"></p><p>安装成功！</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p><strong>一个Java程序可以认为是一系列对象的集合</strong>，而这些对象通过彼此的方法来协同。</p><h3 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h3><p>下面十几个重要的概念：</p><ul><li>对象：对象是类的一个实例，有状态和行为。</li><li>类：是一个模板，描述一类对象的状态和行为。</li><li>方法：方法就是行为，逻辑运算、数据修改等所有动作都是在方法中修改的。</li><li>实例变量：每个对象都有独特的实例变量，对象的状态由实例变量的值决定。</li></ul><h3 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h3><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 第一个Java程序</span></span><br><span class="line"><span class="comment">     * 它将打印字符串 Hello World</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>); <span class="comment">// 打印 Hello World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存 编译 运行：</p><ol><li>创建文件：<code>HelloWorld.java</code></li><li>编写代码</li><li>编译：<code>javac HelloWorld.java</code></li><li>运行：<code>java HelloWorld</code></li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>几条tips：</p><ol><li>java大小写敏感。</li><li>类名首字母大写，并且如果类名是由多个单词组成，那么每个单词首字母都要大写。</li><li>方法名以小写开头，采用驼峰式命名。</li><li>java文件名和类名要相同。</li><li>主方法入口：<code>public static void main(String[] args){}</code>，在最后的<code>{}</code>中编写代码。</li></ol><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>类名、变量名、方法名都叫做<strong>标识符</strong>。</p><p>标识符规则：</p><ol><li>只能以A-Z,a-z,$,_开始。</li><li>第一个字符之后可以用A-Z,a-z,$,_以及数组。</li><li>关键字不能作为标识符。</li><li>标识符大小写敏感。</li></ol><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>java中的修饰符用来修饰类中的属性和方法。</p><p>修饰符种类：</p><ul><li>访问控制修饰符：default,public,protected,private</li><li>非访问控制修饰符：final,abstract,static,synchronized</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>java变量类型：</p><ul><li>局部变量</li><li>类变量（静态变量）</li><li>成员变量（非静态变量）</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是存储在堆上的对象，可以保存多个同类型的变量。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>所谓枚举就是：限制了变量只能是预先设定好的值。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreshJuice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> FreshJuiceSize&#123; SMALL, MEDIUM, LARGE &#125;</span><br><span class="line">    FreshJuiceSize size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreshJuiceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FreshJuice juice = <span class="keyword">new</span> FreshJuice();</span><br><span class="line">        juice.size = FreshJuice.FreshJuiceSize.medium;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>java关键字有这些：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/java%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="java关键字"></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>支持单行、多行注释，编译器会忽略注释。<br>编译器还会忽略空白行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 单行注释方法一</span></span><br><span class="line">        <span class="comment">/* 单行注释方法二 */</span></span><br><span class="line">        <span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">         * 多行注释</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>java可以使用继承来重用已存在的类，被继承的类称之为超类，派生出来的类称之为子类。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>java中的接口可以理解我对象之间相互通信的协议。</p><h3 id="关于Java的编译运行"><a href="#关于Java的编译运行" class="headerlink" title="关于Java的编译运行"></a>关于Java的编译运行</h3><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/java%E6%BA%90%E7%A8%8B%E5%BA%8F%E4%B8%8E%E7%BC%96%E8%AF%91%E5%9E%8B%E8%BF%90%E8%A1%8C%E5%8C%BA%E5%88%AB.png" alt=""></p><p>由图可见，<code>.java</code>源文件经过编译后生成<code>.class</code>字节码文件，然后交由JVM解释运行。<br>故而从性能而言，java还是不如c/cpp这些编译型语言。</p><h2 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h2><p>java的基本概念：</p><ul><li>封装</li><li>继承</li><li>多态</li><li>抽象</li><li>类</li><li>对象</li><li>实例</li><li>方法</li><li>重载</li></ul><p>对象：对象是类的一个实例，有状态和行为。<br>类：类是一个模板，描述一类对象的状态和行为。</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象就是类的实例，有自己的属性和方法。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类就是对象的模板，是对对象的抽象。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  String breed;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类可以包含这几种变量：局部变量，成员变量，类变量。<br>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。<br>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。<br>类变量：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>每个类都有构造防范，如果没有定义则编译器会自动提供一个默认的构造方法。</p><p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这个构造器仅有一个参数：name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>对象是由类创建的。</p><p>如何创建对象？<br>使用关键字<code>new</code>创建新对象：</p><ol><li>首先声明一个对象。</li><li>使用new创建对象。</li><li>初始化对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">"小狗的名字是 : "</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问对象变量和方法"><a href="#访问对象变量和方法" class="headerlink" title="访问对象变量和方法"></a>访问对象变量和方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实例化对象 */</span></span><br><span class="line">Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line"><span class="comment">/* 访问类中的变量 */</span></span><br><span class="line">myPuppy.age;</span><br><span class="line"><span class="comment">/* 访问类中的方法 */</span></span><br><span class="line">myPuppy.barking();</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> puppyAge;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">"小狗的名字是 : "</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">( <span class="keyword">int</span> age )</span></span>&#123;</span><br><span class="line">       puppyAge = age;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">( )</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"小狗的年龄为 : "</span> + puppyAge ); </span><br><span class="line">       <span class="keyword">return</span> puppyAge;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">/* 创建对象 */</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line">      <span class="comment">/* 通过方法来设定age */</span></span><br><span class="line">      myPuppy.setAge( <span class="number">2</span> );</span><br><span class="line">      <span class="comment">/* 调用另一个方法获取age */</span></span><br><span class="line">      myPuppy.getAge( );</span><br><span class="line">      <span class="comment">/*你也可以像下面这样访问成员变量 */</span></span><br><span class="line">      System.out.println(<span class="string">"变量值 : "</span> + myPuppy.puppyAge ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/java-puppy.png" alt=""></p><h3 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h3><ul><li>一个源文件只能有一个public类。</li><li>一个源文件可以有多个非public类。</li><li>源文件名要和public类名相同。</li><li>如果一个类定义在某个包中，那么package语句要在源文件首行。</li><li>如果源文件包含import语句，import应该放在package语句和类定义之间。如果没有package语句则import要放在源文件最前面。</li><li>import和package对源文件中定义的所有类都有效，在同一源文件中，不能给不同的类不同的包声明。</li></ul><p>类有若干种访问级别，并且类也分不同的类型：抽象类和 final 类等。<br>还有特殊的类比如内部类和匿名类。</p><h3 id="java包"><a href="#java包" class="headerlink" title="java包"></a>java包</h3><p>包用来对类和接口分类。</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>实例：下面代码将会使编译器载入<code>java_installation/java/io</code>路径下的所有类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>现在创建两个类：Employee和EmployeeTest，Employee类没有主函数，EmployeeTest有主函数。这里EmployeeTest调用了Employee的属性和方法。</p><p>Employee.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">   String name;</span><br><span class="line">   <span class="keyword">int</span> age;</span><br><span class="line">   String designation;</span><br><span class="line">   <span class="keyword">double</span> salary;</span><br><span class="line">   <span class="comment">// Employee 类的构造器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 设置age的值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empAge</span><span class="params">(<span class="keyword">int</span> empAge)</span></span>&#123;</span><br><span class="line">      age =  empAge;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 设置designation的值*/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empDesignation</span><span class="params">(String empDesig)</span></span>&#123;</span><br><span class="line">      designation = empDesig;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 设置salary的值*/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empSalary</span><span class="params">(<span class="keyword">double</span> empSalary)</span></span>&#123;</span><br><span class="line">      salary = empSalary;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/* 打印信息 */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"名字:"</span>+ name );</span><br><span class="line">      System.out.println(<span class="string">"年龄:"</span> + age );</span><br><span class="line">      System.out.println(<span class="string">"职位:"</span> + designation );</span><br><span class="line">      System.out.println(<span class="string">"薪水:"</span> + salary);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">/* 使用构造器创建两个对象 */</span></span><br><span class="line">      Employee empOne = <span class="keyword">new</span> Employee(<span class="string">"RUNOOB1"</span>);</span><br><span class="line">      Employee empTwo = <span class="keyword">new</span> Employee(<span class="string">"RUNOOB2"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 调用这两个对象的成员方法</span></span><br><span class="line">      empOne.empAge(<span class="number">26</span>);</span><br><span class="line">      empOne.empDesignation(<span class="string">"高级程序员"</span>);</span><br><span class="line">      empOne.empSalary(<span class="number">1000</span>);</span><br><span class="line">      empOne.printEmployee();</span><br><span class="line"> </span><br><span class="line">      empTwo.empAge(<span class="number">21</span>);</span><br><span class="line">      empTwo.empDesignation(<span class="string">"菜鸟程序员"</span>);</span><br><span class="line">      empTwo.empSalary(<span class="number">500</span>);</span><br><span class="line">      empTwo.printEmployee();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac EmployeeTest.java</span><br><span class="line">java EmployeeTest</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">名字:RUNOOB1</span><br><span class="line">年龄:26</span><br><span class="line">职位:高级程序员</span><br><span class="line">薪水:1000.0</span><br><span class="line">名字:RUNOOB2</span><br><span class="line">年龄:21</span><br><span class="line">职位:菜鸟程序员</span><br><span class="line">薪水:500.0</span><br></pre></td></tr></table></figure><hr><p>Day01: 2020.09.04<br>复习进度：<a href="https://www.runoob.com/java/java-object-classes.html">https://www.runoob.com/java/java-object-classes.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天开始复习java，一天复习一点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学习内容来自：&lt;a href=&quot;https://www.runoob.com/java/java-tutorial.html&quot;&gt;菜鸟教程：java&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://herotiga.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>所谓面向过程、面向对象以及函数式语言的误区</title>
    <link href="https://herotiga.github.io/2020/09/03/%E6%89%80%E8%B0%93%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80/"/>
    <id>https://herotiga.github.io/2020/09/03/%E6%89%80%E8%B0%93%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80/</id>
    <published>2020-09-02T16:00:22.000Z</published>
    <updated>2020-09-02T16:29:25.453Z</updated>
    
    <content type="html"><![CDATA[<p>java是面向对象语言？clang是面向过程语言？lisp是函数式编程语言？</p><a id="more"></a><p>比如python和javascript，我们既可以用他们写出函数式编程的代码，也可以用他们写出面向对象风格的代码，还可以写出两者兼具的代码。</p><p>即使是java也可以用其写出函数式风格的代码。</p><p>还有common lisp这种函数式编程语言的代表也可以写出面向对象的代码。</p><p>因此，一刀切的将语言分为面向对象、面向过程、函数式是不科学的。</p><p>其实每一门语言都拥有多种特性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java是面向对象语言？clang是面向过程语言？lisp是函数式编程语言？&lt;/p&gt;
    
    </summary>
    
    
      <category term="computer science" scheme="https://herotiga.github.io/categories/computer-science/"/>
    
    
  </entry>
  
  <entry>
    <title>所谓编译型语言和解释型语言的误区</title>
    <link href="https://herotiga.github.io/2020/09/02/%E6%89%80%E8%B0%93%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%AF%E5%8C%BA/"/>
    <id>https://herotiga.github.io/2020/09/02/%E6%89%80%E8%B0%93%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%AF%E5%8C%BA/</id>
    <published>2020-09-02T15:42:59.000Z</published>
    <updated>2020-09-02T16:29:28.425Z</updated>
    
    <content type="html"><![CDATA[<p>什么是解释型语言？什么是编译型语言？<br>python是解释型语言？clang是编译型语言？java是解释型语言？<br>no，no，no。<br>其实这种根深蒂固的说法是<strong>错的</strong>。</p><a id="more"></a><p>一门编程语言本身并不具有是解释型语言还是编译型的属性，准确的说法是：<strong>某个语言的特定实现是编译型或者解释型的。</strong></p><p>比如javascript这个语言，它既有解释型的实现比如早期浏览器的js引擎，也有编译型的实现比如chrome的v8引擎。</p><p>再拿一个后端的语言scheme为例，chichen scheme为scheme提供了两套实现方式，一个是解释器csi，另一个是编译器csc。</p><p>故而，所谓的编译型、解释型并不是一门语言本身固有的属性，而是语言实现的特性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是解释型语言？什么是编译型语言？&lt;br&gt;python是解释型语言？clang是编译型语言？java是解释型语言？&lt;br&gt;no，no，no。&lt;br&gt;其实这种根深蒂固的说法是&lt;strong&gt;错的&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="computer science" scheme="https://herotiga.github.io/categories/computer-science/"/>
    
    
  </entry>
  
  <entry>
    <title>短链接原理及设计</title>
    <link href="https://herotiga.github.io/2020/08/31/short-url/"/>
    <id>https://herotiga.github.io/2020/08/31/short-url/</id>
    <published>2020-08-30T17:59:44.000Z</published>
    <updated>2020-09-01T14:21:53.608Z</updated>
    
    <content type="html"><![CDATA[<p>经常看到社交app以及短信中出现推销的链接很短。<br>那么这是如何做到的呢？还有为什么要将长链接做短呢？<br>这篇文章就探索一下什么是短链接，短链接的原理是什么，以及如何设计一个高性能的短链接。</p><a id="more"></a><h2 id="什么是短链接"><a href="#什么是短链接" class="headerlink" title="什么是短链接"></a>什么是短链接</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>这是一个真实的短链接：</p><p><a href="https://dwz.cn/4kuYDdGu">https://dwz.cn/4kuYDdGu</a></p><p>点击跳转后其真实的长链接为：</p><p><a href="https://app.smzdm.com/xiazai/?json=%7B%22url%22%3A%22https%3A%2F%2Ftest.smzdm.com%2Fp%2F10192%2F%3Futm_source%3D083002%26utm_medium%3D083002%26utm_campaign%3D083002%22%2C%22channel_name%22%3A%22test%22%2C%22article_id%22%3A%2210192%22%2C%22linkVal%22%3A%2210192%22%2C%22frompage%22%3A%22message%22%2C%22targetpage%22%3A%22test%22%2C%22roll_type%22%3A%222%22%2C%22download%22%3A%220%22%2C%22open_from%22%3A%22message%22%2C%22open_target%22%3A%22test%22%7D">https://app.smzdm.com/xiazai/?json=%7B%22url%22%3A%22https%3A%2F%2Ftest.smzdm.com%2Fp%2F10192%2F%3Futm_source%3D083002%26utm_medium%3D083002%26utm_campaign%3D083002%22%2C%22channel_name%22%3A%22test%22%2C%22article_id%22%3A%2210192%22%2C%22linkVal%22%3A%2210192%22%2C%22frompage%22%3A%22message%22%2C%22targetpage%22%3A%22test%22%2C%22roll_type%22%3A%222%22%2C%22download%22%3A%220%22%2C%22open_from%22%3A%22message%22%2C%22open_target%22%3A%22test%22%7D</a></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>发现了什么？</p><p><strong>原本的长链接真的太长了！有没有？</strong></p><p>故而，短链接的优点就是短，所以经常出现在对链接长度有限制的平台比如微博。<br>其实短链接还有其他的优点，不过都是基于短链接长度短而来的衍生优势。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>那么问题来了，短链接带来的缺点又有什么？<br>是响应时间的变长，其实短链接是靠时间换空间的一个东西。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们分析一下刚才点击短链接到最终得到真实链接的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/short-url.png" alt="原理"></p><p>客户端点击短链接后访问短链接服务器，服务器302暂时重定向到真实的url。<br>所以说短链接是用时间换空间。</p><p>那么服务器用301还是302呢？<br>用302。为什么？</p><blockquote><ul><li>301，代表 <strong>永久重定向</strong>，也就是说第一次请求拿到长链接后，下次浏览器再去请求短链的话，不会向短网址服务器请求了，而是直接从浏览器的缓存里拿，这样在 server 层面就无法获取到短网址的点击数了，如果这个链接刚好是某个活动的链接，也就无法分析此活动的效果。所以我们一般不采用 301。</li><li>302，代表 <strong>临时重定向</strong>，也就是说每次去请求短链都会去请求短网址服务器（除非响应中用 Cache-Control 或 Expired 暗示浏览器缓存）,这样就便于 server 统计点击数，所以虽然用 302 会给 server 增加一点压力，但在数据异常重要的今天，这点代码是值得的，所以推荐使用 302！</li></ul></blockquote><h2 id="短链接的设计"><a href="#短链接的设计" class="headerlink" title="短链接的设计"></a>短链接的设计</h2><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>我们对比长链接和短链接，发现有一个共同点：都是由域名+域名后面一串字符构成。<br>其实也就是将长链接域名后面的一长串映射成为了短链接的一短串。<br>也就是说，我们的任务就是将长的那一串经可能变短。</p><p>想到了什么？<br>对，哈希算法可以做到。<br>不过常见的md5、sha系列的输出都太长，md5输出是128bit，sha1已经是输出最短的了也有160bit的输出。<br>这个长度的输出太长了，而且md5，sha等哈希算法都是加密算法，所以对服务器的性能消耗较高，故而不适合作为长链接映射为短链接的哈希算法。</p><p>MurmurHash算法是一种非加密型哈希函数，适用于一般的哈希检索操作。与其它流行的哈希函数相比，对于规律性较强的 key，MurmurHash的随机分布特征表现更良好，非加密也就意味着MurmurHash的性能比md5等好得多。</p><p>MurmurHash算法可选两种长度：32bit和128bit。<br>32bit已经很够用了。</p><p>MurmurHash的输出是一串十进制数，可以将其转为62进制从而进一步压缩。</p><h3 id="短链接工具"><a href="#短链接工具" class="headerlink" title="短链接工具"></a>短链接工具</h3><ol><li><a href="https://sina.lt/">https://sina.lt/</a></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzA5NDIzNzY1OQ==&mid=2735615797&idx=1&sn=f43aab3ad3b42b1528a82a82dfbf6e28&chksm=b6ab298181dca0977c6a5c62c3069d7c635ce7b575952151a9f1a4ad5c91505c93889df6d23f&scene=21#wechat_redirect">高性能短链接设计：长链接</a></li><li><a href="http://dwz.date/cp5D">高性能短链接设计：短链接</a></li></ol><p>怎么样？打开短链接是不是感觉比长链接要慢一点？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常看到社交app以及短信中出现推销的链接很短。&lt;br&gt;那么这是如何做到的呢？还有为什么要将长链接做短呢？&lt;br&gt;这篇文章就探索一下什么是短链接，短链接的原理是什么，以及如何设计一个高性能的短链接。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://herotiga.github.io/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>解决github.io子域名dns污染</title>
    <link href="https://herotiga.github.io/2020/08/07/github-dns%E6%B1%A1%E6%9F%93/"/>
    <id>https://herotiga.github.io/2020/08/07/github-dns%E6%B1%A1%E6%9F%93/</id>
    <published>2020-08-06T16:12:09.000Z</published>
    <updated>2020-08-30T06:27:04.290Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>上个月月末开始就发现本博客的herotiga.github.io域名无法访问了，于是我试着打开了各个大佬的github.io的博客果然都一样，当时就发觉这是一场有组织有纪律的dns污染行为。</p></div></article><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>从v2ex反应的情况来看，默认自动从ISP获取的dns都被污染了，所以手动更换一个公共dns服务器即可。</p><p>我选择了<code>114.114.114.114</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;上个月月末开始就发现本博客的herotiga.github.io域名无法访问了，于是我试着打开了各个大佬的github.io的博客果然都一样，当时就发觉这是一场有组织有纪律的dns污染行为。&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://herotiga.github.io/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>linux使用技巧</title>
    <link href="https://herotiga.github.io/2020/08/06/linux-tips-01/"/>
    <id>https://herotiga.github.io/2020/08/06/linux-tips-01/</id>
    <published>2020-08-06T05:48:28.000Z</published>
    <updated>2020-09-02T09:24:39.271Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些linux使用技巧。</p><a id="more"></a><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><ol><li>!!</li></ol><p><code>!!</code>命令指向最近执行的一条命令，当我们使用<code>apt-get</code>安装软件的时候有时候会忘了写<code>sudo</code>，这个时候只需要如下既可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo !!</span><br></pre></td></tr></table></figure><ol start="2"><li>cd -</li></ol><p>返回刚才的目录。</p><ol start="3"><li>^old^new</li></ol><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"goed"</span></span><br></pre></td></tr></table></figure><p>错误将good写成了goed。</p><p>只需要<code>^e^o</code>既可。</p><p>代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"goed"</span></span><br><span class="line">^e^o</span><br></pre></td></tr></table></figure><p>回车既可。</p><ol start="4"><li>man ascii</li></ol><p>显示ascii码表。</p><p>有时候需要用到ascii码的时候就不需要打开浏览器然后再打开google搜索了。</p><ol start="5"><li>ctrl-x e</li></ol><p>快速启动默认编辑器。</p><ol start="6"><li>netstat -tlnp</li></ol><p>列出本机进程监听的端口号。</p><ol start="7"><li>tail  -f  /path/to/file.log |  sed  ‘/^Finished: SUCCESS$/  q’</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail  -f  /path/to/file.log |  sed  <span class="string">'/^Finished: SUCCESS$/  q'</span></span><br></pre></td></tr></table></figure><p>当log文件里面出现<code>Finished: SUCCESS</code>的时候退出<code>tail</code>，用于实时监控并且过滤log是否出现了某条记录。</p><ol start="8"><li>ssh user@server bash &lt; /path/to/local/script.sh</li></ol><p>用到了输入重定向。<br>在远程服务器运行本地一个脚本文件。</p><ol start="9"><li>screen -d -m -S some_name ping my_router</li></ol><p>后台运行一段不终止的程序，可以随时查看它的状态。</p><p>-d -m参数启动分离模式，-S指定一个session标识。</p><p>可以通过-R命令重新挂载一个标识的session。</p><p>参考：<code>man screen</code>或者<code>tldr screen</code></p><ol start="10"><li>wget</li></ol><p>下载一个网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --random-wait -r -p -e robots=off -U mozilla https://www.baidu.com</span><br></pre></td></tr></table></figure><ol start="11"><li>curl</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com</span><br></pre></td></tr></table></figure><ol start="12"><li>lsof -i</li></ol><p>实时查看本机网络服务活动状态。</p><ol start="13"><li>python -m SimpleHTTPServer</li></ol><p>将当前目录设置为HTTP服务目录，并可以通过8000端口访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认运行在8000端口</span></span><br><span class="line">http://localhost:8000/</span><br></pre></td></tr></table></figure><ol start="14"><li>列出我最常用的十条命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> |  awk  <span class="string">'&#123;CMD[$2]++;count++;&#125; END &#123;  for  (a  in  CMD  )print  CMD[a]</span></span><br><span class="line"><span class="string">" "  CMD[a]/count*100  "% " a  &#125;'</span> |  grep  -v  <span class="string">"./"</span> |  column  -c3  -s <span class="string">" "</span>  -t |</span><br><span class="line"> sort  -nr |  nl |  head  -n10</span><br></pre></td></tr></table></figure><h2 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h2><ol><li>cmatrix</li></ol><p>cmatrix是一款在命令行下显示黑客帝国中代码雨的插件，简直是中二少年的福音啊。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install cmatrix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">cmatrix</span><br></pre></td></tr></table></figure><p>cmatrix还有个进阶版叫<a href="https://github.com/will8211/unimatrix">unimatrix</a>，效果差不多，不过可配置的东西很丰富。</p><ol start="2"><li>neofetch</li></ol><p>neofetch是一款显示系统信息的工具。</p><blockquote><p>官网：<a href="https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/">https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install neofetch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><ol start="3"><li>lolcat</li></ol><p>lolcat是一款将输出信息变为彩虹色的工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install lolcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">ls -lha | lolcat</span><br></pre></td></tr></table></figure><ol start="4"><li>tldr</li></ol><p>我们知道man的替代品有info（英文手册）和cman（中文的man）。</p><p>除此之外还有tldr，tldr是直接给出了命令的常用用法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tldr ls</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些linux使用技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用curl代替postman</title>
    <link href="https://herotiga.github.io/2020/07/26/curl-usage/"/>
    <id>https://herotiga.github.io/2020/07/26/curl-usage/</id>
    <published>2020-07-26T13:27:35.000Z</published>
    <updated>2020-07-26T14:08:37.672Z</updated>
    
    <content type="html"><![CDATA[<p>curl是一个命令行工具，功能是发出请求并得到应答，最后输出到终端。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>查看源码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印在终端中</span></span><br><span class="line">curl www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输出保存为文件</span></span><br><span class="line">curl -o &lt;filename&gt; www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动跳转</span></span><br><span class="line">curl -L www.baidu.com</span><br></pre></td></tr></table></figure><ol start="2"><li>显示头信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示代码和头信息</span></span><br><span class="line">curl -i www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示头信息</span></span><br><span class="line">curl -I www.baidu.com</span><br></pre></td></tr></table></figure><ol start="3"><li>显示通信过程</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -v www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看详细信息</span></span><br><span class="line">curl --trace &lt;filename&gt; www.baidu.com</span><br><span class="line">curl --trace-ascii &lt;filename&gt; www.baidu.com</span><br></pre></td></tr></table></figure><ol start="4"><li>GET/POST</li></ol><p>GET:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl baidu.com/form.cgi?data=xxx</span><br></pre></td></tr></table></figure><p>POST:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --data <span class="string">"data=xxx"</span> baidu.com/form.cgi</span><br></pre></td></tr></table></figure><p>表单编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST--data-urlencode <span class="string">"date=April 1"</span> baidu.com/form.cgi</span><br></pre></td></tr></table></figure><ol start="5"><li>http动词</li></ol><p>默认GET</p><p>-X参数用来指定动词。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST www.baidu.com</span><br><span class="line">curl -X DELETE www.baidu.com</span><br></pre></td></tr></table></figure><ol start="6"><li>上传文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --form upload=@filename --form press=OK [URL]</span><br></pre></td></tr></table></figure><ol start="7"><li>referer</li></ol><p>该字段用于指示从哪个url跳转而来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --referer http://www.baidu.com http://www.baidu.com</span><br></pre></td></tr></table></figure><ol start="8"><li>User Agent</li></ol><p>该字段表示客户端的代理信息。</p><p>模拟用户代理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user-agent <span class="string">"[User Agent]"</span> [URL]</span><br></pre></td></tr></table></figure><ol start="9"><li>cookie</li></ol><p>发送cookie：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --cookie <span class="string">"name=xxx"</span> www.baidu.com</span><br></pre></td></tr></table></figure><ol start="10"><li>增加头信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --header <span class="string">"Content-Type:application/json"</span> http://example.com</span><br></pre></td></tr></table></figure><ol start="11"><li>HTTP认证</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user name:password baidu.com</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html">http://www.ruanyifeng.com/blog/2011/09/curl.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">http://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;curl是一个命令行工具，功能是发出请求并得到应答，最后输出到终端。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>哈希碰撞</title>
    <link href="https://herotiga.github.io/2020/07/20/hash-collision/"/>
    <id>https://herotiga.github.io/2020/07/20/hash-collision/</id>
    <published>2020-07-19T16:45:49.000Z</published>
    <updated>2020-07-22T12:01:08.146Z</updated>
    
    <content type="html"><![CDATA[<p><strong>哈希函数</strong>（hash function）就是将不同的输入映射为独一无二的固定长度的哈希值。</p><p>哈希是对输入信息的一种summarize，故而存在输出相同的情况，这种情况就称之为哈希碰撞。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/hash-collision-wiki.png" alt="hash"></p><p>由于hash是压缩映射，故而必然会导致哈希碰撞。</p><p>那么如何降低哈希碰撞的概率呢？</p><p>最简单粗暴的方法就是增加哈希值的取值范围，或者说增加哈希值的长度。<br>但是更长的哈希值也意味着占用的存储空间和消耗的cpu时间也会随之增长。</p><p>我们在实际开发中要做的就是在消耗资源的量和安全性之间找到balance使得我们能在有很高安全性的同时尽可能使用较少的资源消耗。</p><h2 id="生日攻击"><a href="#生日攻击" class="headerlink" title="生日攻击"></a>生日攻击</h2><p>假设哈希值是均匀分布的，那么影响哈希碰撞的因素有以下两点：</p><ul><li>哈希值取值范围</li><li>哈希值生命周期中的计算次数</li></ul><p>在数学中有一个生日问题，就是说假设全班有n个同学，一年365天（简化模型），那么班上有同学生日为同一天的概率有多大。</p><p>答案很出人意料。如果至少两个同学生日相同的概率不超过5%，那么这个班只能有7个人。事实上，一个23人的班级有50%的概率，至少两个同学生日相同；50人班级有97%的概率，70人的班级则是99.9%的概率。</p><p>这意味着，如果哈希值的取值空间是365，只要计算23个哈希值，就有50%的可能产生碰撞。也就是说，哈希碰撞的可能性，远比想象的高。实际上，有一个近似的公式。</p><p>$$<br>\sqrt{\frac{\pi}{2} N}<br>$$</p><p>50%的哈希碰撞概率所需要的计算次数，N表示哈希的取值空间。生日问题的 N 就是365，算出来是 23.9。</p><p>这个公式告诉我们，哈希碰撞所需耗费的计算次数，跟取值空间的平方根是一个数量级。</p><p>这种利用哈希空间不足够大，而制造碰撞的攻击方法，就被称为生日攻击（birthday attack）。</p><h2 id="哈希碰撞概率公式"><a href="#哈希碰撞概率公式" class="headerlink" title="哈希碰撞概率公式"></a>哈希碰撞概率公式</h2><p>这里省略了计算过程。</p><p>$$<br>p(n, d) \approx 1-e^{\frac{-n(n-1)}{2 d}}<br>$$</p><h2 id="封装为函数"><a href="#封装为函数" class="headerlink" title="封装为函数"></a>封装为函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> calculate = <span class="function">(<span class="params">d, n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> exponent = (-n * (n - <span class="number">1</span>)) / (<span class="number">2</span> * d)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.E ** exponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8">https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html">http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;哈希函数&lt;/strong&gt;（hash function）就是将不同的输入映射为独一无二的固定长度的哈希值。&lt;/p&gt;
&lt;p&gt;哈希是对输入信息的一种summarize，故而存在输出相同的情况，这种情况就称之为哈希碰撞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="alg" scheme="https://herotiga.github.io/categories/alg/"/>
    
    
  </entry>
  
  <entry>
    <title>weekly-2020-07-19</title>
    <link href="https://herotiga.github.io/2020/07/19/weekly-01/"/>
    <id>https://herotiga.github.io/2020/07/19/weekly-01/</id>
    <published>2020-07-19T11:33:33.000Z</published>
    <updated>2020-08-05T06:58:10.674Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;


      
    
    </summary>
    
    
      <category term="weekly" scheme="https://herotiga.github.io/categories/weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>使用neofetch和lolcat美化输出</title>
    <link href="https://herotiga.github.io/2020/07/17/neofetch/"/>
    <id>https://herotiga.github.io/2020/07/17/neofetch/</id>
    <published>2020-07-17T03:21:39.000Z</published>
    <updated>2020-07-17T03:51:50.345Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/">https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/</a></p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install neofetch</span><br><span class="line">brew install lolcat</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用neofetch查看本机信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch</span><br></pre></td></tr></table></figure><p>使用lolcat彩虹化输出信息颜色：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lha | lolcat</span><br></pre></td></tr></table></figure><p>当然也可以使用neofetch配合lolcat将输出的本机信息彩虹化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch | lolcat</span><br></pre></td></tr></table></figure><h2 id="疗效"><a href="#疗效" class="headerlink" title="疗效"></a>疗效</h2><p>单独使用fetch：</p><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/neofetch-template.png" alt=""></p><p>fetch+lolcat：</p><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/neofetch-lolcat.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/&quot;&gt;https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>htop：一款unix交互进程管理器</title>
    <link href="https://herotiga.github.io/2020/07/08/%E5%AE%89%E8%A3%85htop/"/>
    <id>https://herotiga.github.io/2020/07/08/%E5%AE%89%E8%A3%85htop/</id>
    <published>2020-07-08T09:01:35.000Z</published>
    <updated>2020-07-08T09:14:58.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>htop - an interactive process viewer for Unix</p></blockquote><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载源码：<a href="http://hisham.hm/htop/releases/">http://hisham.hm/htop/releases/</a></p><p>下载完毕后<code>tar -zxvf</code>解包。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>进入解包完的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="疗效"><a href="#疗效" class="headerlink" title="疗效"></a>疗效</h2><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/htop%E7%96%97%E6%95%88.png" alt="htop疗效"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;htop - an interactive process viewer for Unix&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>解决termius下不支持中文的问题</title>
    <link href="https://herotiga.github.io/2020/07/04/%E8%A7%A3%E5%86%B3termius%E4%B8%8B%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://herotiga.github.io/2020/07/04/%E8%A7%A3%E5%86%B3termius%E4%B8%8B%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-07-04T09:59:35.000Z</published>
    <updated>2020-07-05T06:44:37.885Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>发现在termius下中文文件名乱码的问题.</p></div></article><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>插入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LANG&#x3D;en_US.UTF-8</span><br></pre></td></tr></table></figure><p>done!</p>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;发现在termius下中文文件名乱码的问题.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>deno试水</title>
    <link href="https://herotiga.github.io/2020/07/01/deno-install/"/>
    <id>https://herotiga.github.io/2020/07/01/deno-install/</id>
    <published>2020-07-01T09:14:42.000Z</published>
    <updated>2020-07-21T08:28:57.491Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Deno: A secure runtime for JavaScript and TypeScript.</p></div></article><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl</span></span><br><span class="line">curl -fsSL https://deno.land/x/install/install.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># brew</span></span><br><span class="line">brew install deno</span><br></pre></td></tr></table></figure><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line">deno run https://deno.land/std/examples/welcome.ts</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Deno: A secure runtime for JavaScript and TypeScript.&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="deno" scheme="https://herotiga.github.io/categories/deno/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是CR,LF,CRLF</title>
    <link href="https://herotiga.github.io/2020/06/29/cr-lf-crlf/"/>
    <id>https://herotiga.github.io/2020/06/29/cr-lf-crlf/</id>
    <published>2020-06-29T01:39:47.000Z</published>
    <updated>2020-07-20T07:18:11.638Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>使用编辑器和IDE的时候经常看到CR、LF和CRLF。<br>其实这三个是不同操作系统的不同换行符。</p></div></article><a id="more"></a><p>CR：表示回车，对应ASCII码中的<code>\r</code>。</p><p>LF：表示换行，对应ASCII码中的<code>\n</code>。</p><p>CRLF：表示回车并换行，对应的ASCII码为<code>\r\n</code>。</p><hr><p>那么三个分别适用于哪些系统呢？</p><p>CR：用于远古mac系统。</p><p>LF：unix,linux和现在的macos。</p><p>CRLF：用于windows。</p><p>一般安装完编辑器或者IDE都会根据你的系统预置换行配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;使用编辑器和IDE的时候经常看到CR、LF和CRLF。&lt;br&gt;其实这三个是不同操作系统的不同换行符。&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>在hexo中加入gitbook</title>
    <link href="https://herotiga.github.io/2020/06/27/%E5%9C%A8hexo%E4%B8%AD%E5%8A%A0%E5%85%A5gitbook/"/>
    <id>https://herotiga.github.io/2020/06/27/%E5%9C%A8hexo%E4%B8%AD%E5%8A%A0%E5%85%A5gitbook/</id>
    <published>2020-06-27T08:57:55.000Z</published>
    <updated>2020-06-28T09:12:39.097Z</updated>
    
    <content type="html"><![CDATA[<p>写一下如何在hexo中添加gitbook。</p><a id="more"></a><ol><li>添加目录</li></ol><p>进入<code>blog/source/</code>下</p><p>创建目录：<code>mkdir gitbook</code></p><ol start="2"><li>修改_config.yml文件</li></ol><p>打开根目录下的<code>_config.yml</code>文件</p><p>找到<code>skip_render</code>，并按如下形式配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认配置应该是这样的</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加对gitbook目录的不解析，星号有两个代表对该目录下所有文件和目录都不解析</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">[README.md,gitbook/**]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>工作流</li></ol><p>gitbook放置在本地，每次<code>gitbook build</code>后就将build的内容cp到blog/source/gitbook目录下即可。</p><p>然后<code>hexo d -g</code>部署到服务器后，gitbook的路径比如我的ownpress.icu/gitbook即可，再写入配置文件增加新的连接或者按钮即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一下如何在hexo中添加gitbook。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
      <category term="hexo" scheme="https://herotiga.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>干掉Adobe Creative Cloud在Macos中的启动项</title>
    <link href="https://herotiga.github.io/2020/06/24/%E5%B9%B2%E6%8E%89Adobe-Creative-Cloud%E5%9C%A8Macos%E4%B8%AD%E7%9A%84%E5%90%AF%E5%8A%A8%E9%A1%B9/"/>
    <id>https://herotiga.github.io/2020/06/24/%E5%B9%B2%E6%8E%89Adobe-Creative-Cloud%E5%9C%A8Macos%E4%B8%AD%E7%9A%84%E5%90%AF%E5%8A%A8%E9%A1%B9/</id>
    <published>2020-06-24T14:16:23.000Z</published>
    <updated>2020-06-24T14:26:45.098Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>Adobe Creative Cloud是安装PS、AI等Adobe软件安装时自动安装的，可是流氓的Adobe会在macos启动后自启动好几个Adobe的后台进程，研究了一下如何干掉所有的自启动进程。</p></div></article><a id="more"></a><h2 id="结束相关进程"><a href="#结束相关进程" class="headerlink" title="结束相关进程"></a>结束相关进程</h2><p>首先，打开macos的活动监视器手动选中所有adobe的进程并强制结束。</p><h2 id="删除相关文件"><a href="#删除相关文件" class="headerlink" title="删除相关文件"></a>删除相关文件</h2><p>在以下目录中寻找<code>com.adobe</code>开头的文件并删除。</p><ul><li>~/Library/LaunchAgents</li><li>/Library/LaunchAgents</li><li>/Library/LaunchDaemons</li></ul><p>最好不要删除gc文件。</p><p>进入：/Applications/Utilities/Adobe Creative Cloud目录下，删除CCLibrary, CCXProcess, CoreSync文件夹。</p><h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p>进入：系统偏好设置&gt;扩展，关闭所有的adobe的扩展。</p><p>done!</p>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;Adobe Creative Cloud是安装PS、AI等Adobe软件安装时自动安装的，可是流氓的Adobe会在macos启动后自启动好几个Adobe的后台进程，研究了一下如何干掉所有的自启动进程。&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>git暂存工作区变动到临时空间</title>
    <link href="https://herotiga.github.io/2020/06/24/git%E6%9A%82%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%8F%98%E5%8A%A8/"/>
    <id>https://herotiga.github.io/2020/06/24/git%E6%9A%82%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%8F%98%E5%8A%A8/</id>
    <published>2020-06-23T19:55:31.000Z</published>
    <updated>2020-06-24T05:21:44.842Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>有一种场景是：我们已经add了一些文件到暂存区，而我们的工作区又修改了，这个时候测试提交了一个代码错误需要我们在原来的环境下fix，那么该怎么办呢？</p></div></article><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>这个时候工作区就被清空了，开始做bug fix。</p><p>完成修复后再pop就可以恢复之前的工作区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apply会保留stash list，而pop不会保留</span></span><br><span class="line">git stash apply</span><br></pre></td></tr></table></figure><p>查看stash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;有一种场景是：我们已经add了一些文件到暂存区，而我们的工作区又修改了，这个时候测试提交了一个代码错误需要我们在原来的环境下fix，那么该怎么办呢？&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://herotiga.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>开启vim代码高亮</title>
    <link href="https://herotiga.github.io/2020/06/24/%E5%BC%80%E5%90%AFvim%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/"/>
    <id>https://herotiga.github.io/2020/06/24/%E5%BC%80%E5%90%AFvim%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE/</id>
    <published>2020-06-23T19:24:36.000Z</published>
    <updated>2020-06-23T19:32:45.427Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>vim安装完后默认没有开启代码高亮，尽管开发使用GUI的编辑器和IDE，但是但是有时候也需要用vim看一下或者临时小修改一下代码。</p></div></article><a id="more"></a><p>vim代码高亮配色文件的路径是：/usr/share/vim/vim/vim81/colors</p><p>上面的vim81为版本，直接cd到/usr/share/vim/vim/下进入版本目录下查看colors既可，配色文件都是<code>.vim</code>为扩展名。</p><p>添加配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set nu </span><br><span class="line">colorscheme &lt;theme&gt;</span><br><span class="line">syntax on</span><br></pre></td></tr></table></figure><p>theme为配色文件名称。</p>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;vim安装完后默认没有开启代码高亮，尽管开发使用GUI的编辑器和IDE，但是但是有时候也需要用vim看一下或者临时小修改一下代码。&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://herotiga.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>解决github上图片无法显示的问题</title>
    <link href="https://herotiga.github.io/2020/06/23/%E8%A7%A3%E5%86%B3github%E4%B8%8A%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://herotiga.github.io/2020/06/23/%E8%A7%A3%E5%86%B3github%E4%B8%8A%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-22T17:18:25.000Z</published>
    <updated>2020-06-23T04:06:45.886Z</updated>
    
    <content type="html"><![CDATA[<article class="message is-info"><div class="message-body"><p>最近国内访问github会因为dns的原因导致图片不显示，可以修改本地hosts来解决。</p></div></article><a id="more"></a><h2 id="找到hosts文件"><a href="#找到hosts文件" class="headerlink" title="找到hosts文件"></a>找到hosts文件</h2><p>macos：<br>路径：<code>/etc/hosts</code></p><p>windows:<br>路径：<code>C:\Windows\System32\drivers\etc\hosts</code></p><h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><p>在hosts文件中追加以下配置信息：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub Start </span></span><br><span class="line">192.30.253.112    Build software better, together </span><br><span class="line">192.30.253.119    gist.github.com</span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line"> <span class="comment"># GitHub End</span></span><br></pre></td></tr></table></figure><p>完美解决~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jianshu.com/p/752211238c1b">https://www.jianshu.com/p/752211238c1b</a></li><li><a href="https://sspai.com/post/43248">https://sspai.com/post/43248</a></li><li><a href="https://zhuanlan.zhihu.com/p/107196957">https://zhuanlan.zhihu.com/p/107196957</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;article class=&quot;message is-info&quot;&gt;&lt;div class=&quot;message-body&quot;&gt;
&lt;p&gt;最近国内访问github会因为dns的原因导致图片不显示，可以修改本地hosts来解决。&lt;/p&gt;
&lt;/div&gt;&lt;/article&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://herotiga.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是新基建</title>
    <link href="https://herotiga.github.io/2020/06/22/%E6%96%B0%E5%9F%BA%E5%BB%BA/"/>
    <id>https://herotiga.github.io/2020/06/22/%E6%96%B0%E5%9F%BA%E5%BB%BA/</id>
    <published>2020-06-22T11:31:29.000Z</published>
    <updated>2020-07-22T11:46:26.228Z</updated>
    
    <content type="html"><![CDATA[<p>什么是新基建？</p><a id="more"></a><blockquote><p><a href="https://baike.baidu.com/item/%E6%96%B0%E5%9E%8B%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE/24528423?fromtitle=%E6%96%B0%E5%9F%BA%E5%BB%BA&fromid=24522518&fr=aladdin">新型基础设施建设</a>（简称：新基建），主要包括5G基站建设、特高压、城际高速铁路和城市轨道交通、新能源汽车充电桩、大数据中心、人工智能、工业互联网七大领域，涉及诸多产业链 ，是以新发展理念为引领，以技术创新为驱动，以信息网络为基础，面向高质量发展需要，提供数字转型、智能升级、融合创新等服务的基础设施体系。<br>2020年3月，中共中央政治局常务委员会召开会议提出，加快5G网络、数据中心等新型基础设施建设进度。<br>2020年5月7日，从上海市政府新闻发布会上介绍的《上海市推进新型基础设施建设行动方案（2020-2022年）》获悉，上海初步梳理排摸了这一领域未来三年实施的第一批48个重大项目和工程包，预计总投资约2700亿元。<br>2020年5月22日，《2020年国务院政府工作报告》提出，重点支持“两新一重”（新型基础设施建设，新型城镇化建设，交通、水利等重大工程建设）建设。</p></blockquote><blockquote><p>图片来自所长林超：<a href="https://www.bilibili.com/video/BV1H7411y7Hh?from=search&amp;seid=18115219843630947634">https://www.bilibili.com/video/BV1H7411y7Hh?from=search&amp;seid=18115219843630947634</a></p></blockquote><p>新基建的7个领域：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/%E6%96%B0%E5%9F%BA%E5%BB%BA.png" alt=""></p><p>新基建机遇：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/%E6%96%B0%E5%9F%BA%E5%BB%BA%E6%9C%BA%E9%81%87.png" alt=""></p><p>5G产业机会图：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/5g%E6%9C%BA%E4%BC%9A%E5%9B%BE.png" alt=""></p><p>4G发牌：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/4g%E5%8F%91%E7%89%8C.png" alt=""></p><p>5G产业地图：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/5g%E4%BA%A7%E4%B8%9A%E5%9C%B0%E5%9B%BE.png" alt=""></p><p>做内容需要有设计感、故事感、娱乐感、意义感、同理心，要去像人一样思考而不是像机器一样。</p><p>后动优势(late-mover advantage；Second-mover advantage；又称为次动优势、后发优势、先动劣势)是指相对于行业的先进入企业，后进入者由于较晚进入行业而获得的较先动企业不具有的竞争优势，通过观察先动者的行动及效果来减少自身面临的不确定性而采取相应行动，获得更多的市场份额。例如：研发成本优势、行业风险把握优势等。</p><p>出来卖的三个维度：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn/img/article/%E5%87%BA%E6%9D%A5%E5%8D%96%E7%9A%84%E4%B8%89%E4%B8%AA%E7%BB%B4%E5%BA%A6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是新基建？&lt;/p&gt;
    
    </summary>
    
    
      <category term="business" scheme="https://herotiga.github.io/categories/business/"/>
    
    
  </entry>
  
</feed>
