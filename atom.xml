<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2024-08-29T11:07:48.526Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason小王子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js开发笔记——Mongoose（ODM库）</title>
    <link href="https://herotiga.github.io/2024/08/29/nodejs-odm-mongoose/"/>
    <id>https://herotiga.github.io/2024/08/29/nodejs-odm-mongoose/</id>
    <published>2024-08-29T10:40:32.000Z</published>
    <updated>2024-08-29T11:07:48.526Z</updated>
    
    <content type="html"><![CDATA[<p><code>Mongoose</code>是 Node.js 的 ODM 库。</p><p>和 Sequelize 类似，Mongoose 提供了 node.js 对于 MongoDB 进行操作的便利。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S mongoose</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>连接MongoDB</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"></span><br><span class="line">mongoose</span><br><span class="line">  .connect(<span class="string">"mongodb://localhost:27017/mydatabase"</span>, &#123;</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">    useUnifiedTopology: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Connected to MongoDB"</span>))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"Could not connect to MongoDB..."</span>, err));</span><br></pre></td></tr></table></figure><ol start="2"><li>定义Schema</li></ol><p>Mongoosee中使用Schema来定义数据库表结构。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">    email: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">unique</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    created_at: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建模型Model</li></ol><p>使用以上创建好的Schema来创建模型Model。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, userSchema);</span><br></pre></td></tr></table></figure><ol start="4"><li>创建和保存</li></ol><p>使用上面创建好的Model可以对数据进行CRUD。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建user记录</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    name: <span class="string">'John Doe'</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    email: <span class="string">'johndoe@example.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存user记录</span></span><br><span class="line">user.save()</span><br><span class="line">    .then(<span class="function"><span class="params">doc</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'User saved:'</span>, doc))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error saving user:'</span>, err));</span><br></pre></td></tr></table></figure><ol start="5"><li>关闭连接</li></ol><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connection.close();</span><br></pre></td></tr></table></figure><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ul><li>Create</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    name: <span class="string">'John Doe'</span>,</span><br><span class="line">    age: <span class="number">30</span>,</span><br><span class="line">    email: <span class="string">'johndoe@example.com'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Read</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User.find(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">users</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Users found:'</span>, users))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error finding users:'</span>, err));</span><br></pre></td></tr></table></figure><ul><li>Update</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User.updateOne(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">31</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'User updated:'</span>, result))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error updating user:'</span>, err));</span><br></pre></td></tr></table></figure><ul><li>Delete</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User.deleteOne(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'User deleted:'</span>, result))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Error deleting user:'</span>, err));</span><br></pre></td></tr></table></figure><h2 id="钩子函数（Hooks）"><a href="#钩子函数（Hooks）" class="headerlink" title="钩子函数（Hooks）"></a>钩子函数（Hooks）</h2><p>Mongoose支持使用中间件来执行预处理或者后处理操作。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userSchema.pre(<span class="string">'save'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Before saving a user'</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://mongoosejs.net/">https://mongoosejs.net/</a></li><li><a href="https://mongoosejs.com/">https://mongoosejs.com/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Mongoose&lt;/code&gt;是 Node.js 的 ODM 库。&lt;/p&gt;
&lt;p&gt;和 Sequelize 类似，Mongoose 提供了 node.js 对于 MongoDB 进行操作的便利。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js开发笔记——Sequelize（ORM库）</title>
    <link href="https://herotiga.github.io/2024/08/29/nodejs-orm-sequelize/"/>
    <id>https://herotiga.github.io/2024/08/29/nodejs-orm-sequelize/</id>
    <published>2024-08-29T02:37:10.000Z</published>
    <updated>2024-08-29T11:07:46.533Z</updated>
    
    <content type="html"><![CDATA[<p>在 Node.js 项目中可以使用<code>Sequelize</code>这个<code>ORM</code>（对象关系映射）库来将项目中的 Model 和数据库表进行映射以及可以让我们可以使用 JavaScript 的对象和方法来操作数据库（CRUD），而不必编写原生 SQL 语句。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装-Sequelize"><a href="#安装-Sequelize" class="headerlink" title="安装 Sequelize"></a>安装 Sequelize</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S sequelize</span><br></pre></td></tr></table></figure><h3 id="安装对应数据库驱动"><a href="#安装对应数据库驱动" class="headerlink" title="安装对应数据库驱动"></a>安装对应数据库驱动</h3><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装MySQL驱动</span></span><br><span class="line">npm install -S mysql2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装PostgreSQL驱动</span></span><br><span class="line">npm install -S pg pg-hstore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装SQLite驱动</span></span><br><span class="line">npm install -S sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MSSQL驱动</span></span><br><span class="line">npm install -S tedious</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装MariaDB驱动</span></span><br><span class="line">npm install -S mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Oracle数据库驱动</span></span><br><span class="line">npm install -S oracledb</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Sequelize提供的大多数方法都是异步的，会返回<code>Promise</code>，所以可以使用Promise API。</p><h3 id="创建-Sequelize-实例"><a href="#创建-Sequelize-实例" class="headerlink" title="创建 Sequelize 实例"></a>创建 Sequelize 实例</h3><p>创建一个Sequelize实例并连接到数据库：</p><figure class="highlight js"><figcaption><span>models/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Sequelize &#125; = <span class="built_in">require</span>(<span class="string">"sequelize"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Sequelize实例，连接到MySQL数据库</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">"database_name"</span>, <span class="string">"username"</span>, <span class="string">"password"</span>, &#123;</span><br><span class="line">  host: <span class="string">"localhost"</span>,</span><br><span class="line">  dialect: <span class="string">"mysql"</span>, <span class="comment">// 选择数据库类型：'mysql' | 'postgres' | 'sqlite' | 'mssql'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试连接是否成功</span></span><br><span class="line">sequelize</span><br><span class="line">  .authenticate()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Connection has been established successfully."</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Unable to connect to the database:"</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出Sequelize实例变量</span></span><br><span class="line"><span class="built_in">module</span>.exports = sequelize;</span><br></pre></td></tr></table></figure><h3 id="定义模型（Model）"><a href="#定义模型（Model）" class="headerlink" title="定义模型（Model）"></a>定义模型（Model）</h3><p>在 Sequelize 中，模型代表数据库中的表。<br>可以通过定义模型来映射数据库表及其字段。</p><figure class="highlight js"><figcaption><span>models/user.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; DataTypes &#125; = <span class="built_in">require</span>(<span class="string">"sequelize"</span>);</span><br><span class="line"><span class="comment">// 引入前面创建的 Sequelize 实例</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">"./index"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义User模型</span></span><br><span class="line"><span class="keyword">const</span> User = sequelize.define(</span><br><span class="line">  <span class="string">"User"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    username: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    email: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    tableName: <span class="string">"users"</span>, <span class="comment">// 自定义表名，如果不指定，Sequelize 会自动将模型名转换为复数形式作为表名</span></span><br><span class="line">    timestamps: <span class="literal">true</span>, <span class="comment">// 自动添加 createdAt 和 updatedAt 字段</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = User;</span><br></pre></td></tr></table></figure><h3 id="同步模型与数据库"><a href="#同步模型与数据库" class="headerlink" title="同步模型与数据库"></a>同步模型与数据库</h3><p>在项目启动时同步模型和数据库。</p><p>在项目入口 js 文件中添加：</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">"./models/index"</span>);</span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">"./models/user"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步模型</span></span><br><span class="line">sequelize</span><br><span class="line">  .sync(&#123; <span class="attr">force</span>: <span class="literal">false</span> &#125;) <span class="comment">// &#123; force: true &#125; 会先删除表然后重新创建（慎用）</span></span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Database &amp; tables created!"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to sync database:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="CRUD-操作"><a href="#CRUD-操作" class="headerlink" title="CRUD 操作"></a>CRUD 操作</h3><p>可以调用模型的 CRUD 方法操作数据库。</p><ul><li>Create</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User.create(&#123;</span><br><span class="line">  username: <span class="string">"john_doe"</span>,</span><br><span class="line">  password: <span class="string">"secret123"</span>,</span><br><span class="line">  email: <span class="string">"john@example.com"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"User created:"</span>, user.toJSON());</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to create user:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>Read</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">User.findOne(&#123; <span class="attr">where</span>: &#123; <span class="attr">username</span>: <span class="string">"john_doe"</span> &#125; &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"User found:"</span>, user.toJSON());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"User not found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to find user:"</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">User.findAll()</span><br><span class="line">  .then(<span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"All users:"</span>, <span class="built_in">JSON</span>.stringify(users, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to find users:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>Update</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.update(&#123; <span class="attr">password</span>: <span class="string">"newpassword123"</span> &#125;, &#123; <span class="attr">where</span>: &#123; <span class="attr">username</span>: <span class="string">"john_doe"</span> &#125; &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">rowsUpdated</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Number of rows updated:"</span>, rowsUpdated);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to update user:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>Delete</li></ul><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User.destroy(&#123; <span class="attr">where</span>: &#123; <span class="attr">username</span>: <span class="string">"john_doe"</span> &#125; &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">rowsDeleted</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Number of rows deleted:"</span>, rowsDeleted);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to delete user:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h3><p>默认情况下，Sequelize将记录控制台执行的每个SQL查询。可以使用<code>options.logging</code>参数来自定义每次 Sequelize记录某些内容时将执行的函数。默认值为<code>console.log</code>，使用该值时仅显示日志函数调用的第一个参数。例如，对于查询日志记录，第一个参数是原始查询，第二个参数(默认情况下是隐藏的)是Sequelize对象。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'sqlite::memory:'</span>, &#123;</span><br><span class="line">  <span class="comment">// 选择一种日志记录参数</span></span><br><span class="line">  logging: <span class="built_in">console</span>.log,                  <span class="comment">// 默认值,显示日志函数调用的第一个参数</span></span><br><span class="line">  logging: <span class="function">(<span class="params">...msg</span>) =&gt;</span> <span class="built_in">console</span>.log(msg), <span class="comment">// 显示所有日志函数调用参数</span></span><br><span class="line">  logging: <span class="literal">false</span>,                        <span class="comment">// 禁用日志记录</span></span><br><span class="line">  logging: <span class="function"><span class="params">msg</span> =&gt;</span> logger.debug(msg),     <span class="comment">// 使用自定义记录器(例如Winston 或 Bunyan),显示第一个参数</span></span><br><span class="line">  logging: logger.debug.bind(logger)     <span class="comment">// 使用自定义记录器的另一种方法,显示所有消息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="关系映射"><a href="#关系映射" class="headerlink" title="关系映射"></a>关系映射</h3><p>Sequelize 支持定义表之间的关系（一对一、一对多、多对多）。</p><p>定义<code>User</code>和<code>Post</code>之间为一对多的关系：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Post = sequelize.define(<span class="string">"Post"</span>, &#123;</span><br><span class="line">  title: DataTypes.STRING,</span><br><span class="line">  content: DataTypes.TEXT,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一对多关系：一个用户可以有多个帖子</span></span><br><span class="line">User.hasMany(Post);</span><br><span class="line">Post.belongsTo(User);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在同步时，Sequelize 会自动设置外键</span></span><br><span class="line">sequelize.sync();</span><br></pre></td></tr></table></figure><h3 id="查询生成器"><a href="#查询生成器" class="headerlink" title="查询生成器"></a>查询生成器</h3><p>Sequelize 支持复杂的查询构建与聚合操作，可以轻松实现分页、排序、分组等操作。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  where: &#123; <span class="attr">email</span>: &#123; [Op.like]: <span class="string">"%@example.com"</span> &#125; &#125;,</span><br><span class="line">  order: [[<span class="string">"createdAt"</span>, <span class="string">"DESC"</span>]],</span><br><span class="line">  limit: <span class="number">10</span>,</span><br><span class="line">  offset: <span class="number">20</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">users</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Paged users:"</span>, <span class="built_in">JSON</span>.stringify(users, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Failed to retrieve users:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="事务处理（Transactions）"><a href="#事务处理（Transactions）" class="headerlink" title="事务处理（Transactions）"></a>事务处理（Transactions）</h3><p>通过<code>sequelize.transaction()</code>来管理事务，确保操作的原子性。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sequelize</span><br><span class="line">  .transaction(<span class="keyword">async</span> (t) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> User.create(</span><br><span class="line">      &#123;</span><br><span class="line">        username: <span class="string">"jane_doe"</span>,</span><br><span class="line">        password: <span class="string">"password123"</span>,</span><br><span class="line">        email: <span class="string">"jane@example.com"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">transaction</span>: t &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Post.create(</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">"Jane's first post"</span>,</span><br><span class="line">        content: <span class="string">"This is Jane's first post"</span>,</span><br><span class="line">        userId: user.id,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">transaction</span>: t &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Transaction has been committed"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"Transaction has been rolled back:"</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="验证与钩子（Hooks）"><a href="#验证与钩子（Hooks）" class="headerlink" title="验证与钩子（Hooks）"></a>验证与钩子（Hooks）</h3><p>Sequelize 提供内置的验证机制，并允许你定义生命周期钩子，在模型操作前后执行代码。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(</span><br><span class="line">  <span class="string">"User"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    username: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      unique: <span class="literal">true</span>,</span><br><span class="line">      validate: &#123;</span><br><span class="line">        len: [<span class="number">4</span>, <span class="number">20</span>], <span class="comment">// 验证用户名长度在 4 到 20 个字符之间</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    hooks: &#123;</span><br><span class="line">      beforeCreate: <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在创建用户前对密码进行哈希处理</span></span><br><span class="line">        user.password = hashPassword(user.password);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="配置与环境变量"><a href="#配置与环境变量" class="headerlink" title="配置与环境变量"></a>配置与环境变量</h3><p>可以通过环境变量或配置文件管理不同环境下的数据库连接配置：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(</span><br><span class="line">  process.env.DB_NAME,</span><br><span class="line">  process.env.DB_USER,</span><br><span class="line">  process.env.DB_PASSWORD,</span><br><span class="line">  &#123;</span><br><span class="line">    host: process.env.DB_HOST,</span><br><span class="line">    dialect: <span class="string">"mysql"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="迁移与种子数据"><a href="#迁移与种子数据" class="headerlink" title="迁移与种子数据"></a>迁移与种子数据</h3><p>Sequelize CLI工具支持数据库迁移和种子数据管理。可以通过命令行生成和应用迁移来管理数据库的演进。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx sequelize-cli init</span><br><span class="line">npx sequelize-cli model:generate --name User --attributes username:string,email:string</span><br><span class="line">npx sequelize-cli db:migrate</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.sequelize.cn/">https://www.sequelize.cn/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Node.js 项目中可以使用&lt;code&gt;Sequelize&lt;/code&gt;这个&lt;code&gt;ORM&lt;/code&gt;（对象关系映射）库来将项目中的 Model 和数据库表进行映射以及可以让我们可以使用 JavaScript 的对象和方法来操作数据库（CRUD），而不必编写原生 SQL 语句。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Tree-Shaking是什么？</title>
    <link href="https://herotiga.github.io/2024/08/26/Tree-Shaking/"/>
    <id>https://herotiga.github.io/2024/08/26/Tree-Shaking/</id>
    <published>2024-08-25T16:39:48.000Z</published>
    <updated>2024-08-27T01:38:43.592Z</updated>
    
    <content type="html"><![CDATA[<p><code>Tree-Shaking</code>是一种代码优化技术，其通过删除未使用的代码来减少最终打包出来的文件的大小，从而提高程序的加载速度和性能。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在webpack5的<code>production</code>环境中默认开启了Tree-Shaking功能，也就是build出来的代码会删除无用的代码。</p><p>无用的代码包括下面几类：</p><ul><li>不可能执行的代码</li><li>定义了但是没有引用的变量</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.webpackjs.com/guides/tree-shaking/#root">https://www.webpackjs.com/guides/tree-shaking/#root</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Tree-Shaking&lt;/code&gt;是一种代码优化技术，其通过删除未使用的代码来减少最终打包出来的文件的大小，从而提高程序的加载速度和性能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://herotiga.github.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>Android开发笔记</title>
    <link href="https://herotiga.github.io/2024/07/08/Android%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>https://herotiga.github.io/2024/07/08/Android%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</id>
    <published>2024-07-08T06:38:53.000Z</published>
    <updated>2024-08-25T11:37:51.672Z</updated>
    
    <content type="html"><![CDATA[<p>Android开发笔记</p><a id="more"></a><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>阅读Java文档。</p><h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h3><p>阅读Kotlin文档。</p><h2 id="Android应用结构和基本组件"><a href="#Android应用结构和基本组件" class="headerlink" title="Android应用结构和基本组件"></a>Android应用结构和基本组件</h2><p>包括四大基本组件Activity、Service、BroadcastReceiver、ContentProvider以及Fragment、Intent、View、Layout、Resources、Manifest等。</p><p>可以查看Android官方文档学习。</p><h2 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h2><p>包括官方文档和Material Design。</p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>包括SharedPreferences、读写文件、SQLite本地数据库、Room持久库。</p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p>包括Retrofit和Volley等库。</p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>包括内存管理、电池优化、响应速度优化等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android开发笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://herotiga.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Learning MongoDB</title>
    <link href="https://herotiga.github.io/2024/06/28/Learning-MongoDB/"/>
    <id>https://herotiga.github.io/2024/06/28/Learning-MongoDB/</id>
    <published>2024-06-28T14:17:15.000Z</published>
    <updated>2024-08-25T10:40:15.912Z</updated>
    
    <content type="html"><![CDATA[<p><code>MongoDB</code> is a type of NoSQL database suitable for storing large-scale data.</p><p>MongoDB is a document based database, the data is stored in a JSON-like document format.</p><p>MongoDB uses Collections to organize documents, and each document is composed of key-value pairs.</p><a id="more"></a><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><ol><li><p>Database: A container for storing data, similar to a database in relational database.</p></li><li><p>Collection: A collection in database, similar to a table in relational database.</p></li><li><p>Document: A data record in a collection, similar to a row in relational database, stored in BSON format.</p></li></ol><article class="message is-info"><div class="message-body"><p>MongoDB stores data as a document, with a data structure consisting of key-value pairs. The document is similar to a JSON object, and field values can contain other documents, arrays, and document arrays.</p></div></article><p>mapping:</p><table><thead><tr><th>SQL Concept</th><th>MongoDB Concept</th><th>Remark</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>database</td></tr><tr><td>table</td><td>collection</td><td>databse table/collection</td></tr><tr><td>row</td><td>document</td><td>data record</td></tr><tr><td>column</td><td>field</td><td>data field</td></tr><tr><td>index</td><td>index</td><td>index</td></tr><tr><td>table joins</td><td></td><td>MongoDB not supported</td></tr><tr><td>primary key</td><td>primary key</td><td>MongoDB will set _id to primary key</td></tr></tbody></table><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install community edition</span></span><br><span class="line">brew install mongodb-community</span><br><span class="line"></span><br><span class="line"><span class="comment"># start on startup</span></span><br><span class="line">brew services start mongodb-community</span><br></pre></td></tr></table></figure><h2 id="MongoDB-Shell"><a href="#MongoDB-Shell" class="headerlink" title="MongoDB Shell"></a>MongoDB Shell</h2><article class="message is-info"><div class="message-body"><p>MongoDB Shell is a interactive interface provided by official, allowing users to interact with the MongoDB database, execute commands, and operate the database.</p><p>The MongoDB Shell is based on JavaScript and allows users to operate the MongoDB database directly from the command line or within scripts using the JavaScript language.</p></div></article><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start mongo shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in older versions</span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line"><span class="comment"># in the new version</span></span><br><span class="line">mongosh</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to a remote mongodb server</span></span><br><span class="line">mongosh --host &lt;hostname&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><h2 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h2><figure class="highlight bash"><figcaption><span>mongosh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show current database</span></span><br><span class="line">db;</span><br><span class="line"></span><br><span class="line"><span class="comment"># show database list</span></span><br><span class="line">show dbs;</span><br><span class="line"></span><br><span class="line"><span class="comment"># switch to the specified database</span></span><br><span class="line">use &lt;db_name&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute query operation</span></span><br><span class="line">db.&lt;collection_name&gt;.find();</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert a document</span></span><br><span class="line">db.&lt;collection_name&gt;.insertOne(&#123;...&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># update a document</span></span><br><span class="line">db.&lt;collection_name&gt;.updateOne(&#123;...&#125;, &#123;...&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a document</span></span><br><span class="line">db.&lt;collection_name&gt;.deleteOne(&#123;...&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit shell</span></span><br><span class="line">quit()</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="MongoDB-Tools"><a href="#MongoDB-Tools" class="headerlink" title="MongoDB Tools"></a>MongoDB Tools</h2><ol><li>MongoDB Compass: A free GUI tool.</li><li>Navicat: A paid GUI tool.</li><li>Studio 3T: A paid GUI tool, with a good CRUD operations experience.</li></ol><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://www.mongodb.com/docs/manual/introduction/">https://www.mongodb.com/docs/manual/introduction/</a></li><li><a href="https://www.runoob.com/mongodb/mongodb-tutorial.html">https://www.runoob.com/mongodb/mongodb-tutorial.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;MongoDB&lt;/code&gt; is a type of NoSQL database suitable for storing large-scale data.&lt;/p&gt;
&lt;p&gt;MongoDB is a document based database, the data is stored in a JSON-like document format.&lt;/p&gt;
&lt;p&gt;MongoDB uses Collections to organize documents, and each document is composed of key-value pairs.&lt;/p&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="https://herotiga.github.io/categories/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js开发笔记——EventEmitter</title>
    <link href="https://herotiga.github.io/2024/06/03/EventEmitter/"/>
    <id>https://herotiga.github.io/2024/06/03/EventEmitter/</id>
    <published>2024-06-03T05:23:20.000Z</published>
    <updated>2024-08-25T17:09:09.075Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js使用的是事件驱动模型。</p><p>可以通过<code>EventEmitter</code>来实现事件的监听和触发，Node.js中其他的异步API也都是通过继承EventEmitter实现的。</p><a id="more"></a><h2 id="addListener-removeListener"><a href="#addListener-removeListener" class="headerlink" title="addListener/removeListener"></a>addListener/removeListener</h2><p>为指定的事件添加一个监听器，可以为同一个事件添加多个监听器。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">'node:events'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建EventEmitter实例</span></span><br><span class="line"><span class="keyword">const</span> ee = <span class="keyword">new</span> events.EventEmitter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为同一个事件添加多个监听器</span></span><br><span class="line">ee.addListener(<span class="string">'event_name'</span>, handler1)</span><br><span class="line">ee.addListener(<span class="string">'event_name'</span>, handler2)</span><br><span class="line">ee.addListener(<span class="string">'event_name'</span>, handler3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件上指定的监听器</span></span><br><span class="line">ee.removeListener(<span class="string">'event_name'</span>, handler1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件上所有的监听器</span></span><br><span class="line">ee.removeAllListener(<span class="string">'event_name'</span>)</span><br></pre></td></tr></table></figure><h2 id="on-emit"><a href="#on-emit" class="headerlink" title="on/emit"></a>on/emit</h2><p>on方法和addListener是一样的，on是简写。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听事件，可以接受参数</span></span><br><span class="line">ee.on(<span class="string">'event_name'</span>, (arg1, arg2, ...) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件，可以携带参数</span></span><br><span class="line">ee.emit(<span class="string">'event_name'</span>, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><h2 id="once"><a href="#once" class="headerlink" title="once"></a>once</h2><p>可以使用once为事件添加单词监听器，监听器最多只会执行一次。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ee.once(<span class="string">'event_name'</span>, handler)</span><br></pre></td></tr></table></figure><h2 id="setMaxListeners-defaultMaxListeners"><a href="#setMaxListeners-defaultMaxListeners" class="headerlink" title="setMaxListeners/defaultMaxListeners"></a>setMaxListeners/defaultMaxListeners</h2><p>EventEmitter默认限制了给同一个事件最大只能添加10个监听器，使用setMaxListeners可以指定限制数量。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ee.setMaxListeners(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>或者可以直接设置默认最大数量：</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置为0解除限制</span></span><br><span class="line">ee.defaultMaxListeners = <span class="number">0</span></span><br><span class="line">ee.defaultMaxListeners = <span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="listeners"><a href="#listeners" class="headerlink" title="listeners"></a>listeners</h2><p>获取指定事件上绑定的所有的监听器。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listeners = ee.listeners(<span class="string">'event_name'</span>)</span><br></pre></td></tr></table></figure><h2 id="newListener事件"><a href="#newListener事件" class="headerlink" title="newListener事件"></a>newListener事件</h2><p>EventEmitter中的特殊事件。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ee.on(<span class="string">'newListener'</span>, (event, listener) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Event name: <span class="subst">$&#123;event&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Listener function: <span class="subst">$&#123;listener&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="removeListener事件"><a href="#removeListener事件" class="headerlink" title="removeListener事件"></a>removeListener事件</h2><p>EventEmitter中的特殊事件。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ee.on(<span class="string">'removeListener'</span>, (event, listener) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Event name: <span class="subst">$&#123;event&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Listener function: <span class="subst">$&#123;listener&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="error事件"><a href="#error事件" class="headerlink" title="error事件"></a>error事件</h2><p>EventEmitter中的特殊事件。</p><figure class="highlight js"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ee.on(<span class="string">'error'</span>, (arg1, arg2, ...) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ee.emit(<span class="string">'error'</span>, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><p>在实际使用时，我们一般通过自定义类继承EventEmitter来实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js使用的是事件驱动模型。&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;EventEmitter&lt;/code&gt;来实现事件的监听和触发，Node.js中其他的异步API也都是通过继承EventEmitter实现的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么计算机无法产生真随机数</title>
    <link href="https://herotiga.github.io/2024/06/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%97%A0%E6%B3%95%E4%BA%A7%E7%94%9F%E7%9C%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>https://herotiga.github.io/2024/06/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%97%A0%E6%B3%95%E4%BA%A7%E7%94%9F%E7%9C%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2024-06-01T15:28:07.000Z</published>
    <updated>2024-08-25T06:12:24.276Z</updated>
    
    <content type="html"><![CDATA[<p>为什么计算机无法产生真随机数？</p><a id="more"></a><hr><h2 id="为什么计算机只能产生伪随机数"><a href="#为什么计算机只能产生伪随机数" class="headerlink" title="为什么计算机只能产生伪随机数"></a>为什么计算机只能产生伪随机数</h2><p>现有计算机编程语言中产生随机数的算法都是<strong>伪随机数生成器</strong>（PRNG）。</p><h3 id="算法是确定的"><a href="#算法是确定的" class="headerlink" title="算法是确定的"></a>算法是确定的</h3><p>计算机的随机数是由特定算法产生的，然而这些算法是确定的，对于这些算法输入相同的参数就会输出相同的结果。</p><p>故而随机数这个结果是由输入值确定的，所以计算机产生的是<strong>伪随机数</strong>（Pseudo-random Number）。</p><p>一般使用的算法有线性<strong>同余生成器</strong>（LCG）或<strong>梅森旋转器</strong>（Mersenne Twister）。</p><h3 id="算法输出的结果是有限的"><a href="#算法输出的结果是有限的" class="headerlink" title="算法输出的结果是有限的"></a>算法输出的结果是有限的</h3><p>由于计算机存在浮点数精度限制以及数字长度限制，所以输入到算法后输入的随机数也一定是精度有限的和长度有限的。</p><h3 id="种子值决定了算法输出的结果"><a href="#种子值决定了算法输出的结果" class="headerlink" title="种子值决定了算法输出的结果"></a>种子值决定了算法输出的结果</h3><p>伪随机数生成器产生的结果只依赖于种子值和算法，所以如果种子值是可以预测的，那么产生的随机数自然也是可以预测的。</p><hr><h2 id="如何产生真随机数"><a href="#如何产生真随机数" class="headerlink" title="如何产生真随机数"></a>如何产生真随机数</h2><p>获得一个<strong>真随机数生成器</strong>（TRNG）的关键在于如何获得一个不可预测的种子值，那么如何获得一个不可预测的种子值呢？</p><p>计算机作为一个由数字电路构成的二进制电路是高度可预测的，故而计算机本身是无法产生随机的种子值的。</p><p><strong>想要获得不可预测的种子值只能通过随机的物理事件。</strong></p><p>在现有的物理学体系中可以产生随机事件的方式有下面几种：</p><h3 id="热噪声"><a href="#热噪声" class="headerlink" title="热噪声"></a>热噪声</h3><p>热噪声是由导体内电子的热运动引起的随机电流或电压波动。通过测量这些波动，可以产生随机数。<br>例如，一个电阻器或半导体器件在工作时会产生热噪声，通过放大和量化这些信号就可以得到随机数。</p><h3 id="光电二极管噪声"><a href="#光电二极管噪声" class="headerlink" title="光电二极管噪声"></a>光电二极管噪声</h3><p>光电二极管在没有光照的情况下内部任然会有热运动和量子效应产生的噪声，通过放大和量化这些信号可以得到随机数。</p><h3 id="量子力学中的不确定性"><a href="#量子力学中的不确定性" class="headerlink" title="量子力学中的不确定性"></a>量子力学中的不确定性</h3><p>根据海森堡不确定性原理，量子的位置和动量不能同时被精确测量，这两个量是随机的。<br>量子的波函数坍塌是随机的。<br>光量子在通过一个半反半透镜时是反射还是透过是随机的。<br>光量子在通过量子分束器时通过的路径是随机的。</p><h3 id="放射性元素衰变"><a href="#放射性元素衰变" class="headerlink" title="放射性元素衰变"></a>放射性元素衰变</h3><p>放射性元素的衰变间隔是随机的。</p><h3 id="激光相位噪声"><a href="#激光相位噪声" class="headerlink" title="激光相位噪声"></a>激光相位噪声</h3><p>激光产生的光具有内在的量子噪声，通过放大和量化光信号可以得到随机数。</p><h3 id="混沌系统"><a href="#混沌系统" class="headerlink" title="混沌系统"></a>混沌系统</h3><p>作为经典物理学中的最后一朵乌云，混沌系统对于初始条件的微小变化可以导致系统一段时间后具有完全不可预测的特性，可以量化后产生随机数。混沌系统比如湍流、混沌震荡器。</p><p>使用以上随机事件进行量化后作为种子值输入算法即可获取到真随机数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么计算机无法产生真随机数？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithms" scheme="https://herotiga.github.io/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>寻找peak元素</title>
    <link href="https://herotiga.github.io/2024/05/29/peak/"/>
    <id>https://herotiga.github.io/2024/05/29/peak/</id>
    <published>2024-05-29T05:25:19.000Z</published>
    <updated>2024-08-25T06:12:24.595Z</updated>
    
    <content type="html"><![CDATA[<p>面试问到的算法题。</p><a id="more"></a><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>给定一个数组（元素为数字），数组内的值相邻的两个元素值不同，如果一个元素的左右两边的元素值都小于该元素，则该元素为peak元素（对于两个端点元素一边符合即可）。</p><p>要求返回一个peak元素即可。</p><p>算法的时间复杂度越小越好。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>采用暴力解法的时间复杂度为<code>O(n)</code>。</p><p>如果采用二分查找可以将时间复杂度降到<code>O(logn)</code>。</p><p>可以用二分查找，寻找中间点，如果中间点大于右边的点，那么左半边（包含中间点在内）一定有一个点符合peak，反之一样。这样不断地每次缩小1/2的范围最终就可以使用<code>O(logn)</code>的时间复杂度找到peak点。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight ts"><figcaption><span>ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> findPeak = (mountains: <span class="built_in">number</span>[]): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> left: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right: <span class="built_in">number</span> = mountains.length - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 找到中间点</span></span><br><span class="line">        <span class="keyword">let</span> mid: <span class="built_in">number</span> = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (mountains[mid] &gt; mountains[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">// 左半边一定有peak</span></span><br><span class="line">            right = mid</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 右半边一定有peak</span></span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mountains[left]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findPeak([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>]))</span><br><span class="line"><span class="built_in">console</span>.log(findPeak([<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>]))</span><br><span class="line"><span class="built_in">console</span>.log(findPeak([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br><span class="line"><span class="built_in">console</span>.log(findPeak([<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><ol><li>本题难点在于想不到可以使用二分查找来缩小查询范围，因为本题的要求是只要找到任意一个peak即可。</li><li>要想到在使用二分查找时如果中间点大于右边的点，那么左半边（包含中间点）在内的区间一定存在peak，反之亦然，这样就缩小了一半的范围。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试问到的算法题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithms" scheme="https://herotiga.github.io/categories/Algorithms/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx基本配置、反向代理、负载均衡以及高可用</title>
    <link href="https://herotiga.github.io/2024/05/18/nginx-conf/"/>
    <id>https://herotiga.github.io/2024/05/18/nginx-conf/</id>
    <published>2024-05-17T16:59:17.000Z</published>
    <updated>2024-08-25T06:10:32.091Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的基本配置。</p><a id="more"></a><p>配置nginx是通过编辑nginx的配置文件实现的。</p><p>nginx配置文件位于<code>/etc/nginx/nginx.conf</code>或者<code>/etc/nginx/conf.d/</code>目录中。</p><h2 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure><h2 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看nginx状态</span></span><br><span class="line">sudo systemctl status nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止nginx</span></span><br><span class="line">sudo systemctl stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">sudo systemctl restart nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入nginx配置文件</span></span><br><span class="line">sudo systemctl reload nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统启动时启动nginx</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试nginx配置文件是否正确</span></span><br><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><h2 id="nginx基本配置"><a href="#nginx基本配置" class="headerlink" title="nginx基本配置"></a>nginx基本配置</h2><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 监听80端口</span><br><span class="line">    listen 80;</span><br><span class="line">    # 域名</span><br><span class="line">    server_name example.com www.example.com;</span><br><span class="line"></span><br><span class="line">    # 网站根目录</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;example;</span><br><span class="line">    # 默认首页</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 定义错误页面</span><br><span class="line">    error_page 404 &#x2F;404.html;</span><br><span class="line">    location &#x3D; &#x2F;404.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        internal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx配置静态资源目录"><a href="#nginx配置静态资源目录" class="headerlink" title="nginx配置静态资源目录"></a>nginx配置静态资源目录</h2><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;localhost:3000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 配置静态文件目录，当客户端访问下面的几种格式的静态文件时nginx会定向到&#x2F;static目录下</span><br><span class="line">    location ~ \.jpg|.png|.gif|.css|.js$ &#123;</span><br><span class="line">        root static;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx配置反向代理"><a href="#nginx配置反向代理" class="headerlink" title="nginx配置反向代理"></a>nginx配置反向代理</h2><p>nginx除了可以支持正向代理还可以支持反向代理，反向代理就是对客户端隐藏了真实的服务端。</p><p>下面的配置会将所有传入的请求转发给本地的<code>http://localhost:3000</code>服务器。</p><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;localhost:3000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx配置负载均衡"><a href="#nginx配置负载均衡" class="headerlink" title="nginx配置负载均衡"></a>nginx配置负载均衡</h2><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 服务器集群，serverlist是集群名称</span><br><span class="line">upstream serverlist &#123;</span><br><span class="line">    # 真实服务器</span><br><span class="line">    server 192.168.1.101:8080;</span><br><span class="line">    server 192.168.1.102:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 指定服务器集群</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;serverlist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负载均衡策略：</p><ul><li>轮询</li></ul><p>nginx默认使用轮询策略。</p><ul><li>权重</li></ul><p>给服务器集群的每台真实服务器添加权重，各个权重表示各个服务器被访问的频率比例。</p><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 服务器集群，serverlist是集群名称</span><br><span class="line">upstream serverlist &#123;</span><br><span class="line">    # 真实服务器，带权重</span><br><span class="line">    server 192.168.1.101:8080 weight&#x3D;1;</span><br><span class="line">    server 192.168.1.102:8080 weight&#x3D;2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 指定服务器集群</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;serverlist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ip_hash</li></ul><p>根据客户端ip分配真实服务器。</p><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 服务器集群，serverlist是集群名称</span><br><span class="line">upstream serverlist &#123;</span><br><span class="line">    # ip_hash</span><br><span class="line">    ip_hash;</span><br><span class="line">    # 真实服务器</span><br><span class="line">    server 192.168.1.101:8080;</span><br><span class="line">    server 192.168.1.102:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 指定服务器集群</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;serverlist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三方插件</li></ul><p>使用第三方插件，插件可能使用了其他策略。</p><h2 id="nginx配置https"><a href="#nginx配置https" class="headerlink" title="nginx配置https"></a>nginx配置https</h2><p>下面配置了Let’s Encrypt证书：</p><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line">    return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com&#x2F;fullchain.pem;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com&#x2F;privkey.pem;</span><br><span class="line"></span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;example;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装certbot和获取证书：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install certbot python3-certbot-nginx</span><br><span class="line">sudo certbot --nginx -d example.com -d www.example.com</span><br></pre></td></tr></table></figure><h2 id="nginx高可用"><a href="#nginx高可用" class="headerlink" title="nginx高可用"></a>nginx高可用</h2><p>以上都是基于单个nginx节点进行的配置，如果这个节点挂了那么整个后端服务都挂了。</p><p>为了实现nginx的高可用，一般是在多台服务器上部署nginx节点，在每台服务器上安装keepalived，再配置keepalived。</p><ol><li><p>准备多台服务器并部署nginx</p></li><li><p>在每个服务器上安装keepalived</p></li></ol><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y keepalived</span><br></pre></td></tr></table></figure><ol start="3"><li>配置keepalived</li></ol><p>文件路径：<code>/etc/keepalived/keepalived.conf</code></p><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">notification_email &#123;</span><br><span class="line">  acassen@firewall.loc</span><br><span class="line">  failover@firewall.loc</span><br><span class="line">  sysadmin@firewall.loc</span><br><span class="line">&#125;</span><br><span class="line">notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">    # 节点ip</span><br><span class="line">smtp_ server 192.168.232.166</span><br><span class="line">smtp_connect_timeout 30</span><br><span class="line">    # 节点ip</span><br><span class="line">router_id 192.168.232.166</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"># 定义chk_http_port</span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">    # nginx检测脚本</span><br><span class="line">script &quot;&#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx_check.sh&quot;</span><br><span class="line">interval 2</span><br><span class="line">    # 如果上面脚本检测成功则降低优先级，反之则相反</span><br><span class="line">weight -20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 节点配置</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    # 将这个节点配置为主节点，BACKUP为从节点</span><br><span class="line">state MASTER</span><br><span class="line">    # 使用的网络接口</span><br><span class="line">interface eth0</span><br><span class="line">    # VRID，必须在主备服务器上保持一致</span><br><span class="line">virtual_router_id 51</span><br><span class="line">    # 节点优先级，数值越大优先级越高</span><br><span class="line">priority 100</span><br><span class="line">    # 通告间隔时间，秒</span><br><span class="line">advert_int 1</span><br><span class="line">    # 认证密码，主从服务器必须保持一致</span><br><span class="line">authentication &#123;</span><br><span class="line">auth type PASS</span><br><span class="line">auth pass 1111</span><br><span class="line">        &#125;</span><br><span class="line">    # 虚拟ip，该ip需要配置和其他节点ip在同一个网段，主备节点共享</span><br><span class="line">virtual_ipaddress &#123; </span><br><span class="line">192.168.0.100</span><br><span class="line">&#125;</span><br><span class="line">#将 track_script 块加入 instance 配置块</span><br><span class="line">track_script &#123;</span><br><span class="line">    chk_http_port #执行 Nginx 监控服务</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>/usr/local/src</code>下添加<code>nginx_check.sh</code>文件</li></ol><figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否开启nginx</span></span><br><span class="line">A=`ps -C nginx --no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">        systemctl stop keepalived</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ol start="5"><li>启动keepalived</li></ol><p>在配置完所有的节点后，在每个节点启动keepalived。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> keepalived</span><br><span class="line">sudo systemctl start keepalived.service</span><br></pre></td></tr></table></figure><ol start="6"><li>验证配置</li></ol><p>6.1 在主节点上查看虚拟ip是否已经绑定到了接口。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure><p>6.2 在备用服务器上，停止主服务器的keepalived服务，检查虚拟IP是否切换到备用服务器。</p><p>6.3 检查日志文件确保keepalived正常工作。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/syslog</span><br><span class="line">cat /var/<span class="built_in">log</span>/messages</span><br></pre></td></tr></table></figure><ol start="7"><li>访问虚拟ip获取服务</li></ol><p>现在可以访问虚拟ip获取服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx的基本配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://herotiga.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>部署腾讯云轻量应用服务器</title>
    <link href="https://herotiga.github.io/2024/05/17/%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E8%BD%BB%E9%87%8F%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://herotiga.github.io/2024/05/17/%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E8%BD%BB%E9%87%8F%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2024-05-17T12:46:08.000Z</published>
    <updated>2024-08-25T06:10:32.112Z</updated>
    
    <content type="html"><![CDATA[<!-- https://blog.csdn.net/2401_83740107/article/details/137733791 --><p>买了新的腾讯云轻量应用服务器，记录一下部署服务器的过程。</p><a id="more"></a><h2 id="部署系统"><a href="#部署系统" class="headerlink" title="部署系统"></a>部署系统</h2><p>我选择了部署OpenCloudOS系统。</p><h2 id="切换shell"><a href="#切换shell" class="headerlink" title="切换shell"></a>切换shell</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前shell</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的shell</span></span><br><span class="line">cat /etc/shells</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看shell安装路径</span></span><br><span class="line"><span class="built_in">which</span> bash</span><br><span class="line"><span class="built_in">which</span> zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换shell</span></span><br><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><p>最后重启终端即可。</p><h2 id="安装tldr"><a href="#安装tldr" class="headerlink" title="安装tldr"></a>安装tldr</h2><p>安装tldr方便查询命令。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y tldr</span><br></pre></td></tr></table></figure><h2 id="安装neofetch"><a href="#安装neofetch" class="headerlink" title="安装neofetch"></a>安装neofetch</h2><p>安装neofetch查看系统信息。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y neofetch</span><br></pre></td></tr></table></figure><h2 id="安装bat"><a href="#安装bat" class="headerlink" title="安装bat"></a>安装bat</h2><p>安装bat替代cat：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://repo.openfusion.net/centos7-x86_64/bat-0.7.0-1.of.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum install -y bat-0.7.0-1.of.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><p>使用国内源安装nvm：<a href="https://gitee.com/RubyMetric/nvm-cn/">https://gitee.com/RubyMetric/nvm-cn/</a></p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://gitee.com/RubyMetric/nvm-cn/raw/main/install.sh | bash</span><br><span class="line"></span><br><span class="line">chmod +x ~/.nvm/nvm.sh</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>npm换源：<a href="https://gitee.com/RubyMetric/chsrc">https://gitee.com/RubyMetric/chsrc</a></p><h2 id="nvm安装nodejs"><a href="#nvm安装nodejs" class="headerlink" title="nvm安装nodejs"></a>nvm安装nodejs</h2><p>nvm命令：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看已安装的nodejs</span></span><br><span class="line">nvm list</span><br><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远端可以安装的nodejs</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nodejs</span></span><br><span class="line">nvm install [version_name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换nodejs版本</span></span><br><span class="line">nvm use system</span><br><span class="line">nvm use [version_name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新nvm</span></span><br><span class="line">nvm-update</span><br></pre></td></tr></table></figure><p>这里安装了20的LTS版本：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm install v20.13.1 </span><br><span class="line"></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>安装cnpm：<a href="https://npmmirror.com/">https://npmmirror.com/</a></p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br><span class="line"></span><br><span class="line">cnpm install [package]</span><br></pre></td></tr></table></figure><h2 id="安装PM2"><a href="#安装PM2" class="headerlink" title="安装PM2"></a>安装PM2</h2><p>PM2: <a href="https://pm2.keymetrics.io/">https://pm2.keymetrics.io/</a></p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装PM2</span></span><br><span class="line">npm install pm2 -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个进程</span></span><br><span class="line">pm2 start app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动多个进程，进程个数应设置为CPU核心数</span></span><br><span class="line">pm2 start app.js -i 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动一个进程，并命名该进程</span></span><br><span class="line">pm2 start app.js --name app_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控已启动的进程</span></span><br><span class="line">pm2 monit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程的日志</span></span><br><span class="line">pm2 logs app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有进程的日志</span></span><br><span class="line">pm2 logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程的详情</span></span><br><span class="line">pm2 show app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的进程</span></span><br><span class="line">pm2 list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止进程</span></span><br><span class="line">pm2 stop app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止所有进程</span></span><br><span class="line">pm2 stop all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉所有进程</span></span><br><span class="line">pm2 <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启进程</span></span><br><span class="line">pm2 restart app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启所有进程</span></span><br><span class="line">pm2 restart all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载进程</span></span><br><span class="line">pm2 reload app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载所有进程</span></span><br><span class="line">pm2 reload all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除进程</span></span><br><span class="line">pm2 delete app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有进程</span></span><br><span class="line">pm2 delete all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">pm2 startup</span><br><span class="line">pm2 save</span><br></pre></td></tr></table></figure><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装3.9</span></span><br><span class="line">sudo yum install -y python39</span><br></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">sudo yum install -y nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx状态</span></span><br><span class="line">sudo systemctl status nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止nginx</span></span><br><span class="line">sudo systemctl stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">sudo systemctl restart nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统启动时启动nginx</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><p>编辑nginx配置文件：<code>/etc/nginx/nginx.conf</code></p><figure class="highlight plain"><figcaption><span>conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;  # 端口</span><br><span class="line">    server_name www.baidu.com;  # 域名或者ip</span><br><span class="line">    root &#x2F;www&#x2F;test;  # 代码路径</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root &#x2F;www&#x2F;test;</span><br><span class="line">        index index.jsp index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完配置文件后需要重新载入配置文件：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure><p>然后浏览器打开ip就发现nginx服务启动成功了。</p><p>最后再将前端项目通过SCP、SFTP等工具上传到<code>/www/test</code>下即可通过ip访问到页面。</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /path/to/your/<span class="built_in">local</span>/vue-app/dist username@your_server_ip:/path/to/your/server/vue-app/</span><br></pre></td></tr></table></figure><p>实际开发中一般通过CI/CD将代码部署到服务器上。</p><h2 id="安装caddy"><a href="#安装caddy" class="headerlink" title="安装caddy"></a>安装caddy</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo yum install -y caddy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">caddy version</span><br></pre></td></tr></table></figure><h2 id="安装htop"><a href="#安装htop" class="headerlink" title="安装htop"></a>安装htop</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y htop</span><br></pre></td></tr></table></figure><h2 id="配置防火墙规则"><a href="#配置防火墙规则" class="headerlink" title="配置防火墙规则"></a>配置防火墙规则</h2><p>这里配置了常用的规则。</p><p><img src="https://gcore.jsdelivr.net/gh/herotiga/cdn@master/img/article/%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99.png" alt="配置防火墙规则"></p><p>然后设置服务器实例套用规则。</p><h2 id="安装mysql-server"><a href="#安装mysql-server" class="headerlink" title="安装mysql-server"></a>安装mysql-server</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装server</span></span><br><span class="line">sudo yum install -y mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动server</span></span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止server</span></span><br><span class="line">sudo systemctl stop mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启server</span></span><br><span class="line">sudo systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动系统时自动启动mysql-server</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行安全安装向导</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录mysql</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>安全安装向导：</p><pre><code>Securing the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD COMPONENT can be used to test passwordsand improve security. It checks the strength of passwordand allows the users to set only those passwords which aresecure enough. Would you like to setup VALIDATE PASSWORD component?Press y|Y for Yes, any other key for No: y  #是否安装密码强度验证组件There are three levels of password validation policy:LOW    Length &gt;= 8MEDIUM Length &gt;= 8, numeric, mixed case, and special charactersSTRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  filePlease enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 2 #选择密码强度 ##上面选择不安装密码强度验证组件布显示这个Please set the password for root here.New password:   #设置root密码Re-enter new password:  #确认root密码Estimated strength of the password: 90 Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y  #是否确定使用上面的密码By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? (Press y|Y for Yes, any other key for No) : y  #是否删除匿名用户?Success.  Normally, root should only be allowed to connect from&apos;localhost&apos;. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n #是否禁止root远程登录... skipping.By default, MySQL comes with a database named &apos;test&apos; thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y #是否删除test数据库- Dropping test database...Success.- Removing privileges on test database...Success.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y #是否现在重新加载特权表Success.All done! </code></pre><p>mysql基本操作：</p><figure class="highlight sql"><figcaption><span>mysql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有的数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择数据库</span></span><br><span class="line"><span class="keyword">USE</span> database_name;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出数据库中所有的表</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">EXIT;</span><br><span class="line">QUIT;</span><br><span class="line">CTRL+D</span><br></pre></td></tr></table></figure><h2 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装jdk</span></span><br><span class="line">sudo yum install -y java-11-openjdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">java --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.22.0.7-2.oc8.x86_64'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$PATH:$JAVA_HOME/bin'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>购买域名后添加DNS解析记录：</p><p><img src="https://gcore.jsdelivr.net/gh/herotiga/cdn@master/img/article/typecasting.icu%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png" alt="typecasting.icu域名解析"></p><p>域名备案要提交的材料越来越多，各种实名认证、签署各种承诺书、还需要录制承诺视频。</p><p>妈的实在是太恶心了。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- 
https://blog.csdn.net/2401_83740107/article/details/137733791
 --&gt;

&lt;p&gt;买了新的腾讯云轻量应用服务器，记录一下部署服务器的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://herotiga.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>CSR, SSR, SSG分析</title>
    <link href="https://herotiga.github.io/2024/05/15/CSR-SSR-SSG/"/>
    <id>https://herotiga.github.io/2024/05/15/CSR-SSR-SSG/</id>
    <published>2024-05-15T14:28:34.000Z</published>
    <updated>2024-08-25T06:23:31.125Z</updated>
    
    <content type="html"><![CDATA[<!-- https://mp.weixin.qq.com/s/lYSOYf1Bll0mHJ36jtU7NQ --><p>前端开发中有三种渲染技术，分别是CSR（客户端渲染）、SSR（服务端渲染）、SSG（服务端静态站点生成）。</p><p>我们根据具体需求的不同来使用不同的技术。</p><a id="more"></a><h2 id="CSR（客户端渲染）"><a href="#CSR（客户端渲染）" class="headerlink" title="CSR（客户端渲染）"></a>CSR（客户端渲染）</h2><p>CSR是目前前端开发中最常用的渲染方式。</p><p>CSR渲染方式下，服务端提供给客户端静态html文件、css文件、js文件等，客户端获取到文件后在客户端渲染。</p><h3 id="CSR的优点"><a href="#CSR的优点" class="headerlink" title="CSR的优点"></a>CSR的优点</h3><ol><li>响应速度快：浏览器在html加载好后就可以渲染页面，无需等待各种接口请求的结果。</li><li>交互性好：因为页面的大部分处理逻辑在客户端执行，所以可以提供更加动态和交互性的用户体验。</li><li>服务器压力小：因为渲染是在客户端进行的，而服务端只需要提供数据接口，所以服务端压力小。</li><li>容易跨平台开发：CSR的逻辑主要是在客户端，所以可以更容易开发跨平台的应用。</li><li>部署简单：只需要部署build出来的代码即可。</li></ol><h3 id="CSR的缺点"><a href="#CSR的缺点" class="headerlink" title="CSR的缺点"></a>CSR的缺点</h3><ol><li>首屏加载时间长：因为需要下载很多静态文件，会导致首屏加载时间长，可能会出现白屏。</li><li>不利于SEO：由于数据是在客户端渲染的，所以不利于搜索引擎爬取页面内容。</li></ol><h2 id="SSR（服务端渲染）"><a href="#SSR（服务端渲染）" class="headerlink" title="SSR（服务端渲染）"></a>SSR（服务端渲染）</h2><p>SSR是在服务端渲染页面的技术。</p><p>SSR的渲染方式下，服务端收到客户端的请求后会根据用户请求的页面和数据来渲染完整的页面，然后将渲染好的页面返回给客户端，客户端直接渲染完整的页面。</p><h3 id="SSR的优点"><a href="#SSR的优点" class="headerlink" title="SSR的优点"></a>SSR的优点</h3><ol><li>首屏加载速度快：由于页面由服务端渲染完成了，所以客户端直接拿来渲染即可。</li><li>利于SEO：由于页面以及数据已经在服务端渲染好了，所以搜索引擎爬取时就可以获取到完整的页面，利于SEO。</li><li>降低了客户端负载：由于渲染是在服务端完成的，客户端没有了渲染压力，降低了客户端负载，负载从客户端转移到了服务端。</li><li>更安全：客户端不直接操作数据，所以减少了客户端可能得安全风险。</li><li>更好的可访问性：SSR确保了网页的内容对于无法执行js的用户依然可以访问，提高了站点的可访问性。</li></ol><h3 id="SSR的缺点"><a href="#SSR的缺点" class="headerlink" title="SSR的缺点"></a>SSR的缺点</h3><ol><li>服务端负载大：服务端承担了页面渲染的工作，导致了服务端负载上升。</li><li>开发变得复杂：SSR需要考虑组件在客户端和服务端的运行，导致了开发变得复杂。</li><li>不适用于动态内容页面：对于频繁更新的页面，SSR不适合。</li></ol><h2 id="SSG（服务端静态站点生成）"><a href="#SSG（服务端静态站点生成）" class="headerlink" title="SSG（服务端静态站点生成）"></a>SSG（服务端静态站点生成）</h2><p>SSG是在构建项目时生成静态站点的技术。</p><p>SSG方式下，我们需要编写模板文件以及数据文件，然后在构建时将这些文件转为静态的页面文件，这些页面文件会被部署到服务器上，用户在请求这些页面的时候会直接返给用户这些提前生成的页面文件而无需实时生成。</p><h3 id="SSG的优点"><a href="#SSG的优点" class="headerlink" title="SSG的优点"></a>SSG的优点</h3><ol><li>性能好：此时用户请求页面后，服务端直接返回给客户端提前生成好的页面文件，故而速度很快。</li><li>安全性好：服务端只提供静态文件，故而降低了安全风险。</li><li>容易部署：SSG最终生成的是静态文件，所以很容易部署。</li><li>适合静态网站：SSG适合不经常更新的网站。</li><li>利于SEO：由于页面以及数据已经在服务端渲染好了，所以搜索引擎爬取时就可以获取到完整的页面，利于SEO。</li></ol><h3 id="SSG的缺点"><a href="#SSG的缺点" class="headerlink" title="SSG的缺点"></a>SSG的缺点</h3><ol><li>动态性不好：页面是静态生成的，故而不好实现复杂的动态交互。</li><li>构建时间长：大型站点构建时间可能很长。</li><li>不适合动态内容：频繁更新会消耗服务端大量的资源（构建）。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- 
https://mp.weixin.qq.com/s/lYSOYf1Bll0mHJ36jtU7NQ
 --&gt;

&lt;p&gt;前端开发中有三种渲染技术，分别是CSR（客户端渲染）、SSR（服务端渲染）、SSG（服务端静态站点生成）。&lt;/p&gt;
&lt;p&gt;我们根据具体需求的不同来使用不同的技术。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://herotiga.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Next.js开发笔记</title>
    <link href="https://herotiga.github.io/2024/04/26/Nextjs%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>https://herotiga.github.io/2024/04/26/Nextjs%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</id>
    <published>2024-04-25T17:01:13.000Z</published>
    <updated>2024-08-25T06:23:31.125Z</updated>
    
    <content type="html"><![CDATA[<!-- https://www.bilibili.com/video/BV14t4y187Kk/?spm_id_from=333.337.search-card.all.click&vd_source=8c53c6425ea22c2a5a35c21ddac6a601 --><!-- https://mp.weixin.qq.com/s/J0yF-qynw9fTysrLzkqzQghttps://mp.weixin.qq.com/s/zKLN4tBJc5svYvxB1WkdLghttps://mp.weixin.qq.com/s/HLI4eQpV8IbA2Yt34vUv2Qhttps://blog.csdn.net/woyebuzhidao321/article/details/124133583https://www.jianshu.com/p/8b61ae94ac7fhttps://youmoxiang.blog.csdn.net/article/details/129518797https://zhuanlan.zhihu.com/p/645478020 --><p>Next.js是基于react的一个全栈框架，提供的功能和Nuxt.js基本一样。</p><a id="more"></a><p>Next.js主要是为了解决react的如下问题：</p><ul><li>js环境</li><li>首屏加载慢</li><li>安全问题</li><li>SEO</li></ul><p>Next.js通过将渲染这个过程移动到服务端（将生成DOM放在服务端完成）来解决以上问题，也就是SSR。</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest project-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ts</span></span><br><span class="line">npx create-next-app@latest --typescript project-name</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://gcore.jsdelivr.net/gh/herotiga/cdn@master/img/article/nextjs-catalogue.png" alt="nextjs目录结构"></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><p>静态路由是指在编译时就确定了路由和其对应的页面文件。</p><p>pages下创建文件即可生成对应的路由配置。</p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>可以在pages目录下创建文件名，文件名是变量的形式<code>[param].ts</code>。</p><p>比如，如果想获取一个article页面的参数id，可以在article下定义名为<code>[id].ts</code>的文件，然后在这个文件内可以使用<code>useRouter</code>来获取id。</p><h3 id="API静态路由"><a href="#API静态路由" class="headerlink" title="API静态路由"></a>API静态路由</h3><p>API路由允许我们再next.js项目章自定义服务端逻辑，可以处理客户端发起的http请求。</p><p>创建方法：</p><ol><li><p>在<code>pages/api</code>下创建一个文件，文件名即为路由，这里创建了<code>user.ts</code>文件。</p></li><li><p>在<code>user.ts</code>中编写处理请求的代码。</p></li></ol><figure class="highlight ts"><figcaption><span>user.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; NextApiRequest, NextApiResponse &#125; <span class="keyword">from</span> <span class="string">'next'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Data = &#123;</span><br><span class="line">    code: <span class="built_in">number</span></span><br><span class="line">    users: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">req: NextApiRequest, res: NextApiResponse&lt;Data&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> users: <span class="built_in">string</span>[] = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Charlie'</span>]</span><br><span class="line">    res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        users,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后访问地址为<code>/api/user</code>的API即可获取到数据。</li></ol><h3 id="API动态路由"><a href="#API动态路由" class="headerlink" title="API动态路由"></a>API动态路由</h3><p>除了上面的静态路由，next.js还可以实现动态路由（也就是在路由中允许参数）。</p><p>创建方法：</p><ol><li><p>在<code>pages/api</code>下创建一个文件，文件名形如<code>[id].ts</code>，文件名即为路由。</p></li><li><p>在<code>[id].ts</code>中编写处理请求的代码，在代码中可以获取到<code>id</code>。</p></li></ol><figure class="highlight ts"><figcaption><span>[id].ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; NextApiRequest, NextApiResponse &#125; <span class="keyword">from</span> <span class="string">'next'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Data = &#123;</span><br><span class="line">    message: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">req: NextApiRequest, res: NextApiResponse&lt;Data&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = req.query</span><br><span class="line">    res.status(<span class="number">200</span>).json(&#123; message: Received request <span class="keyword">for</span> ID: $&#123;id&#125; &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后访问地址为<code>/api/:id</code>的API即可获取到对应id的数据。</li></ol><h2 id="SSR-amp-SSG"><a href="#SSR-amp-SSG" class="headerlink" title="SSR &amp; SSG"></a>SSR &amp; SSG</h2><p>这里有3个重要的方法。</p><ul><li><p>getServerSideProps：服务端渲染，在请求时运行</p></li><li><p>getStaticProps：服务端生成，生成静态页面时运行</p></li><li><p>getStaticPaths：服务端生成，生成静态页面时运行</p></li></ul><h3 id="声明SSR页面"><a href="#声明SSR页面" class="headerlink" title="声明SSR页面"></a>声明SSR页面</h3><p>在页面组件内添加一个<code>getServerSideProps</code>函数。</p><figure class="highlight plain"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正常的页面组件</span><br><span class="line">const Post &#x3D; (&#123;data&#125;) &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;div&gt;&#123; data &#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Post</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将该页面声明为SSR页面，下方函数是在服务端执行的</span><br><span class="line">export async function getServerSideProps(context) &#123;</span><br><span class="line">    &#x2F;&#x2F; 取出id</span><br><span class="line">    const &#123; id &#125; &#x3D; context.query</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据id查询接口</span><br><span class="line">    const res &#x3D; await fetch(&#96;&#x2F;article&#x2F;$&#123;id&#125;&#96;).then(data &#x3D;&gt; data.json())</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里的props会被传入到上方组件中</span><br><span class="line">        props: &#123;</span><br><span class="line">            data: res,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明SSG页面"><a href="#声明SSG页面" class="headerlink" title="声明SSG页面"></a>声明SSG页面</h3><p>如果将以上代码的<code>getServerSideProps</code>改为<code>getStaticProps</code>，那么代码会在build的时候运行，此时文件会变为在build时渲染出来。</p><p>但是我们不知道用户会访问哪个id，所以需要搭配<code>getStaticPaths</code>来使用，getStaticPaths就是用来枚举用户可能访问的id。</p><p>下面生成一些用户可能访问的id：</p><figure class="highlight plain"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正常的页面组件</span><br><span class="line">const Post &#x3D; (&#123;data&#125;) &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;div&gt;&#123; data &#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Post</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将该页面声明为SSR页面，下方函数是在服务端执行的</span><br><span class="line">export async function getStaticProps(context) &#123;</span><br><span class="line">    &#x2F;&#x2F; 取出id</span><br><span class="line">    const &#123; id &#125; &#x3D; context.query</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据id查询接口</span><br><span class="line">    const res &#x3D; await fetch(&#96;&#x2F;article&#x2F;$&#123;id&#125;&#96;).then(data &#x3D;&gt; data.json())</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里的props会被传入到上方组件中</span><br><span class="line">        props: &#123;</span><br><span class="line">            data: res,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下面会在build阶段生成id从1到100的页面</span><br><span class="line">export async function getStaticPaths() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        paths: _.range(1, 100).map((id) &#x3D;&gt; &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                params: &#123;</span><br><span class="line">                    id: id + &#39;&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F; id未命中时退化为SSR</span><br><span class="line">        fallback: &#39;blocking&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fallback</code>的取值还有：false（404），true（退化到CSR）。</p><h3 id="增量静态生成（ISR）"><a href="#增量静态生成（ISR）" class="headerlink" title="增量静态生成（ISR）"></a>增量静态生成（ISR）</h3><h4 id="自动重新生成"><a href="#自动重新生成" class="headerlink" title="自动重新生成"></a>自动重新生成</h4><p>添加<code>revalidate</code>参数，表示这个静态页面最多可存活的秒数，如果当用户请求页面时这个页面已经生成了超过10s则会重新生成该页面。可以用来保证静态页面是最新的。</p><figure class="highlight plain"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正常的页面组件</span><br><span class="line">const Post &#x3D; (&#123;data&#125;) &#x3D;&gt; &#123;</span><br><span class="line">    return &lt;div&gt;&#123; data &#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Post</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将该页面声明为SSR页面，下方函数是在服务端执行的</span><br><span class="line">export async function getStaticProps(context) &#123;</span><br><span class="line">    &#x2F;&#x2F; 取出id</span><br><span class="line">    const &#123; id &#125; &#x3D; context.query</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据id查询接口</span><br><span class="line">    const res &#x3D; await fetch(&#96;&#x2F;article&#x2F;$&#123;id&#125;&#96;).then(data &#x3D;&gt; data.json())</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里的props会被传入到上方组件中</span><br><span class="line">        props: &#123;</span><br><span class="line">            data: res,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 最多存活10s</span><br><span class="line">        revalidate: 10,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 下面会在build阶段生成id从1到100的页面</span><br><span class="line">export async function getStaticPaths() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        paths: _.range(1, 100).map((id) &#x3D;&gt; &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                params: &#123;</span><br><span class="line">                    id: id + &#39;&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        &#x2F;&#x2F; id未命中时退化为SSR</span><br><span class="line">        fallback: &#39;blocking&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手动重新生成"><a href="#手动重新生成" class="headerlink" title="手动重新生成"></a>手动重新生成</h4><p>在<code>pages/api</code>目录下创建一个文件，文件名即路由，在文件中手动调用<code>revalidate</code>方法即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://nextjs.frontendx.cn/">https://nextjs.frontendx.cn/</a></li><li><a href="https://www.nextjs.cn/">https://www.nextjs.cn/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- 
https://www.bilibili.com/video/BV14t4y187Kk/?spm_id_from=333.337.search-card.all.click&amp;vd_source=8c53c6425ea22c2a5a35c21ddac6a601
 --&gt;

&lt;!-- 
https://mp.weixin.qq.com/s/J0yF-qynw9fTysrLzkqzQg
https://mp.weixin.qq.com/s/zKLN4tBJc5svYvxB1WkdLg
https://mp.weixin.qq.com/s/HLI4eQpV8IbA2Yt34vUv2Q
https://blog.csdn.net/woyebuzhidao321/article/details/124133583
https://www.jianshu.com/p/8b61ae94ac7f
https://youmoxiang.blog.csdn.net/article/details/129518797
https://zhuanlan.zhihu.com/p/645478020
 --&gt;


&lt;p&gt;Next.js是基于react的一个全栈框架，提供的功能和Nuxt.js基本一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://herotiga.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Nuxt.js开发笔记</title>
    <link href="https://herotiga.github.io/2024/04/25/Nuxtjs%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>https://herotiga.github.io/2024/04/25/Nuxtjs%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</id>
    <published>2024-04-25T15:32:19.000Z</published>
    <updated>2024-08-25T06:26:41.892Z</updated>
    
    <content type="html"><![CDATA[<p>Nuxt.js是基于vue的一个全栈（这里全栈的意思是支持CSR和SSR）开发框架或者说开发套件，支持SSR（服务端渲染）、SSG（静态站点生成）、SPA（单页面应用），它提供了vue不提供的路由、缓存、接口服务、SSR，并对开发场景做了大量优化，开箱即用。</p><a id="more"></a><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-nuxt-app my-app</span><br></pre></td></tr></table></figure><h2 id="FileBased（文件即路由）"><a href="#FileBased（文件即路由）" class="headerlink" title="FileBased（文件即路由）"></a>FileBased（文件即路由）</h2><p>只需要在pages下创建vue文件，即可访问，Nuxt.js会自动根据文件名注册路由。还支持路由嵌套、路由参数。</p><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><p>vue项目都是在客户端渲染的，导致我们的页面不能完整的被搜索引擎爬取收录，这个时候就可以搭建服务端渲染（SSR）来解决这个问题。</p><h3 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h3><p>在Nuxt.js中实现SEO只需要使用Nuxt.js提供的SEO接口：</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line">useSeoMeta(&#123;</span><br><span class="line"><span class="actionscript">    title: <span class="string">'电商'</span>,</span></span><br><span class="line"><span class="actionscript">    description: <span class="string">'描述'</span>,</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="服务端渲染接口数据"><a href="#服务端渲染接口数据" class="headerlink" title="服务端渲染接口数据"></a>服务端渲染接口数据</h3><h4 id="fetch"><a href="#fetch" class="headerlink" title="$fetch"></a>$fetch</h4><p>Nuxt.js内置了<code>$fetch</code>，可以代替axios。</p><h4 id="useAsyncData"><a href="#useAsyncData" class="headerlink" title="useAsyncData"></a>useAsyncData</h4><p><code>useAsyncData</code>是用于获取接口数据的方法，需要结合<code>$fetch</code>使用。</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"></span><br><span class="line">useSeoMeta(&#123;</span><br><span class="line"><span class="actionscript">    title: <span class="string">'电商'</span>,</span></span><br><span class="line"><span class="actionscript">    description: <span class="string">'描述'</span>,</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> list = ref([])</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> useAsyncData(</span></span><br><span class="line"><span class="actionscript">  <span class="string">'id'</span>, <span class="comment">// 需要给定唯一的id</span></span></span><br><span class="line">  () =&gt;</span><br><span class="line"><span class="actionscript">    $fetch(<span class="string">'https://xxx.xxx.com'</span>, &#123;</span></span><br><span class="line">      headers: &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// ...</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  &#123;</span><br><span class="line"><span class="actionscript">    pick: [<span class="string">'data'</span>], <span class="comment">// 选择返回对象中想要的属性</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// lazy: false, // 这里默认为false 会阻塞路由渲染，（一定要等到数据请求回来后才会跳转路由）</span></span></span><br><span class="line"><span class="actionscript">    lazy: <span class="literal">true</span> <span class="comment">// 不会阻塞路由跳转，但是会导致跳转后无数据，需要通过watch监听数据后赋值</span></span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">list.value = data.value</span><br><span class="line">watch(data, () =&gt; &#123;</span><br><span class="line">    list.value = data.value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果对于获取的数据不需要处理，则无需监听可以在获取到data后直接渲染到页面上。</p><p>这样就可以像CSR一样使用data来渲染页面了。</p><p>此时接口的数据是在服务端完成的渲染，这样对于SEO友好，并且可以解决首屏加载慢的问题，因为页面都已经在服务端渲染好了。</p><h4 id="useFetch"><a href="#useFetch" class="headerlink" title="useFetch"></a>useFetch</h4><p><code>useFetch</code>是useAsyncData的语法糖，它不需要传入id。</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line">useSeoMeta(&#123;</span><br><span class="line"><span class="actionscript">    title: <span class="string">'电商'</span>,</span></span><br><span class="line"><span class="actionscript">    description: <span class="string">'描述'</span>,</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> useFetch(</span></span><br><span class="line"><span class="actionscript">    <span class="string">'https://a.com/xxx'</span>,</span></span><br><span class="line">    &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// ...</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        transform: <span class="function"><span class="params">res</span> =&gt;</span> res.data.list, <span class="comment">// 选择返回对象中想要的属性</span></span></span><br><span class="line"><span class="actionscript">        lazy: <span class="literal">true</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="useLazyFetch"><a href="#useLazyFetch" class="headerlink" title="useLazyFetch"></a>useLazyFetch</h4><p><code>useLazyFetch</code>是lazy为true的useFetch。</p><h3 id="服务端接口"><a href="#服务端接口" class="headerlink" title="服务端接口"></a>服务端接口</h3><p>Nuxt.js还可以写自己的服务端接口。</p><p>比如在server目录下创建api目录，目录下创建接口文件，可以直接读取数据库。实现了一个真实的api接口。</p><h2 id="组件自动导入"><a href="#组件自动导入" class="headerlink" title="组件自动导入"></a>组件自动导入</h2><p>Nuxt.js中如果要使用一个组件，不需要再导入这个组件了，可以直接使用。</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>Nuxt.js可以使用中间件（middleware）来实现比如鉴权等功能。</p><ol><li><p>创建中间件</p></li><li><p>在具体页面组件中使用中间件。</p></li></ol><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line">definePageMeta(&#123;</span><br><span class="line"><span class="actionscript">    middleware: <span class="string">'middlewareName'</span>,</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">useSeoMeta(&#123;</span><br><span class="line"><span class="actionscript">    title: <span class="string">'电商'</span>,</span></span><br><span class="line"><span class="actionscript">    description: <span class="string">'描述'</span>,</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> useFetch(<span class="string">'https://a.com/xxx'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了这些之外，Nuxt.js还支持页面渲染配置、过渡动画、状态管理、单元测试等等，以及社区资源。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nuxt.js是基于vue的一个全栈（这里全栈的意思是支持CSR和SSR）开发框架或者说开发套件，支持SSR（服务端渲染）、SSG（静态站点生成）、SPA（单页面应用），它提供了vue不提供的路由、缓存、接口服务、SSR，并对开发场景做了大量优化，开箱即用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://herotiga.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Express路由配置</title>
    <link href="https://herotiga.github.io/2024/04/21/Express%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/"/>
    <id>https://herotiga.github.io/2024/04/21/Express%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</id>
    <published>2024-04-21T02:22:41.000Z</published>
    <updated>2024-08-25T06:21:35.809Z</updated>
    
    <content type="html"><![CDATA[<p>服务器端路由是指：服务器端根据客户端请求的不同路径、http方法来执行不同的处理逻辑。</p><a id="more"></a><h2 id="静态路由配置"><a href="#静态路由配置" class="headerlink" title="静态路由配置"></a>静态路由配置</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line"><span class="keyword">const</span> server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由，第一个参数是路径，第二个参数是处理函数</span></span><br><span class="line">server.get(<span class="string">'/'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">'hello'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/about'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">'about'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">server.listen(port, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server started on port 3333'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="动态路由配置"><a href="#动态路由配置" class="headerlink" title="动态路由配置"></a>动态路由配置</h2><p>动态路由是指：路径中带有参数的路由。</p><p>在express中，可以使用<code>:param</code>来定义动态参数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.get(<span class="string">'/user/:userId'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = req.params.userId</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据userId处理逻辑</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模块化管理路由"><a href="#模块化管理路由" class="headerlink" title="模块化管理路由"></a>模块化管理路由</h2><p>一般不会将路由直接写在server中，可以将所有的路由划分模块，然后引入。</p><p>创建模块化路由的步骤</p><ol><li>创建路由模块文件。</li><li>调用<code>express.Router()</code>创建路由对象。</li><li>在路由对象上挂载具体的路由。</li><li>使用<code>module.exports</code>向外共享路由对象。</li><li>使用<code>server.use()</code>注册路由模块。</li></ol><p>代码实例，先创建路由模块，比如这里创建了user相关的两个路由：</p><figure class="highlight ts"><figcaption><span>userRouter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载具体路由</span></span><br><span class="line">router.get(<span class="string">'/user/list'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理路由</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/user/add'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理路由</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外导出路由</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p>在创建server的文件中导入上面的模块：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">'./userRouter'</span>)</span><br><span class="line"><span class="comment">// 注册路由模块</span></span><br><span class="line">server.use(userRouter)</span><br><span class="line">server.listen(<span class="number">80</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'server started on port 80'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>为模块添加前缀</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处省略其他代码</span></span><br><span class="line">server.use(<span class="string">'/api'</span>, userRouter)</span><br></pre></td></tr></table></figure><h2 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h2><p>除了静态路由和动态路由之外，还可以使用路由中间件来拦截路由并进行处理。</p><p>路由中间件是一个函数，它可以访问请求对象 (req)、响应对象 (res) 和应用中的下一个中间件函数 (next)。中间件函数可以执行各种任务，如修改请求和响应对象、执行身份验证、日志记录等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行一些处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行了中间件函数'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行下一个中间件函数或者路由处理函数</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>下面定义了一个错误处理中间件，发生错误时会打印错误信息，向客户端返回一个500状态码和响应。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line"></span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">'服务器错误'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="处理跨域"><a href="#处理跨域" class="headerlink" title="处理跨域"></a>处理跨域</h2><p>客户端在发送请求之前会先发送一个<code>OPTIONS</code>请求，用于试探服务器是否能接受请求。如果服务端响应404、403、500就会停止继续请求。</p><p>下面的代码是处理这种情况的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server.all(<span class="string">'*'</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type'</span>)</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'*'</span>)</span><br><span class="line">    res.header(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.method.toLowerCase() === <span class="string">'options'</span>) &#123;</span><br><span class="line">        res.send(<span class="number">200</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a>完整实例</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理跨域</span></span><br><span class="line">server.all(<span class="string">'*'</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type'</span>)</span><br><span class="line">    res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'*'</span>)</span><br><span class="line">    res.header(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.method.toLowerCase() === <span class="string">'options'</span>) &#123;</span><br><span class="line">        res.send(<span class="number">200</span>)  <span class="comment">//让options尝试请求快速结束</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">server.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行了中间件函数'</span>)</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态路由</span></span><br><span class="line">server.get(<span class="string">'/users/:userId/books/:bookId'</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userId = req.params.userId</span><br><span class="line">    <span class="keyword">const</span> bookId = req.params.bookId</span><br><span class="line">    res.send(<span class="string">`User ID: <span class="subst">$&#123;userId&#125;</span>, Book ID: <span class="subst">$&#123;bookId&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 错误处理中间件</span></span><br><span class="line">server.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="string">'服务器错误'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">server.listen(<span class="number">3333</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server started on port 3333'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器端路由是指：服务器端根据客户端请求的不同路径、http方法来执行不同的处理逻辑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://herotiga.github.io/categories/Node-js/"/>
    
      <category term="Express" scheme="https://herotiga.github.io/categories/Node-js/Express/"/>
    
    
  </entry>
  
  <entry>
    <title>SQLite学习笔记</title>
    <link href="https://herotiga.github.io/2023/09/21/SQLite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://herotiga.github.io/2023/09/21/SQLite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-21T05:36:44.000Z</published>
    <updated>2024-08-27T06:26:06.494Z</updated>
    
    <content type="html"><![CDATA[<p><code>SQLite</code>是一个轻量级的嵌入式关系型数据库。</p><p>主要应用场景：</p><ul><li>嵌入式设备</li><li>移动应用</li><li>桌面应用</li></ul><a id="more"></a><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>SQLite是跨平台的（包括windows、macOS、Linux、iOS、Android等）。</p><p>官网下载安装：<a href="https://www.sqlite.org/download.html">https://www.sqlite.org/download.html</a></p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>通过命令行创建数据库：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 database_name.db</span><br></pre></td></tr></table></figure><p>也可以在项目代码中创建数据库。</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>SQLite的CRUD和MySQL一样，都是用的SQL。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>SQLite采用动态数据类型，插入什么数据类型就是什么数据类型，但最终插入表中的数据只能是以下五种类型。</p><h3 id="SQLite中的数据类型"><a href="#SQLite中的数据类型" class="headerlink" title="SQLite中的数据类型"></a>SQLite中的数据类型</h3><ol><li>NULL: 空值</li><li>INTEGER: 有符号的整型</li><li>REAL: 浮点数</li><li>TEXT: 字符串</li><li>BLOB: 二进制对象</li></ol><h3 id="Affinity类型"><a href="#Affinity类型" class="headerlink" title="Affinity类型"></a>Affinity类型</h3><p>Affinity类型就是建议类型。</p><p>在插入数据时，SQLite会根据你传入的值来转为建议类型，如果不能转，则使用你传入的数据类型进行存储。</p><p>Boolean类型会被存储为0(false)或者1(true)。</p><p>Date类型会被存储为TEXT, REAL, INTEGER。</p><h3 id="常见SQL数据库数据类型和SQLite数据类型对照"><a href="#常见SQL数据库数据类型和SQLite数据类型对照" class="headerlink" title="常见SQL数据库数据类型和SQLite数据类型对照"></a>常见SQL数据库数据类型和SQLite数据类型对照</h3><ol><li>INTEGER: INT, INTEGER, TINYINT, SMALLINT, MEDIUMINT, BIGINT, UNSIGNED BIG INT</li><li>REAL: REAL, FLOAT, DOUBLE, DOUBLE PRECISION</li><li>TEXT: CHARACTER, VARCHAR, VARYING CHARACTER, NCHAR, NATIVE CHARACTER, NVARCHAR, TEXT, CLOB</li><li>NUMERIC: NUMERIC, DECIMAL, BOOLEAN, DATE, DATETIME</li><li>BLOB: BLOB</li></ol><h2 id="关闭数据库连接"><a href="#关闭数据库连接" class="headerlink" title="关闭数据库连接"></a>关闭数据库连接</h2><p>可以通过SQL命令关闭SQLite：</p><figure class="highlight sql"><figcaption><span>sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.quit</span><br></pre></td></tr></table></figure><p>或者在项目代码中关闭SQLite。</p><h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><p>SQLite数据库文件就是一个普通的文件，备份时复制它，需要恢复时复制回来即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;SQLite&lt;/code&gt;是一个轻量级的嵌入式关系型数据库。&lt;/p&gt;
&lt;p&gt;主要应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嵌入式设备&lt;/li&gt;
&lt;li&gt;移动应用&lt;/li&gt;
&lt;li&gt;桌面应用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="SQLite" scheme="https://herotiga.github.io/categories/SQLite/"/>
    
    
  </entry>
  
  <entry>
    <title>fastjson学习笔记</title>
    <link href="https://herotiga.github.io/2023/09/07/fastjson%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://herotiga.github.io/2023/09/07/fastjson%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-07T06:55:48.000Z</published>
    <updated>2024-08-27T07:07:35.188Z</updated>
    
    <content type="html"><![CDATA[<p><code>fastjson</code> 是一个Java的JSON序列化库，用于在Java对象和JSON字符串之间的互相转换。</p><p>fastjson可以将Java对象转为JSON字符串（序列化），也可以将JSON字符串转为java对象（反序列化）。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><p>在Maven项目的 <code>pom.xml</code> 文件中添加fastjson依赖。</p><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>引入fastjson和相关包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br></pre></td></tr></table></figure><p>fastjson的入口类是 <code>com.alibaba.fastjson.JSON</code>，提供了两个核心方法：</p><ul><li><code>JSON.toJSONString</code>：将Java对象序列化为JSON字符串</li><li><code>JSON.parseObject</code>：将JSON字符串解析为Java对象</li></ul><ol start="2"><li>创建JSON对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">jsonObject.put(<span class="string">"name"</span>, <span class="string">"Mason"</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>将List转为JSON</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造List</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;string&gt;();</span><br><span class="line">list.add(<span class="string">"item1"</span>);</span><br><span class="line">list.add(<span class="string">"item2"</span>);</span><br><span class="line">list.add(<span class="string">"item3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一：先把List转为JSONArray，再使用toString()转为JSON</span></span><br><span class="line">JSONArray jsonArray = <span class="keyword">new</span> JSONArray(list);</span><br><span class="line">String json = jsonArray.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：使用JSON.toJSONString()直接将List转为JSON</span></span><br><span class="line">String json = JSON.toJSONString(list);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;fastjson&lt;/code&gt; 是一个Java的JSON序列化库，用于在Java对象和JSON字符串之间的互相转换。&lt;/p&gt;
&lt;p&gt;fastjson可以将Java对象转为JSON字符串（序列化），也可以将JSON字符串转为java对象（反序列化）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://herotiga.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈hooks</title>
    <link href="https://herotiga.github.io/2023/08/02/hooks/"/>
    <id>https://herotiga.github.io/2023/08/02/hooks/</id>
    <published>2023-08-02T09:06:23.000Z</published>
    <updated>2024-08-25T06:26:42.069Z</updated>
    
    <content type="html"><![CDATA[<!--     https://baijiahao.baidu.com/s?id=1727232708471611959&wfr=spider&for=pc --><p>Vue3和React16.8都已经支持了 <code>hooks</code> 作为组件编写的方式。</p><a id="more"></a><p>什么是hooks？</p><article class="message is-info"><div class="message-body"><p>钩子编程是通过拦截软件模块间的函数调用、消息传递、事件传递来修改或扩展操作系统、应用程序或其他软件组件的行为的各种技术。处理被拦截的函数调用、事件、消息的代码，被称为钩子(hooks)。</p></div></article><h2 id="React中的hooks"><a href="#React中的hooks" class="headerlink" title="React中的hooks"></a>React中的hooks</h2><p>React只能在函数组件中使用hooks。</p><p>React中的hooks指的是以 <code>use</code> 开头的一系列方法，可以让我们避开class component写法，在函数式组件中完成全部的开发。</p><p>hooks函数以 <code>use</code> 开头是计算机中对于hooks约定俗成的写法。</p><h2 id="Vue中的hooks"><a href="#Vue中的hooks" class="headerlink" title="Vue中的hooks"></a>Vue中的hooks</h2><p>Vue只能在 <code>setup</code> 中使用hooks。</p><p>Vue中的hooks指的是以 <code>use</code> 开头的方法，他们提供了组件复用状态管理等能力，除此之外，Vue的组合式API也是一种hooks。</p><h2 id="hooks的优点"><a href="#hooks的优点" class="headerlink" title="hooks的优点"></a>hooks的优点</h2><ol><li>hooks可以将业务逻辑清晰划分解耦。</li><li>hooks可复用性高、状态逻辑复用清晰，可以替代 <code>mixin</code>。</li><li>避免了class组件需要频繁使用 <code>bind</code> 的麻烦。</li></ol><h2 id="React-hooks实例"><a href="#React-hooks实例" class="headerlink" title="React hooks实例"></a>React hooks实例</h2><figure class="highlight plain"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useState, useEffect &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">const Demo &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 创建name状态和set方法</span><br><span class="line">    const [name, setName] &#x3D; useState(&#39;&#39;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 处理副作用</span><br><span class="line">    useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(name)</span><br><span class="line">        &#125;,</span><br><span class="line">        [name]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 依赖name动态计算message</span><br><span class="line">    const message &#x3D; useMemo(() &#x3D;&gt; &#123;</span><br><span class="line">        return &#96;my name is $&#123;name&#125;&#96;</span><br><span class="line">    &#125;, [name])</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt; &#123;message&#125; &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Demo</span><br></pre></td></tr></table></figure><h2 id="Vue-hooks实例"><a href="#Vue-hooks实例" class="headerlink" title="Vue hooks实例"></a>Vue hooks实例</h2><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> name = ref(<span class="string">''</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> message = computed(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">return</span> <span class="string">`my name is <span class="subst">$&#123;name.value&#125;</span>`</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h2><p>自定义hook是一种重用状态逻辑的方法。</p><p>下面以react hook为例，如何自定义一个hook：</p><ol><li>给hook命名：以use开头。</li><li>编写函数：写一个普通的函数，函数内可以使用其他的hook。</li><li>使用写好的hook：在其他组件中可以使用编写好的hook，在组件中可以使用它返回的任何状态和函数。</li></ol><p>自定义react hook实例：</p><figure class="highlight plain"><figcaption><span>jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useState &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自定义Hook：用于追踪和更新计数</span><br><span class="line">function useCounter(initialCount) &#123;</span><br><span class="line">  const [count, setCount] &#x3D; useState(initialCount)</span><br><span class="line"></span><br><span class="line">  const increment &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    setCount(prevCount &#x3D;&gt; prevCount + 1)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const decrement &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    setCount(prevCount &#x3D;&gt; prevCount - 1)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123; count, increment, decrement &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在组件中使用自定义Hook</span><br><span class="line">function CounterComponent() &#123;</span><br><span class="line">  const &#123; count, increment, decrement &#125; &#x3D; useCounter(0)</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Count: &#123;count&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;increment&#125;&gt;Increment&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;decrement&#125;&gt;Decrement&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default CounterComponent</span><br></pre></td></tr></table></figure><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ol><li><a href="https://mp.weixin.qq.com/s/a1A7b6nzqNpZuv8KkN8nug">https://mp.weixin.qq.com/s/a1A7b6nzqNpZuv8KkN8nug</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- 

    https://baijiahao.baidu.com/s?id=1727232708471611959&amp;wfr=spider&amp;for=pc

 --&gt;

&lt;p&gt;Vue3和React16.8都已经支持了 &lt;code&gt;hooks&lt;/code&gt; 作为组件编写的方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://herotiga.github.io/categories/React/"/>
    
      <category term="Vue" scheme="https://herotiga.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>TypeScript中type（类型别名）和interface（接口）的区别</title>
    <link href="https://herotiga.github.io/2023/06/20/typescript%E4%B8%ADtype%E5%92%8Cinterface%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://herotiga.github.io/2023/06/20/typescript%E4%B8%ADtype%E5%92%8Cinterface%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2023-06-20T08:17:04.000Z</published>
    <updated>2024-08-25T06:25:46.654Z</updated>
    
    <content type="html"><![CDATA[<p><code>type</code> 和 <code>interface</code> 存在着很大的相同点，也存在不同点。</p><p>整理一下两者的基本概念、相同点、区别。</p><a id="more"></a><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>type就是类型别名，type可以表示基本类型、对象、联合类型、元组、交集。</p><h3 id="定义类型别名"><a href="#定义类型别名" class="headerlink" title="定义类型别名"></a>定义类型别名</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"><span class="keyword">type</span> name = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> age = <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象类型</span></span><br><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合类型</span></span><br><span class="line"><span class="keyword">type</span> id = <span class="built_in">string</span> | <span class="built_in">number</span></span><br></pre></td></tr></table></figure><h3 id="使用类型别名"><a href="#使用类型别名" class="headerlink" title="使用类型别名"></a>使用类型别名</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p: Person = &#123;</span><br><span class="line">    name: <span class="string">'wang'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，type中的类型也可以是其他已经定义的类型别名。</p><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><p>interface就是接口。</p><p>interface只能描述对象的类型。</p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，interface中的类型也可以是其他已经定义的接口。</p><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ol><li>都可以用来描述对象类型。</li><li>都可以用来描述函数。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type描述函数的入参类型和返回值类型</span></span><br><span class="line"><span class="keyword">type</span> FunctionType = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface描述函数的入参类型和返回值类型</span></span><br><span class="line"><span class="keyword">interface</span> FunctionInterface &#123;</span><br><span class="line">    (a: numnber, b: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>都可以实现继承</li></ol><p>type可以继承type，interface可以继承interface。<br>同时，type和interface也可以相互继承。</p><p>type通过 <code>&amp;</code> 继承type或者interface。<br>interface通过 <code>extends</code> 继承type或者interface。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type继承type</span></span><br><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engineer = Person &amp; &#123;</span><br><span class="line">    occupation: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface继承interface</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Engineer <span class="keyword">extends</span> Person &#123;</span><br><span class="line">   occupation: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type继承interface</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engineer = Person &amp; &#123;</span><br><span class="line">    occupation: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface继承type</span></span><br><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Engineer <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    occupation: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>都可以使用可选属性 <code>[propName] ?: [type]</code></li></ol><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ol><li>type可以基本类型、联合类型、元组类型而interface不可以。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描述元组</span></span><br><span class="line"><span class="keyword">type</span> Item = [<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li>定义多个同名的interface可以合并，而定义多个同名的type会报错。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优先用interface。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;type&lt;/code&gt; 和 &lt;code&gt;interface&lt;/code&gt; 存在着很大的相同点，也存在不同点。&lt;/p&gt;
&lt;p&gt;整理一下两者的基本概念、相同点、区别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="https://herotiga.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>解决浏览器自动填充密码框的问题</title>
    <link href="https://herotiga.github.io/2023/06/16/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E5%AF%86%E7%A0%81%E6%A1%86%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://herotiga.github.io/2023/06/16/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E5%AF%86%E7%A0%81%E6%A1%86%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2023-06-16T06:01:52.000Z</published>
    <updated>2024-08-25T06:26:42.072Z</updated>
    
    <content type="html"><![CDATA[<p>做项目的时候遇到了浏览器自动填充了密码框的问题。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>创建完密码框后给密码框一个 <code>readonly=&#39;true&#39;</code> 属性，在 <code>focus</code> 的时候再将 <code>readonly</code> 设为 <code>false</code>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><img src="https://gcore.jsdelivr.net/gh/herotiga/cdn@master/img/article/Vue%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E5%AF%86%E7%A0%81%E6%A1%86%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="code"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做项目的时候遇到了浏览器自动填充了密码框的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://herotiga.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>前端下载文件的几种方案</title>
    <link href="https://herotiga.github.io/2023/06/12/%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/"/>
    <id>https://herotiga.github.io/2023/06/12/%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/</id>
    <published>2023-06-12T06:42:14.000Z</published>
    <updated>2024-08-25T06:25:46.700Z</updated>
    
    <content type="html"><![CDATA[<p>梳理一下前端下载文件的几种方案。</p><a id="more"></a><hr><h2 id="方案一：a标签下载"><a href="#方案一：a标签下载" class="headerlink" title="方案一：a标签下载"></a>方案一：a标签下载</h2><p>创建a标签，手动触发点击事件下载。</p><p>创建的a标签形如：<code>&lt;a href=&quot;file_url&quot; download=&quot;file_name&quot;&gt;file_title&lt;/a&gt;</code>。</p><p><code>download</code> 属性只在同源下生效。</p><figure class="highlight ts"><figcaption><span>ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a标签下载</span></span><br><span class="line"><span class="comment"> * @param file 来自接口返回的blob或者文件路径</span></span><br><span class="line"><span class="comment"> * @param fileName 文件名</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">file: Blob | <span class="built_in">string</span>, fileName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = (file <span class="keyword">instanceof</span> Blob) ? <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([file])) : file</span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    a.style.display = <span class="string">'none'</span></span><br><span class="line">    a.href = url</span><br><span class="line">    a.download = fileName</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(a)</span><br><span class="line">    a.click()</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(a)</span><br><span class="line">    <span class="built_in">window</span>.URL.revokeObjectURL(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案二：window-open"><a href="#方案二：window-open" class="headerlink" title="方案二：window.open"></a>方案二：window.open</h2><p><code>window.open</code> 可以直接调用浏览器的下载。</p><h2 id="方案三：使用插件"><a href="#方案三：使用插件" class="headerlink" title="方案三：使用插件"></a>方案三：使用插件</h2><p>可以使用js-file-downloader：<a href="https://www.npmjs.com/package/js-file-downloader">https://www.npmjs.com/package/js-file-downloader</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> JsFileDownloader <span class="keyword">from</span> <span class="string">'js-file-downloader'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileUrl = <span class="string">'http://...'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> JsFileDownloader(&#123;</span><br><span class="line">    url: fileUrl</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 下载完毕回调函数</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;梳理一下前端下载文件的几种方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="https://herotiga.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
</feed>
