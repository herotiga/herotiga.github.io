<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2021-09-29T09:26:49.647Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason小王子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用node.js爬取静态页面</title>
    <link href="https://herotiga.github.io/2021/09/29/%E4%BD%BF%E7%94%A8node-js%E7%88%AC%E5%8F%96%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/"/>
    <id>https://herotiga.github.io/2021/09/29/%E4%BD%BF%E7%94%A8node-js%E7%88%AC%E5%8F%96%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5/</id>
    <published>2021-09-29T06:32:27.000Z</published>
    <updated>2021-09-29T09:26:49.647Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫就是向目标url发送请求，然后把服务器的相应解析为我们需要的格式。<br>下面爬取整个页面，也可以根据个人需求爬取自己需要的信息。</p><a id="more"></a><h2 id="安装request库"><a href="#安装request库" class="headerlink" title="安装request库"></a>安装request库</h2><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># request库用于发送请求</span></span><br><span class="line">cnpm install request</span><br><span class="line"><span class="comment"># cheerio是jQuery核心代码, 用于操作请求返回的DOM</span></span><br><span class="line">cnpm install cheerio</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><figure class="highlight js"><figcaption><span>node</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'请输入要爬取的url:'</span>);</span><br><span class="line"></span><br><span class="line">rl.question(<span class="string">'url:'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    url = res;</span><br><span class="line">    rl.close();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正在爬取...'</span>);</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">'爬取耗时'</span>);</span><br><span class="line">    request(url, (err, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'err:'</span> + <span class="string">''</span> + err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'爬取成功！'</span>);</span><br><span class="line">            <span class="built_in">console</span>.timeEnd(<span class="string">'爬取耗时'</span>);</span><br><span class="line">            <span class="keyword">let</span> $ = cheerio.load(res.body);</span><br><span class="line">            <span class="keyword">let</span> DOM = $(<span class="string">'html'</span>).prop(<span class="string">'outerHTML'</span>);</span><br><span class="line">            <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'正在写入文件...'</span>);</span><br><span class="line">            <span class="built_in">console</span>.time(<span class="string">'写入耗时'</span>);</span><br><span class="line">            fs.writeFile(<span class="string">'./output/output_'</span>+ now + <span class="string">'.html'</span>, DOM, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'写入失败，错误信息：'</span> + err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'写入成功！'</span>);</span><br><span class="line">                    <span class="built_in">console</span>.timeEnd(<span class="string">'写入耗时'</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'文件路径：'</span> + __dirname + <span class="string">'/output/output_'</span> + now + <span class="string">'.html'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行正常：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/%E8%BF%90%E8%A1%8C%E7%88%AC%E8%99%AB.png" alt=""></p><p>爬取成功：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/%E7%88%AC%E5%8F%96%E5%86%85%E5%AE%B9.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬虫就是向目标url发送请求，然后把服务器的相应解析为我们需要的格式。&lt;br&gt;下面爬取整个页面，也可以根据个人需求爬取自己需要的信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node.js" scheme="https://herotiga.github.io/categories/node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>变量提升(hoisting)</title>
    <link href="https://herotiga.github.io/2021/09/23/hoisting/"/>
    <id>https://herotiga.github.io/2021/09/23/hoisting/</id>
    <published>2021-09-23T01:19:38.000Z</published>
    <updated>2021-09-28T09:21:45.515Z</updated>
    
    <content type="html"><![CDATA[<p><code>var</code> 和 <code>function</code> 的声明毫无疑问是会被提升到其所在的全局作用域顶部或者函数作用域顶部的。<br>故而，对于 <code>var</code> 和 <code>function</code> 可以先使用后声明。</p><p>但是对于 <code>let</code> 和 <code>const</code> ，各种文章教程都说不会被js提升。<br>但是我从暂时性死区(TDZ)中发现其实他们俩也是存在变量提升的，只是他们被提升的时候不会在js内部被初始化。</p><a id="more"></a><hr><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>对于 <code>let</code> ，具有块级作用域，会被提升到其所在代码块顶部，不能重复声明，存在TDZ。</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>对于 <code>const</code> ，具有块级作用域，会被提升到其所在代码块顶部，一旦声明就无法改变其值，不能重复声明，存在TDZ。<br>故而，需要在声明的时候同时初始化。</p><p>我们可以看到 <code>let</code> 和 <code>const</code> 的唯一区别就是 <code>const</code> 需要申明时初始化否则报错，而且不能改变其值。<br>其他都相同，包括两者都存在TDZ。</p><p>因此造成了 <code>let</code> 和 <code>const</code> 由于TDZ的存在而不能在声明前使用。</p><!-- 深入阅读：https://www.jianshu.com/p/0f49c88cf169 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;function&lt;/code&gt; 的声明毫无疑问是会被提升到其所在的全局作用域顶部或者函数作用域顶部的。&lt;br&gt;故而，对于 &lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;function&lt;/code&gt; 可以先使用后声明。&lt;/p&gt;
&lt;p&gt;但是对于 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; ，各种文章教程都说不会被js提升。&lt;br&gt;但是我从暂时性死区(TDZ)中发现其实他们俩也是存在变量提升的，只是他们被提升的时候不会在js内部被初始化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记——变量的解构赋值</title>
    <link href="https://herotiga.github.io/2021/09/10/es6-note-03-%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>https://herotiga.github.io/2021/09/10/es6-note-03-%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</id>
    <published>2021-09-10T06:57:06.000Z</published>
    <updated>2021-09-28T09:21:52.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="对称解构"><a href="#对称解构" class="headerlink" title="对称解构"></a>对称解构</h4><p>只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p><p>一次性给三个变量赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><a id="more"></a><p>给多维数组赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, [c, d]] = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br></pre></td></tr></table></figure><p>rest:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">tail</span><br><span class="line"><span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>如果解构不成功则被赋值为 <code>undefined</code> 。</p><h4 id="非对称解构"><a href="#非对称解构" class="headerlink" title="非对称解构"></a>非对称解构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 也成功</span></span><br></pre></td></tr></table></figure><p>如果等号的右边是不可比遍历的解构则报错。</p><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 成功</span></span><br></pre></td></tr></table></figure><p>只要数据类型具有Iterator接口就可以使用数组结构。</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>指定默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [name = <span class="string">'mason'</span>] = [];</span><br><span class="line">name <span class="comment">// 'mason'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></span><br></pre></td></tr></table></figure><p>es6内部判断一个位置是否有值： 严格等于 <code>undefined</code> 才会赋予默认值，也就是说除了 <code>undefined</code> 不能作为默认值其他都可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>];</span><br><span class="line"><span class="comment">// x = 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>];</span><br><span class="line"><span class="comment">// x = null</span></span><br></pre></td></tr></table></figure><p>如果默认值是一个表达式，那么这个表达式不会执行并返回值，因为表达式是惰性求值的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a = f()] = [<span class="number">2</span>];</span><br><span class="line"><span class="comment">// a为2</span></span><br></pre></td></tr></table></figure><h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组的解构赋值&quot;&gt;&lt;a href=&quot;#数组的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;数组的解构赋值&quot;&gt;&lt;/a&gt;数组的解构赋值&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;h4 id=&quot;对称解构&quot;&gt;&lt;a href=&quot;#对称解构&quot; class=&quot;headerlink&quot; title=&quot;对称解构&quot;&gt;&lt;/a&gt;对称解构&lt;/h4&gt;&lt;p&gt;只要等号两边的模式相同，左边的变量就会被赋予对应的值。&lt;/p&gt;
&lt;p&gt;一次性给三个变量赋值：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, b, c] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [x, , y] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记——let和const</title>
    <link href="https://herotiga.github.io/2021/09/08/es6-note-02-let-const/"/>
    <id>https://herotiga.github.io/2021/09/08/es6-note-02-let-const/</id>
    <published>2021-09-08T09:28:56.000Z</published>
    <updated>2021-09-28T09:21:58.187Z</updated>
    
    <content type="html"><![CDATA[<p><code>let</code> 和 <code>const</code> 是es6新增的用于声明变量的命令 。<br><code>let</code> 用于可以代替 <code>var</code> ，用于声明作用域为该代码块的变量。<br><code>const</code> 用于声明作用域为该代码块的常量。</p><a id="more"></a><h2 id="es5和es6声明变量的几种方式"><a href="#es5和es6声明变量的几种方式" class="headerlink" title="es5和es6声明变量的几种方式"></a>es5和es6声明变量的几种方式</h2><h3 id="es5"><a href="#es5" class="headerlink" title="es5"></a>es5</h3><ul><li><code>var</code></li><li><code>function</code></li></ul><h3 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h3><ul><li><p><code>var</code></p></li><li><p><code>function</code></p></li><li><p><code>let</code></p></li><li><p><code>const</code></p></li><li><p><code>import</code></p></li><li><p><code>class</code></p></li></ul><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>ES6新增了 <code>let</code> 命令用于声明变量，只在所在代码块内有效。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的i的作用域仅仅在循环体内</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i</span><br><span class="line"><span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里var声明的i为全局变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><code>for</code> 循环中： <code>()</code> 内和 <code>{}</code> 内不是同一个作用域， <code>()</code> 位于 <code>{}</code> 的父作用域，孤儿 <code>{}</code> 内部可以再次声明已经在 <code>()</code> 中声明过的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 这里重新声明了i覆盖了上面的声明</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>另外：在同一个作用域内不可以使用 <code>let</code> 重复声明同一个变量。</p><h3 id="没有变量提升"><a href="#没有变量提升" class="headerlink" title="没有变量提升"></a>没有变量提升</h3><p><code>var</code> 有变量提升。<br><code>let</code> 没有变量提升。</p><p>故而， <code>let</code> 需要先声明后使用。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var，这里使用var声明的foo会被提升到顶部，但是对于foo的赋值没有被提升到顶部，故而可以获取到foo但是为undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let，这里使用let声明的bar不会被提升到顶部，会报引用错误</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="暂时性死区-TDZ"><a href="#暂时性死区-TDZ" class="headerlink" title="暂时性死区(TDZ)"></a>暂时性死区(TDZ)</h3><p>只要块级作用域内存在 <code>let</code> ，那么它所声明的变量就绑定了这个作用域且不受外部影响。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><article class="message is-warning"><div class="message-body"><p>这里很奇怪的一点就是：js代码是自上往下顺序执行的，代码块内如何提前知道下面有let声明了某个在let之前就被操作了的变量并在let之前就抛出错误呢？</p><p>找到了<a href="https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-hoisted">stackoverflow</a>的说法：let和const也是存在变量提升的，只是不像var变量提升的时候会被初始化为undefined，let和const会一直保持未初始化的状态。</p></div></article><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// TDZ开始</span></span><br><span class="line">    temp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tmp;</span><br><span class="line">    <span class="comment">// TDZ结束</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正因为 <code>let</code> 的TDZ特性，使得很多在 <code>let</code> 声明一个变量之前对于这个变量做的操作失效。</p><p>故而，在一个代码块内，对于一个变量，一定要先使用 <code>let</code> 声明后使用。</p><p>实例：隐蔽的死区</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x = y, y = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>这里y还没声明就赋值给了x，也就是y还没被声明就被使用了，此时为TDZ故而报错。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="keyword">var</span> x = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> x = x;</span><br></pre></td></tr></table></figure><p>软神的这句话可能有误：</p><blockquote><p>ES6 规定暂时性死区和let、const语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。</p></blockquote><pre><code>总而言之：需要先let声明后使用，否则就报错。</code></pre><h3 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h3><p>不允许使用 <code>let</code> 在同一作用域内多次声明一个变量，否则报错。</p><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><h3 id="es5作用域"><a href="#es5作用域" class="headerlink" title="es5作用域"></a>es5作用域</h3><p>es5的作用域：只有全局作用域和函数内作用域。</p><p>实例：函数体内部的声明覆盖了全局声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = <span class="string">'abc'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这里编写代码的本意是在 <code>console.log</code> 这行使用外部 <code>tmp</code> ，在 <code>if</code> 循环体内部重新声明变量 <code>tmp</code> ，但是结果却是 <code>undefined</code> 。<br>原因是循环体内部对于 <code>tmp</code> 的声明被提升到了函数的顶部，故而 <code>console.log</code> 打印的是已经被在函数内声明的 <code>tmp</code> 。</p><p>实例：计数变量泄露为全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// h</span></span><br><span class="line"><span class="comment">// e</span></span><br><span class="line"><span class="comment">// l</span></span><br><span class="line"><span class="comment">// l</span></span><br><span class="line"><span class="comment">// o</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>这里的 <code>i</code> 最终被计算成了5，并且是一个全局变量，造成了变量泄露。</p><h3 id="es6作用域"><a href="#es6作用域" class="headerlink" title="es6作用域"></a>es6作用域</h3><p>es6的作用域： <code>let</code> 为js提供了块作用域， <code>let</code> 声明的变量作用域仅在其所处的代码块内，并且外层代码块不受内层代码块的影响。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里声明的n的作用域在函数内部</span></span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> n = <span class="number">10</span>; <span class="comment">// 这里声明的n的作用域仅在if内部</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例：es6允许块作用域任意层嵌套， 内层可以访问外层，外层无法访问内层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1</span>; &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">2</span>; &#123;</span><br><span class="line">            <span class="keyword">let</span> num = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块作用域可以替代IIFE：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 外部不可访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 块作用域替代</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部不可访问</span></span><br></pre></td></tr></table></figure><h3 id="块作用域和函数声明"><a href="#块作用域和函数声明" class="headerlink" title="块作用域和函数声明"></a>块作用域和函数声明</h3><p>那么函数可以在块作用域内声明吗？</p><p>es5：只能在全局声明或者函数内作用域声明，但是浏览器不会报错。</p><p>es6：允许在块作用域内声明函数。</p><p>实例：下面的代码在es5中运行会得到 <code>I am inside!</code> ，因为if内部的重新声明会被提升到函数顶部从而覆盖了外部的声明。<br>而如果在es6中运行理论上会得到 <code>I am outside!</code> 但是实际上在浏览器中运行都会报错，原因是这段代码在es5和在es6中的运行结果截然相反，故而会导致严重的问题，为了保证对es5的兼容会在es6中报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 重复声明一次函数f</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>故而不要在块作用域内部声明函数或者如果要声明也要携程函数表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不建议</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要在块内部声明函数则用表达式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es6的块作用域必须有大括号 <code>{}</code> ，否则js不认为其是块作用域。<br>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有写大括号，报错</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数作用域仅在if内部</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>const</code> 声明一个只读的常量，其指向一个内存空间，内存空间内容不可改变。<br>故而 <code>const</code> 声明时就要赋值，因为一旦声明之后就无法改变。</p><p><code>const</code> 的作用域和 <code>let</code> 一样：只在其所声明的块作用域内有效。<br><code>const</code> 也存在TDZ，也需要先声明并赋值后使用。<br><code>const</code> 也不可以重复声明。</p><h3 id="const的本质"><a href="#const的本质" class="headerlink" title="const的本质"></a>const的本质</h3><p><code>const</code> 实质上是保证 <code>const</code> 变量指向的内存空间的内容不变。<br>对于基本数据类型而言：指向的内存空间就是保存了基本类型的数据（布尔，字符串，数字），故而一旦使用 <code>const</code> 声明了基本数据类型就无法改变。<br>对于符合数据类型而言：指向的内存空间保存了这个复杂类型的指针，而指针又指向了另外一个或者多个内存空间，这里的内存空间才是真正保存了复杂类型下的基本类型的值。</p><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'mason'</span>;</span><br><span class="line">person.age = <span class="number">22</span>;</span><br><span class="line"><span class="comment">// 修改person对象的属性均成功</span></span><br><span class="line"></span><br><span class="line">person = &#123;&#125;;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// 这里给person赋了一个新的值&#123;&#125;，这里的&#123;&#125;内存地址和原来的不一样故报错</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line">arr.push(<span class="string">'a'</span>);</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="string">'b'</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// 这里给arr赋值了新的内存空间故而报错</span></span><br></pre></td></tr></table></figure><h2 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h2><p>浏览器中的顶层对象是 <code>window</code> 对象。<br>node环境中的顶层对象是 <code>global</code> 对象。</p><p>在es5中：顶层对象的属性和全局变量等价。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.person = <span class="string">'mason'</span>;</span><br><span class="line">person <span class="comment">// 'mason'</span></span><br><span class="line"></span><br><span class="line">person <span class="comment">// 'mason'</span></span><br><span class="line"><span class="built_in">window</span>.person <span class="comment">// 'mason'</span></span><br></pre></td></tr></table></figure><p>在es6中： <code>var</code> 和 <code>function</code> 声明的仍然是顶层对象的属性（或者说全局变量），而 <code>let</code> , <code>const</code> , <code>class</code> 声明的全局变量不属于顶层对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两种写法等价</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'mason'</span>;</span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">'mason'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let声明的变量不属于顶层对象的属性</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'mason'</span>;</span><br><span class="line"><span class="built_in">window</span>.name</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="globalThis对象"><a href="#globalThis对象" class="headerlink" title="globalThis对象"></a>globalThis对象</h2><p>上面说了js在浏览器环境和在node环境中的顶层对象不同，或者说“在各个js的实现里面，顶层对象不统一。”</p><p>为了能让代码能适应多个实现的环境，在es2020里面引入了 <code>globalThis</code> 对象，该对象存在于所有环境，可以通过其拿到顶层对象。</p><figure class="highlight js"><figcaption><span>浏览器环境</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局作用域下，以下均为true</span></span><br><span class="line"><span class="built_in">window</span> === <span class="keyword">this</span></span><br><span class="line"><span class="built_in">window</span> === globalThis</span><br><span class="line"><span class="keyword">this</span> === globalThis</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>node</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局作用域下，以下均为true</span></span><br><span class="line">global === <span class="keyword">this</span></span><br><span class="line">global === globalThis</span><br><span class="line"><span class="keyword">this</span> === globalThis</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; 是es6新增的用于声明变量的命令 。&lt;br&gt;&lt;code&gt;let&lt;/code&gt; 用于可以代替 &lt;code&gt;var&lt;/code&gt; ，用于声明作用域为该代码块的变量。&lt;br&gt;&lt;code&gt;const&lt;/code&gt; 用于声明作用域为该代码块的常量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6学习笔记——简介</title>
    <link href="https://herotiga.github.io/2021/09/08/es6-note-01-%E7%AE%80%E4%BB%8B/"/>
    <id>https://herotiga.github.io/2021/09/08/es6-note-01-%E7%AE%80%E4%BB%8B/</id>
    <published>2021-09-08T09:28:14.000Z</published>
    <updated>2021-09-28T09:22:03.124Z</updated>
    
    <content type="html"><![CDATA[<p>es6笔记</p><!-- ES6教程来自阮一峰老师：https://es6.ruanyifeng.com/ --><a id="more"></a><h2 id="ECMAScript和JavaScript的关系"><a href="#ECMAScript和JavaScript的关系" class="headerlink" title="ECMAScript和JavaScript的关系"></a>ECMAScript和JavaScript的关系</h2><p>ECMAScript是JavaScript的规格，JavaScript是ECMAScript的一种实现（还有JScript和ActionScript）。<br>日常场合，这两个词是可以互换的。</p><h2 id="ES6与ECMAScript2015的关系"><a href="#ES6与ECMAScript2015的关系" class="headerlink" title="ES6与ECMAScript2015的关系"></a>ES6与ECMAScript2015的关系</h2><p>ES6既是一个历史名词，也是一个泛指，含义是5.1版以后的JavaScript的下一代标准，涵盖了ES2015、ES2016、ES2017等等，而ES2015则是正式名称，特指该年发布的正式版本的语言标准。本书中提到ES6的地方，一般是指ES2015标准，但有时也是泛指“下一代JavaScript语言”。</p><h2 id="ECMAScript的历史"><a href="#ECMAScript的历史" class="headerlink" title="ECMAScript的历史"></a>ECMAScript的历史</h2><p>Node.js是JavaScript的服务器运行环境（runtime）。它对ES6的支持度更高。除了那些默认打开的功能，还有一些语法功能已经实现了，但是默认没有打开。使用下面的命令，可以查看Node.js默认没有打开的ES6实验性语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux &amp; Mac</span></span><br><span class="line">$ node --v8-options | grep harmony</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">$ node --v8-options | findstr harmony</span><br></pre></td></tr></table></figure><h2 id="Babel转码器"><a href="#Babel转码器" class="headerlink" title="Babel转码器"></a>Babel转码器</h2><p>Babel是一个es6转码器，可以将es6转为es5代码以提高es6代码的向下兼容。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转码前, es6的肩头函数</span></span><br><span class="line">input.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转码后, es5的普通函数</span></span><br><span class="line">input.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在项目目录中使用Babel：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev @babel/core</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>安装完了第一步就是要配置 <code>.babelrc</code> 文件。</p><p>配置文件存在于项目根目录下，用于配置转码规则和插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 用于设定转码规则</span><br><span class="line">    &quot;presets&quot;: [],</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 用于设定插件 </span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装转码规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最新转码规则</span></span><br><span class="line">$ npm install --save-dev @babel/preset-env</span><br><span class="line"></span><br><span class="line"><span class="comment"># react转码规则</span></span><br><span class="line">$ npm install --save-dev @babel/preset-react</span><br></pre></td></tr></table></figure><p>添加到 <code>.babelrc</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">      &quot;@babel&#x2F;env&quot;,</span><br><span class="line">      &quot;@babel&#x2F;preset-react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="命令行转码"><a href="#命令行转码" class="headerlink" title="命令行转码"></a>命令行转码</h3><p>安装命令行转码器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev @babel/cli</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转码结果输出到标准输出</span></span><br><span class="line">$ npx babel example.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转码结果写入一个文件</span></span><br><span class="line"><span class="comment"># --out-file 或 -o 参数指定输出文件</span></span><br><span class="line">$ npx babel example.js --out-file compiled.js</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ npx babel example.js -o compiled.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个目录转码</span></span><br><span class="line"><span class="comment"># --out-dir 或 -d 参数指定输出目录</span></span><br><span class="line">$ npx babel src --out-dir lib</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ npx babel src -d lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 参数生成source map文件</span></span><br><span class="line">$ npx babel src -d lib -s</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>阮一峰ES6教程：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6笔记&lt;/p&gt;
&lt;!-- ES6教程来自阮一峰老师：https://es6.ruanyifeng.com/ --&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js类型转换</title>
    <link href="https://herotiga.github.io/2021/09/08/js%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://herotiga.github.io/2021/09/08/js%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-09-08T03:09:23.000Z</published>
    <updated>2021-09-10T06:30:43.689Z</updated>
    
    <content type="html"><![CDATA[<p>js中时长发生着各种类型转换，有显式的有隐式的。<br>本文总结了js中的类型转换的场景和类型。</p><a id="more"></a><h2 id="js中的数据类型"><a href="#js中的数据类型" class="headerlink" title="js中的数据类型"></a>js中的数据类型</h2><p>js中的数据类型可以分为：基本数据类型和引用数据类型。</p><p>基本数据类型：</p><ul><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li><li>symbol</li><li>bigint</li></ul><p>引用数据类型：</p><ul><li>object</li><li>Array</li><li>Date</li><li>RegExp</li><li>Math</li><li>Error</li><li>Number</li><li>String</li><li>Boolean</li><li>function</li></ul><h2 id="类型之间的转换"><a href="#类型之间的转换" class="headerlink" title="类型之间的转换"></a>类型之间的转换</h2><p>类型转换分为显式转换和隐式转换。</p><p>显式转换：代码中使用函数进行类型转换。<br>隐式转换：不同数据类型之间使用运算符的时候，js自动的进行了类型转换。</p><p>类型转换最终只会转换成三种数据类型：</p><ul><li>Number: <code>Number()</code>, <code>parseInt()</code>, <code>parseFloat()</code></li><li>String: <code>String()</code>, <code>toString()</code></li><li>Boolean: <code>Boolean()</code></li></ul><h2 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h2><p>显式转换： <code>Boolean(2)</code></p><p>隐式转换：逻辑运算时触发， <code>if(2){}</code> , <code>!!2</code> , <code>2&amp;&amp;true</code></p><p>只有以下会被转为 <code>false</code> ，其余的都是 <code>true</code> ：</p><ul><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code></li><li><code>null</code></li><li><code>undefined</code></li></ul><h2 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h2><p>显式转换： <code>String([1, 2, 3])</code> , <code>String({})</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">'2'</span></span><br><span class="line"><span class="comment">// '12'</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> + &#123;&#125;</span><br><span class="line"><span class="comment">// 1[object Object]</span></span><br></pre></td></tr></table></figure><p>隐式转换：使用 <code>+</code> 连接一个string的时候触发，或者使用 <code>+</code> 连接一个bject的时候触发。</p><h2 id="转换为数字"><a href="#转换为数字" class="headerlink" title="转换为数字"></a>转换为数字</h2><p>显式转换： <code>Number()</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'10px'</span>)</span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'10'</span>)</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="built_in">Symbol</span>())</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">12312412321312312n</span>)</span><br><span class="line"><span class="comment">// 12312412321312312</span></span><br></pre></td></tr></table></figure><p>隐式转换：在比较运算符、按位操作、算术运算以及 <code>+</code> 触发。</p><h2 id="转换规则"><a href="#转换规则" class="headerlink" title="==转换规则"></a>==转换规则</h2><p><code>==</code> 运算符如果两边类型不同会进行类型转换。</p><ul><li><code>对象==字符串</code>：会将对象转换为字符串。</li><li><code>对象==对象</code>：比较指针。</li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>Q:<br><code>let result = 100 + true + 21.2 + null + undefined + &quot;Tencent&quot; + [] + null + 9 + false;</code> 结果是什么？</p><p>A:<br><code>100 + true</code><br><code>101</code> , 加号两边存在数字则将另一个转为数组</p><p><code>101 + 21.2</code><br><code>122.2</code> , 数字加数字</p><p><code>122.2 + null</code><br><code>122.2</code> , 加号两边存在数字则将另一个转为数字</p><p><code>122.2 + undefined</code><br><code>NaN</code> , 加号两边存在数字则将 <code>undefined</code> 转为 <code>NaN</code> ，结果仍为 <code>NaN</code></p><p><code>NaN + &quot;Tencent&quot;</code><br><code>&quot;NaNTencent&quot;</code> , 加号两边存在字符串则将另一个转为字符串</p><p><code>&quot;NaNTencent&quot; + []</code><br><code>&quot;NaNTencent&quot;</code> , 加号两边存在字符串则将另一个 <code>[]</code> 转为字符串 <code>&quot;&quot;</code></p><p><code>&quot;NaNTencent&quot; + null</code><br><code>&quot;NaNTencentnull&quot;</code> , <code>null</code> 转为字符串为 <code>null</code></p><p><code>&quot;NaNTencentnull&quot; + 9</code><br><code>&quot;NaNTencentnull9&quot;</code> , 两边存在字符串，将 <code>9</code> 转为字符串</p><p><code>&quot;NaNTencentnull9&quot; + false</code><br><code>&quot;NaNTencentnull9false&quot;</code> , 同上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js中时长发生着各种类型转换，有显式的有隐式的。&lt;br&gt;本文总结了js中的类型转换的场景和类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>使用es6简化代码</title>
    <link href="https://herotiga.github.io/2021/09/08/es6%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81/"/>
    <id>https://herotiga.github.io/2021/09/08/es6%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81/</id>
    <published>2021-09-08T02:48:29.000Z</published>
    <updated>2021-09-28T09:22:09.889Z</updated>
    
    <content type="html"><![CDATA[<p>es6简化代码。</p><a id="more"></a><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><p>使用 <code>var</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5 5 5 5 5</span></span><br></pre></td></tr></table></figure><p>使用 <code>let</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 1 2 3 4</span></span><br></pre></td></tr></table></figure><p>es5使用闭包可以实现块作用域的效果。</p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="使用解构简化变量声明和赋值"><a href="#使用解构简化变量声明和赋值" class="headerlink" title="使用解构简化变量声明和赋值"></a>使用解构简化变量声明和赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="使用解构交换变量"><a href="#使用解构交换变量" class="headerlink" title="使用解构交换变量"></a>使用解构交换变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> tmp;</span><br><span class="line">tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a]</span><br></pre></td></tr></table></figure><h3 id="使用对象解构给对象赋值"><a href="#使用对象解构给对象赋值" class="headerlink" title="使用对象解构给对象赋值"></a>使用对象解构给对象赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    x,</span><br><span class="line">    y</span><br><span class="line">&#125; = obj;</span><br></pre></td></tr></table></figure><h3 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数解构"><a href="#函数参数解构" class="headerlink" title="函数参数解构"></a>函数参数解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PERSON = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    name,</span></span></span><br><span class="line"><span class="function"><span class="params">    age</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>今年<span class="subst">$&#123;age&#125;</span>岁`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getAge(PERSON);</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数内部 <code>this</code> 指向定义时所在对象且固定不变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> func(param) &#123;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6, 没参数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> ret</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6, 单个参数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">param</span> =&gt;</span> ret</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6, 多个参数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function">(<span class="params">param1, param2</span>) =&gt;</span> ret</span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>用于在字符串中嵌入变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NAME = <span class="string">'Mason'</span>;</span><br><span class="line"><span class="keyword">const</span> AGE = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">const</span> SELF_STATEMENT = <span class="string">`My name is <span class="subst">$&#123;NAME&#125;</span>, 今年<span class="subst">$&#123;AGE&#125;</span>岁`</span>;</span><br></pre></td></tr></table></figure><h2 id="展开符"><a href="#展开符" class="headerlink" title="展开符"></a>展开符</h2><p><code>... 变量名</code> 用于获取函数的多余参数可以代替 <code>arguments</code> 对象。<br><code>... 变量名</code> 可以将一个数组转化为用逗号隔开的参数序列 <code>param1, param2, ...paramN</code></p><p>用展开符合并数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr = [...arr1, ...arr2];</span><br></pre></td></tr></table></figure><p>用展开符取得对象中的属性和方法并拷贝到新对象中，只能对基本数据类型拷贝，如果成员含有引用类型则为浅拷贝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'Mason'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    ...obj1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对象字面量简写"><a href="#对象字面量简写" class="headerlink" title="对象字面量简写"></a>对象字面量简写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Mason'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    printName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组的-includes-判断数组中是否存在给定值"><a href="#数组的-includes-判断数组中是否存在给定值" class="headerlink" title="数组的 includes() 判断数组中是否存在给定值"></a>数组的 <code>includes()</code> 判断数组中是否存在给定值</h2><p>可以判断是否含有 <code>NaN</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="async-await-异步语法"><a href="#async-await-异步语法" class="headerlink" title="async/await 异步语法"></a><code>async/await</code> 异步语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">let</span> html = <span class="keyword">await</span> response.text();</span><br><span class="line">    <span class="keyword">return</span> html.match(<span class="regexp">/&lt;title&gt;([sS]+)&lt;/</span>title &gt; <span class="regexp">/i)[1] </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">getData(url).then(res) =&gt; console.log('success!');</span></span><br></pre></td></tr></table></figure><p>上面代码的执行顺序是：先执行 <code>getData()</code> 里面的三个操作，等待三个操作全部执行完毕再执行 <code>then()</code> 中的语句。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6简化代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js调试技巧</title>
    <link href="https://herotiga.github.io/2021/09/06/js%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://herotiga.github.io/2021/09/06/js%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</id>
    <published>2021-09-06T09:26:15.000Z</published>
    <updated>2021-09-07T02:36:38.491Z</updated>
    
    <content type="html"><![CDATA[<p>js调试技巧</p><a id="more"></a><h2 id="缩短-console-log"><a href="#缩短-console-log" class="headerlink" title="缩短 console.log"></a>缩短 <code>console.log</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cl = <span class="built_in">console</span>.log.bind(<span class="built_in">document</span>);</span><br><span class="line">cl(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h2 id="使用table展示数组和对象"><a href="#使用table展示数组和对象" class="headerlink" title="使用table展示数组和对象"></a>使用table展示数组和对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.table(obj);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js调试技巧&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js删除数组中元素的几种方法</title>
    <link href="https://herotiga.github.io/2021/09/06/js%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/09/06/js%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-09-06T06:30:02.000Z</published>
    <updated>2021-09-07T02:36:43.468Z</updated>
    
    <content type="html"><![CDATA[<p>js删除数组中元素的几种方法。</p><a id="more"></a><h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">arr = [];</span><br></pre></td></tr></table></figure><h2 id="截断数组（保留前半部分）"><a href="#截断数组（保留前半部分）" class="headerlink" title="截断数组（保留前半部分）"></a>截断数组（保留前半部分）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.length = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><h2 id="delete-命令将指定元素置为-undefined"><a href="#delete-命令将指定元素置为-undefined" class="headerlink" title="delete 命令将指定元素置为 undefined"></a><code>delete</code> 命令将指定元素置为 <code>undefined</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h2 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> last = arr.pop();</span><br></pre></td></tr></table></figure><h2 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> first = arr.shift();</span><br></pre></td></tr></table></figure><h2 id="splice-删除替换指定元素"><a href="#splice-删除替换指定元素" class="headerlink" title="splice() 删除替换指定元素"></a><code>splice()</code> 删除替换指定元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.splice(begin_index, delete_num, insert_item1, ..., insert_itemN);</span><br></pre></td></tr></table></figure><h2 id="slice-删除指定元素"><a href="#slice-删除指定元素" class="headerlink" title="slice() 删除指定元素"></a><code>slice()</code> 删除指定元素</h2><h2 id="Array-prototype-上添加方法"><a href="#Array-prototype-上添加方法" class="headerlink" title="Array.prototype 上添加方法"></a><code>Array.prototype</code> 上添加方法</h2><p>不推荐</p><h2 id="循环迭代"><a href="#循环迭代" class="headerlink" title="循环迭代"></a>循环迭代</h2><p>多种方法可以遍历数组元素并删除元素，此处省略一万字。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js删除数组中元素的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js获取数组中的最小值和最大值的几种方法</title>
    <link href="https://herotiga.github.io/2021/09/06/js%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E5%92%8C%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/09/06/js%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E5%92%8C%E6%9C%80%E5%A4%A7%E5%80%BC%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-09-06T05:45:37.000Z</published>
    <updated>2021-09-10T01:05:37.480Z</updated>
    
    <content type="html"><![CDATA[<p>js获取数组中的最小值和最大值的几种方法。</p><a id="more"></a><h2 id="Math-max-配合扩展符"><a href="#Math-max-配合扩展符" class="headerlink" title="Math.max()配合扩展符"></a>Math.max()配合扩展符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">3</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...nums);</span><br><span class="line"><span class="keyword">let</span> min = <span class="built_in">Math</span>.min(...nums);</span><br></pre></td></tr></table></figure><h2 id="Math-max-配合apply"><a href="#Math-max-配合apply" class="headerlink" title="Math.max()配合apply()"></a>Math.max()配合apply()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">3</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, nums); <span class="comment">// 24</span></span><br><span class="line"><span class="keyword">let</span> min = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, nums); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="Math-max-配合reduce"><a href="#Math-max-配合reduce" class="headerlink" title="Math.max()配合reduce()"></a>Math.max()配合reduce()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">3</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> max = nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(prev, cur);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> min = nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min(prev, cur);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort()排序"></a>sort()排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">3</span>, <span class="number">9</span>];</span><br><span class="line">nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> min = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> max = nums[nums.length - <span class="number">1</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js获取数组中的最小值和最大值的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js计算代码运行时间</title>
    <link href="https://herotiga.github.io/2021/09/06/js%E8%AE%A1%E7%AE%97%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
    <id>https://herotiga.github.io/2021/09/06/js%E8%AE%A1%E7%AE%97%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</id>
    <published>2021-09-06T03:12:41.000Z</published>
    <updated>2021-09-23T03:19:44.299Z</updated>
    
    <content type="html"><![CDATA[<p>js计算代码运行时间。</p><a id="more"></a><h2 id="利用-performance-计时"><a href="#利用-performance-计时" class="headerlink" title="利用 performance 计时"></a>利用 <code>performance</code> 计时</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> START_TIME = performance.now();</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line"><span class="keyword">const</span> END_TIME = performance.now();</span><br><span class="line"><span class="keyword">const</span> DURATION = END_TIME - START_TIME;</span><br><span class="line">cosnole.log(DURATION);</span><br></pre></td></tr></table></figure><h2 id="利用-console-time-计时"><a href="#利用-console-time-计时" class="headerlink" title="利用 console.time 计时"></a>利用 <code>console.time</code> 计时</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'timer_name'</span>);</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'timer_name'</span>);</span><br></pre></td></tr></table></figure><h2 id="手写计时器"><a href="#手写计时器" class="headerlink" title="手写计时器"></a>手写计时器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> START_TIME = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line"><span class="keyword">const</span> END_TIME = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> DURATION = END_TIME - START_TIME;</span><br><span class="line">cosnole.log(DURATION);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js计算代码运行时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>split, splice和slice</title>
    <link href="https://herotiga.github.io/2021/09/06/split-splice-slice/"/>
    <id>https://herotiga.github.io/2021/09/06/split-splice-slice/</id>
    <published>2021-09-06T01:22:16.000Z</published>
    <updated>2021-09-27T02:49:24.828Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>String.prototype.split()</code></li><li><code>Array.prototype.splice()</code></li><li><code>Array.prototype.slice()</code></li></ul><p>一直记不得这三个哪个是哪个，加强记忆一下。<br>以下摘录自MDN。</p><a id="more"></a><h2 id="String-prototype-split"><a href="#String-prototype-split" class="headerlink" title="String.prototype.split()"></a>String.prototype.split()</h2><blockquote><p><code>split()</code> 方法使用指定的分隔符字符串将一个String对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</p></blockquote><p>语法： <code>str.split(separator, limit)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'The quick brown fox jumps over the lazy dog.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = str.split(<span class="string">' '</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">// expected output: "fox"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chars = str.split(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chars[<span class="number">8</span>]);</span><br><span class="line"><span class="comment">// expected output: "k"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strCopy = str.split();</span><br><span class="line"><span class="built_in">console</span>.log(strCopy);</span><br><span class="line"><span class="comment">// expected output: Array ["The quick brown fox jumps over the lazy dog."]</span></span><br></pre></td></tr></table></figure><p><code>split()</code> 是把一个字符串分割成数组，通常结合 <code>join()</code> 使用， <code>join()</code> 是将一个数组中的所有元素拼接成一个字符串。<br><code>join</code> 也是可以传入一个字符串用于拼接时插入在数组元素之间。</p><h2 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice()"></a>Array.prototype.splice()</h2><blockquote><p><code>splice()</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组, 并以数组形式返回被修改的内容。此方法会改变原数组。</p></blockquote><p>语法： <code>array.splice(start, deleteCount, item1, item2, ...)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">'Jan'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'June'</span>];</span><br><span class="line">months.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'Feb'</span>);</span><br><span class="line"><span class="comment">// inserts at index 1</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array ["Jan", "Feb", "March", "April", "June"]</span></span><br><span class="line"></span><br><span class="line">months.splice(<span class="number">4</span>, <span class="number">1</span>, <span class="string">'May'</span>);</span><br><span class="line"><span class="comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array ["Jan", "Feb", "March", "April", "May"]</span></span><br></pre></td></tr></table></figure><h2 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a>Array.prototype.slice()</h2><blockquote><p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。</p></blockquote><p>语法： <code>arr.slice(begin, end)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">'ant'</span>, <span class="string">'bison'</span>, <span class="string">'camel'</span>, <span class="string">'duck'</span>, <span class="string">'elephant'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["camel", "duck", "elephant"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["camel", "duck"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["bison", "camel", "duck", "elephant"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">-2</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["duck", "elephant"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>, <span class="number">-1</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["camel", "duck"]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;code&gt;String.prototype.split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.prototype.splice()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一直记不得这三个哪个是哪个，加强记忆一下。&lt;br&gt;以下摘录自MDN。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js反转数组的几种方法</title>
    <link href="https://herotiga.github.io/2021/08/27/js%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/08/27/js%E5%8F%8D%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-08-27T01:38:29.000Z</published>
    <updated>2021-09-08T03:07:02.334Z</updated>
    
    <content type="html"><![CDATA[<p>js反转数组的几种方法。</p><a id="more"></a><ol><li><code>reverse()</code></li></ol><p><code>reverse()</code> 会改变原数组，不会返回新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="comment">// [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>reverse()</code>配合展开符<code>...</code></li></ol><p>这种方法不会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里使用展开符产生了一个新数组实例，这个实例和arr一模一样，然后反转这个新数组实例并赋值给一个变量</span></span><br><span class="line"><span class="keyword">let</span> new_arr = [...arr].reverse();</span><br><span class="line"><span class="comment">// [ 4, 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>slice()</code>配合<code>reverse()</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new_arr = arr.slice().reverse();</span><br></pre></td></tr></table></figure><ol start="4"><li><code>reduce()</code>配合<code>...</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new_arr = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [val, ...acc]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同理可以使用<code>reduceRIght</code>和<code>...</code>。</p><ol start="5"><li>遍历每个元素</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new_arr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = arr.length - <span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">    new_arr.push(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js反转数组的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js反转字符串的几种方法</title>
    <link href="https://herotiga.github.io/2021/08/27/js%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/08/27/js%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-08-27T01:38:20.000Z</published>
    <updated>2021-09-08T03:06:40.260Z</updated>
    
    <content type="html"><![CDATA[<p>js反转字符串的几种方法。</p><a id="more"></a><ol><li>先把字符串拆分成数组，再反转数组，最后再转为字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="keyword">let</span> new_str = str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>先把字符串变成数组，再反转，最后再转为字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="keyword">let</span> new_str = [...str].reverse().join(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>遍历字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'abcd'</span>;</span><br><span class="line"><span class="keyword">let</span> len = str.length;</span><br><span class="line"><span class="keyword">let</span> new_str = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    new_str = str[i] + new_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js反转字符串的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js交换两个变量的几种方法</title>
    <link href="https://herotiga.github.io/2021/08/25/js%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/08/25/js%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-08-25T03:04:30.000Z</published>
    <updated>2021-09-09T01:46:51.976Z</updated>
    
    <content type="html"><![CDATA[<p>js交换两个变量的几种方法。</p><a id="more"></a><h2 id="使用临时变量"><a href="#使用临时变量" class="headerlink" title="使用临时变量"></a>使用临时变量</h2><p>优点：直观<br>缺点：比较low</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> param1, param2, tmp;</span><br><span class="line"></span><br><span class="line">tmp = param1;</span><br><span class="line">param1 = param2;</span><br><span class="line">param2 = tmp;</span><br></pre></td></tr></table></figure><h2 id="使用es6解构"><a href="#使用es6解构" class="headerlink" title="使用es6解构"></a>使用es6解构</h2><p>优点：直观</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[param1, param2] = [param2, param1];</span><br></pre></td></tr></table></figure><h2 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h2><p>缺点：不直观，容易溢出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br></pre></td></tr></table></figure><h2 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h2><p>优点：能装逼<br>缺点：不直观</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br></pre></td></tr></table></figure><h2 id="利用数组"><a href="#利用数组" class="headerlink" title="利用数组"></a>利用数组</h2><p>优点：能装逼<br>缺点：不直观</p><p>方法一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [a, b];</span><br><span class="line">b = a[<span class="number">0</span>];</span><br><span class="line">a = a[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [b, b = a][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h2 id="利用对象"><a href="#利用对象" class="headerlink" title="利用对象"></a>利用对象</h2><p>优点：直观</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;</span><br><span class="line">    a: b,</span><br><span class="line">    b: a</span><br><span class="line">&#125;;</span><br><span class="line">b = a.b;</span><br><span class="line">a = a.a;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js交换两个变量的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js数组去重的几种方法</title>
    <link href="https://herotiga.github.io/2021/07/28/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/07/28/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-28T04:01:12.000Z</published>
    <updated>2021-09-08T03:06:52.374Z</updated>
    
    <content type="html"><![CDATA[<p>js数组去重的几种方法。</p><a id="more"></a><h2 id="使用flag"><a href="#使用flag" class="headerlink" title="使用flag"></a>使用flag</h2><p>如果数组元素都是自然数，可以利用数组key都为自然数的特性，value记录对应的key是否已经存在于数组中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> flags = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flags[source[i]]) &#123;</span><br><span class="line">        <span class="comment">// 删除该元素</span></span><br><span class="line">        source.splice(i, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        flags[source[i]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用indexOf-构造只有唯一值数组"><a href="#利用indexOf-构造只有唯一值数组" class="headerlink" title="利用indexOf()构造只有唯一值数组"></a>利用indexOf()构造只有唯一值数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> target = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target.indexOf(source[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">        target.push(source[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter-配合indexOf"><a href="#filter-配合indexOf" class="headerlink" title="filter()配合indexOf()"></a>filter()配合indexOf()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> target = [];</span><br><span class="line"></span><br><span class="line">target = source.filter(</span><br><span class="line">    (value, index) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> source.indexOf(value) == index;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Set-和扩展运算符"><a href="#Set-和扩展运算符" class="headerlink" title="Set()和扩展运算符"></a>Set()和扩展运算符</h2><p><code>Set</code> 是es6新提供的数据类型，它是没有重复值的类数组。<br><code>Set</code> 转化为数组需要通过 <code>[...new Set(arr)]</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> target = [...new <span class="built_in">Set</span>(source)];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js数组去重的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://herotiga.github.io/2021/07/26/quicksort/"/>
    <id>https://herotiga.github.io/2021/07/26/quicksort/</id>
    <published>2021-07-26T12:39:51.000Z</published>
    <updated>2021-08-07T13:03:45.949Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序</p><a id="more"></a><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><article class="message"><div class="message-body"><p>快排的原理是：在数组中选取一个基准，将小于基准的元素放到基准的左边，将大于基准的元素放到基准的右边，递归重复这个过程。</p></div></article><!--     https://kaiwu.lagou.com/course/courseInfo.htm?courseId=1098#/videoDetail?lessonId=8397 --><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><code>a[s]</code> 作为基准元素：</p><figure class="highlight c"><figcaption><span>C</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s &gt;= t) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">// 选择a[s]作为基准</span></span><br><span class="line">    <span class="keyword">int</span> pivot = a[s];</span><br><span class="line">    <span class="comment">// 指针i, j</span></span><br><span class="line">    <span class="keyword">int</span> i = s, j = t;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= pivot) &#123;j--;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= pivot&gt;) &#123;i++;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        a[j] = a[i];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = pivot;</span><br><span class="line">    quicksort(a, s, i<span class="number">-1</span>);</span><br><span class="line">    quicksort(a, i+<span class="number">1</span>, t);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机生成基准元素：</p><figure class="highlight c"><figcaption><span>C</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &gt;= t) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">// 选择a[s]作为基准</span></span><br><span class="line">    <span class="keyword">int</span> r = s + rand() % (t - s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> povit = a[r];</span><br><span class="line">    a[r] = a[s];</span><br><span class="line">    <span class="comment">// 指针i, j</span></span><br><span class="line">    <span class="keyword">int</span> i = s, j = t;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= pivot) &#123;j--;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= pivot&gt;) &#123;i++;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        a[j] = a[i];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = pivot;</span><br><span class="line">    quicksort(a, s, i<span class="number">-1</span>);</span><br><span class="line">    quicksort(a, i+<span class="number">1</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="quickminK"><a href="#quickminK" class="headerlink" title="quickminK"></a>quickminK</h2><p>求一个数组中前k小的元素并排序。</p><p>如果k很小，使用选择排序或者插入排序。</p><p>如果k比较大，可以使用快速排序。</p><figure class="highlight c"><figcaption><span>C</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickmink</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s &gt;= t || s &gt;= k) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">// 选择a[s]作为基准</span></span><br><span class="line">    <span class="keyword">int</span> r = s + rand() % (t - s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> povit = a[r];</span><br><span class="line">    a[r] = a[s];</span><br><span class="line">    <span class="comment">// 指针i, j</span></span><br><span class="line">    <span class="keyword">int</span> i = s, j = t;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= pivot) &#123;j--;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= pivot&gt;) &#123;i++;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        a[j] = a[i];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = pivot;</span><br><span class="line">    quickmink(a, s, i<span class="number">-1</span>, k);</span><br><span class="line">    quickmink(a, i+<span class="number">1</span>, t, k);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="quickselect"><a href="#quickselect" class="headerlink" title="quickselect"></a>quickselect</h2><p>求第k小的元素。</p><figure class="highlight c"><figcaption><span>C</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickselect</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &gt; k - <span class="number">1</span> || t &lt; k - <span class="number">1</span>) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="comment">// 选择a[s]作为基准</span></span><br><span class="line">    <span class="keyword">int</span> r = s + rand() % (t - s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> povit = a[r];</span><br><span class="line">    a[r] = a[s];</span><br><span class="line">    <span class="comment">// 指针i, j</span></span><br><span class="line">    <span class="keyword">int</span> i = s, j = t;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= pivot) &#123;j--;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= pivot&gt;) &#123;i++;&#125;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        a[j] = a[i];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i] = pivot;</span><br><span class="line">    quickselect(a, s, i<span class="number">-1</span>, k);</span><br><span class="line">    quickselect(a, i+<span class="number">1</span>, t, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速排序&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="https://herotiga.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>拷贝一个js对象</title>
    <link href="https://herotiga.github.io/2021/07/21/js-copy-object/"/>
    <id>https://herotiga.github.io/2021/07/21/js-copy-object/</id>
    <published>2021-07-21T10:00:09.000Z</published>
    <updated>2021-09-09T02:36:08.542Z</updated>
    
    <content type="html"><![CDATA[<p>如何拷贝一个js对象，拷贝对象分为拷贝地址、浅拷贝和深拷贝。</p><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>js对象作为引用类型不同于基本类型，基本数据类型的拷贝直接用 <code>=</code> 赋值即可。</p><p>声明一个js变量，并将一个对象赋值给变量，变量此时其实存储的是变量的地址而不是变量的内容。<br>故而，将一个对象变量赋值给另一个变量其实传的是地址，而不是拷贝了一个新的对象。<br>此时原变量以及新变量其实都指向同一个内存地址。</p><p><strong>基本类型保存值，引用类型保存指针。</strong></p><p>比如这样：<br><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/js-copy-obj.png" alt=""></p><p>那么如何拷贝一个对象呢？</p><h1 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h1><p>浅拷贝会申请一块新的内存空间存放对象，但是只能拷贝到原对象的第一层中的基本数据类型，如果原对象第一层中含有对象则拷贝到的这个对象的对象成员依然是地址。</p><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a> 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p><p>会创建新的内存空间，并拷贝第一层，在深层拷贝的依然是地址。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br></pre></td></tr></table></figure><h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><p>展开运算符 <code>...arr</code> 作用是把数组展开。<br>可以使用展开运算符将数组展开、合并数组、合并对象、传参等等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...arr);</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 1 2 3 4 5 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'mason'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line">func(...arr);</span><br></pre></td></tr></table></figure><p>会创建新的内存空间，并拷贝第一层，在深层拷贝的依然是地址。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    ...obj</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>深拷贝就是从内存中开辟新的一块空间用于存放新对象，新的对象与原有对象完全独立并且和原对象一模一样。</p><h2 id="使用JSON方法"><a href="#使用JSON方法" class="headerlink" title="使用JSON方法"></a>使用JSON方法</h2><p>先 <code>JSON.stringify()</code> 再 <code>JSON.parse()</code> ，会忽略 <code>undefined</code> 和函数，无法拷贝原型链上的属性和方法，层级过深会栈溢出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'mason'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br></pre></td></tr></table></figure><h2 id="DFS-递归"><a href="#DFS-递归" class="headerlink" title="DFS(递归)"></a>DFS(递归)</h2><p>无法保持引用，层级很深会栈溢出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 根据传入的是对象还是数组初始化目标对象target</span></span><br><span class="line">    <span class="keyword">let</span> target = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(k)) &#123;</span><br><span class="line">            <span class="comment">// 如果是对象则递归</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[k] === <span class="string">'object'</span>) &#123;</span><br><span class="line">                target[k] = deepCopy(obj[k]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果是基本类型则直接拷贝</span></span><br><span class="line">                target[k] = obj[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防栈溢出"><a href="#防栈溢出" class="headerlink" title="防栈溢出"></a>防栈溢出</h2><p>深层级不会栈溢出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneLoop</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> root = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 栈</span></span><br><span class="line">    <span class="keyword">const</span> loopList = [&#123;</span><br><span class="line">        parent: root,</span><br><span class="line">        key: <span class="literal">undefined</span>,</span><br><span class="line">        data: x,</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (loopList.length) &#123;</span><br><span class="line">        <span class="comment">// 深度优先</span></span><br><span class="line">        <span class="keyword">const</span> node = loopList.pop();</span><br><span class="line">        <span class="keyword">const</span> parent = node.parent;</span><br><span class="line">        <span class="keyword">const</span> key = node.key;</span><br><span class="line">        <span class="keyword">const</span> data = node.data;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素</span></span><br><span class="line">        <span class="keyword">let</span> res = parent;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> key !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">            res = parent[key] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.hasOwnProperty(k)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> data[k] === <span class="string">'object'</span>) &#123;</span><br><span class="line">                    <span class="comment">// 下一次循环</span></span><br><span class="line">                    loopList.push(&#123;</span><br><span class="line">                        parent: res,</span><br><span class="line">                        key: k,</span><br><span class="line">                        data: data[k],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res[k] = data[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何拷贝一个js对象，拷贝对象分为拷贝地址、浅拷贝和深拷贝。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js遍历数组的几种方法</title>
    <link href="https://herotiga.github.io/2021/07/14/js%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>https://herotiga.github.io/2021/07/14/js%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2021-07-14T15:33:32.000Z</published>
    <updated>2021-09-09T02:36:28.125Z</updated>
    
    <content type="html"><![CDATA[<p>js遍历数组的几种方法。</p><a id="more"></a><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>性能第二好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-优化"><a href="#for-优化" class="headerlink" title="for(优化)"></a>for(优化)</h2><p>性能最好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="forEach-原型链方法"><a href="#forEach-原型链方法" class="headerlink" title="forEach(原型链方法)"></a>forEach(原型链方法)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(arr, <span class="function"><span class="keyword">function</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (val <span class="keyword">in</span> arr) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="for…of-es6"><a href="#for…of-es6" class="headerlink" title="for…of(es6)"></a>for…of(es6)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js遍历数组的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js数组去空值</title>
    <link href="https://herotiga.github.io/2021/07/14/js%E6%95%B0%E7%BB%84%E5%8E%BB%E7%A9%BA%E5%80%BC/"/>
    <id>https://herotiga.github.io/2021/07/14/js%E6%95%B0%E7%BB%84%E5%8E%BB%E7%A9%BA%E5%80%BC/</id>
    <published>2021-07-14T02:46:00.000Z</published>
    <updated>2021-09-09T02:36:36.064Z</updated>
    
    <content type="html"><![CDATA[<p>js数组去空值的几种方法。</p><a id="more"></a><h2 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">''</span>,, <span class="literal">undefined</span>, <span class="literal">null</span>,,];</span><br><span class="line"><span class="keyword">var</span> r = removeEmptyElem(arr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEmptyElem</span>(<span class="params">rawArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="comment">// 深拷贝</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rawArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rawArr[i] !== <span class="literal">undefined</span> &amp;&amp; rawArr[i] !== <span class="literal">null</span> &amp;&amp; rawArr[i] !== <span class="string">''</span>) &#123;</span><br><span class="line">            result.push(rawArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter过滤"><a href="#filter过滤" class="headerlink" title="filter过滤"></a>filter过滤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">''</span>,, <span class="literal">undefined</span>, <span class="literal">null</span>,,];</span><br><span class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="splice切片"><a href="#splice切片" class="headerlink" title="splice切片"></a>splice切片</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">''</span>,, <span class="literal">undefined</span>, <span class="literal">null</span>,,];</span><br><span class="line">spliceArr(arr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spliceArr</span>(<span class="params">rawArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rawArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rawArr[i] == <span class="literal">undefined</span> || rawArr[i] == <span class="literal">null</span> || rawArr[i] == <span class="string">''</span>) &#123;</span><br><span class="line">            rawArr.splice(i, <span class="number">1</span>);</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rawArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js数组去空值的几种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://herotiga.github.io/categories/js/"/>
    
    
  </entry>
  
</feed>
