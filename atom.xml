<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Typecasting</title>
  
  <subtitle>write some articles about front-end dev,ui design,linux hacking and ai-cv.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herotiga.github.io/"/>
  <updated>2022-06-28T12:15:49.135Z</updated>
  <id>https://herotiga.github.io/</id>
  
  <author>
    <name>Mason小王子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode-2119-反转两次的数字</title>
    <link href="https://herotiga.github.io/2022/06/28/leetcode-2119-%E5%8F%8D%E8%BD%AC%E4%B8%A4%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://herotiga.github.io/2022/06/28/leetcode-2119-%E5%8F%8D%E8%BD%AC%E4%B8%A4%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2022-06-28T12:12:02.000Z</published>
    <updated>2022-06-28T12:15:49.135Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>反转 一个整数意味着倒置它的所有位。</p><p>例如，反转 2021 得到 1202 。反转 12300 得到 321 ，不保留前导零 。<br>给你一个整数 num ，反转 num 得到 reversed1 ，接着反转 reversed1 得到 reversed2 。如果 reversed2 等于 num ，返回 true ；否则，返回 false 。</p><p>示例 1：</p><pre><code>输入：num = 526输出：true解释：反转 num 得到 625 ，接着反转 625 得到 526 ，等于 num 。</code></pre><p>示例 2：</p><pre><code>输入：num = 1800输出：false解释：反转 num 得到 81 ，接着反转 81 得到 18 ，不等于 num 。</code></pre><p>示例 3：</p><pre><code>输入：num = 0输出：true解释：反转 num 得到 0 ，接着反转 0 得到 0 ，等于 num 。</code></pre><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>数字先转为字符串，再逆转字符串，丢掉前面的0，再逆转字符串，再丢掉前面的0。</p><h3 id="求余"><a href="#求余" class="headerlink" title="求余"></a>求余</h3><p>原始的数字，如果第一位为0，则两次反转后不会丢失。<br>如果最后一位为0，那么在第一次反转后就会丢失。</p><p>故而：如果最后一位为0就return false，如果不为0就return true。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="模拟-1"><a href="#模拟-1" class="headerlink" title="模拟"></a>模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSameAfterReversals = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> numStr = num + <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> numStrReversedArray = numStr.split(<span class="string">''</span>).reverse();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = numStrReversedArray.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numStrReversedArray[i] === <span class="string">'0'</span>) &#123;</span><br><span class="line">            numStrReversedArray.shift();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> numStrReversedArrayResult = numStrReversedArray.reverse();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = numStrReversedArrayResult.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numStrReversedArrayResult[i] === <span class="string">'0'</span>) &#123;</span><br><span class="line">            numStrReversedArrayResult.shift();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = numStrReversedArrayResult.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> numStr === result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/leetcode-5963-%E6%9A%B4%E5%8A%9B.png" alt="执行结果"></p><h3 id="求余-1"><a href="#求余-1" class="headerlink" title="求余"></a>求余</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSameAfterReversals = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">10</span> !== <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/leetcode-5963-%E5%88%86%E6%9E%90.png" alt="执行结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>React组件的生命周期</title>
    <link href="https://herotiga.github.io/2022/06/17/React%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://herotiga.github.io/2022/06/17/React%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-06-17T06:45:31.000Z</published>
    <updated>2022-06-18T06:02:09.976Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于React17版本开始的新的生命周期。</p><p>React组件的生命周期分为三个阶段：Mounting -&gt; Updating -&gt; Unmounting</p><a id="more"></a><p><img src="https://www.runoob.com/wp-content/uploads/2016/02/ogimage.png" alt="组件生命周期"></p><h2 id="Mounting"><a href="#Mounting" class="headerlink" title="Mounting"></a>Mounting</h2><ol><li>调用组件的构造函数<code>constructor()</code>。</li><li>调用<code>getDerivedStateFromProps()</code>，在Mounting和Updating阶段都会被调用。</li><li>调用<code>render()</code>函数，组件初始化一定会调用的只有render函数。</li><li>组件挂载完毕。</li><li>触发<code>componentDidMount()</code>钩子函数。</li></ol><h2 id="Updating"><a href="#Updating" class="headerlink" title="Updating"></a>Updating</h2><p>组件的 <code>props</code> 或者 <code>state</code> 发生变化，组件就会更新。</p><ol><li>调用<code>getDerivedStateFromProps()</code>，根据<code>shouldComponentUpdate()</code>的返回值，判断组件的输出是否受当前state或props更改的影响。</li><li>调用<code>shouldComponentUpdate()</code>。</li><li>调用<code>render()</code>函数，唯一必须会被调用的函数。</li><li>调用<code>getSnapshotBeforeUpdate()</code>，在最近一次渲染输出之前调用。</li><li>组件更新完毕。</li><li>调用<code>componentDidUpdate()</code>，在组件更新后会被立即调用。</li></ol><h2 id="Unmounting"><a href="#Unmounting" class="headerlink" title="Unmounting"></a>Unmounting</h2><ol><li>调用<code>componentWillUnmount()</code>钩子函数，在组件卸载及销毁之前直接调用。</li><li>组件被卸载或者销毁。</li></ol><p>可以看出react组件生命周期与vue的组件生命周期有区别但是不大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文基于React17版本开始的新的生命周期。&lt;/p&gt;
&lt;p&gt;React组件的生命周期分为三个阶段：Mounting -&amp;gt; Updating -&amp;gt; Unmounting&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://herotiga.github.io/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>React井字棋实例</title>
    <link href="https://herotiga.github.io/2022/06/17/react%E4%BA%95%E5%AD%97%E6%A3%8B%E5%AE%9E%E4%BE%8B/"/>
    <id>https://herotiga.github.io/2022/06/17/react%E4%BA%95%E5%AD%97%E6%A3%8B%E5%AE%9E%E4%BE%8B/</id>
    <published>2022-06-17T00:29:33.000Z</published>
    <updated>2022-06-17T01:08:54.735Z</updated>
    
    <content type="html"><![CDATA[<p>React官网的入门实例井字棋。</p><p>感觉React比Vue容易学一些，比Vue更加直观简单。</p><a id="more"></a><figure class="highlight jsx"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button className=<span class="string">"square"</span> onClick=&#123;props.onClick&#125;&gt;</span><br><span class="line">      &#123;props.value&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Board extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  renderSquare(i) &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Square</span></span><br><span class="line"><span class="regexp">        value=&#123;this.props.squares[i]&#125;</span></span><br><span class="line"><span class="regexp">        onClick=&#123;() =&gt; this.props.onClick(i)&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">0</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">1</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">2</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="board-row"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div className=<span class="string">"board-row"</span>&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">6</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">7</span>)&#125;</span><br><span class="line">          &#123;<span class="keyword">this</span>.renderSquare(<span class="number">8</span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      history: [</span><br><span class="line">        &#123;</span><br><span class="line">          squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      stepNumber: <span class="number">0</span>,</span><br><span class="line">      xIsNext: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick(i) &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history.slice(<span class="number">0</span>, <span class="keyword">this</span>.state.stepNumber + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> current = history[history.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> squares = current.squares.slice();</span><br><span class="line">    <span class="keyword">if</span> (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    squares[i] = <span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      history: history.concat([</span><br><span class="line">        &#123;</span><br><span class="line">          squares: squares</span><br><span class="line">        &#125;</span><br><span class="line">      ]),</span><br><span class="line">      stepNumber: history.length,</span><br><span class="line">      xIsNext: !<span class="keyword">this</span>.state.xIsNext</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  jumpTo(step) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      stepNumber: step,</span><br><span class="line">      xIsNext: (step % <span class="number">2</span>) === <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.state.history;</span><br><span class="line">    <span class="keyword">const</span> current = history[<span class="keyword">this</span>.state.stepNumber];</span><br><span class="line">    <span class="keyword">const</span> winner = calculateWinner(current.squares);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> moves = history.map(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> desc = move ?</span><br><span class="line">        <span class="string">'Go to move #'</span> + move :</span><br><span class="line">        <span class="string">'Go to game start'</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;li key=&#123;move&#125;&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.jumpTo(move)&#125;&gt;&#123;desc&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> status;</span><br><span class="line">    <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">      status = <span class="string">"Winner: "</span> + winner;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      status = <span class="string">"Next player: "</span> + (<span class="keyword">this</span>.state.xIsNext ? <span class="string">"X"</span> : <span class="string">"O"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"game"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"game-board"</span>&gt;</span><br><span class="line">          &lt;Board</span><br><span class="line">            squares=&#123;current.squares&#125;</span><br><span class="line">            onClick=&#123;i =&gt; <span class="keyword">this</span>.handleClick(i)&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;&#123;status&#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;ol&gt;&#123;moves&#125;&lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const root = ReactDOM.createRoot(document.getElementById("root"));</span></span><br><span class="line"><span class="regexp">root.render(&lt;Game /</span>&gt;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateWinner</span>(<span class="params">squares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React官网的入门实例井字棋。&lt;/p&gt;
&lt;p&gt;感觉React比Vue容易学一些，比Vue更加直观简单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://herotiga.github.io/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue teleport to</title>
    <link href="https://herotiga.github.io/2022/06/05/Vue-teleport-to/"/>
    <id>https://herotiga.github.io/2022/06/05/Vue-teleport-to/</id>
    <published>2022-06-05T00:01:32.000Z</published>
    <updated>2022-06-05T00:49:33.003Z</updated>
    
    <content type="html"><![CDATA[<p>官网文档写的过于啰嗦。</p><p>一句话总结就是： <code>teleport</code> 组件用于包裹html代码或者组件，配合 <code>to</code> 可以指定包裹的内容被渲染到哪个标签之下（使用类似jQuery的选择器指定标签，使用id，class等选择器，不要使用标签选择器）。</p><a id="more"></a><h2 id="teleport-to"><a href="#teleport-to" class="headerlink" title="teleport, to"></a>teleport, to</h2><p>如果在父组件parent中使用了teleport包裹子组件child，那么在代码逻辑上child依然是parent的子组件，但是可以指定teleport的to属性为parent之外的位置，这样就改变了child渲染的位置。</p><p>在同一个目标上使用teleport，多个teleport可以将内容追加挂载到同一个标签之下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">"#modals"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">"#modals"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- result--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"modals"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>禁用teleport，给teleport添加 <code>disabled</code> 属性，值为Boolean。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li>docs: <a href="https://v3.cn.vuejs.org/guide/teleport.html">https://v3.cn.vuejs.org/guide/teleport.html</a></li><li>API: <a href="https://v3.cn.vuejs.org/api/built-in-components.html#teleport">https://v3.cn.vuejs.org/api/built-in-components.html#teleport</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网文档写的过于啰嗦。&lt;/p&gt;
&lt;p&gt;一句话总结就是： &lt;code&gt;teleport&lt;/code&gt; 组件用于包裹html代码或者组件，配合 &lt;code&gt;to&lt;/code&gt; 可以指定包裹的内容被渲染到哪个标签之下（使用类似jQuery的选择器指定标签，使用id，class等选择器，不要使用标签选择器）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue获取页面元素</title>
    <link href="https://herotiga.github.io/2022/06/04/Vue%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0/"/>
    <id>https://herotiga.github.io/2022/06/04/Vue%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0/</id>
    <published>2022-06-03T23:09:17.000Z</published>
    <updated>2022-06-03T23:18:24.563Z</updated>
    
    <content type="html"><![CDATA[<p>Vue如何像jQuery一样获取页面DOM呢？</p><p>尽量不要直接操作DOM。</p><a id="more"></a><p>Vue可以在元素或者组件上使用 <code>ref=&quot;refname&quot;</code> 来给元素或者组件一个锚点。</p><p>然后可以使用 <code>this.$refs.refname</code> 来获取元素。</p><h2 id="在组件内部使用ref"><a href="#在组件内部使用ref" class="headerlink" title="在组件内部使用ref"></a>在组件内部使用ref</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'base-input'</span>, &#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input ref="input" /&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        focusInput() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.input.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">this</span>.focusInput()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="在父组件中使用ref"><a href="#在父组件中使用ref" class="headerlink" title="在父组件中使用ref"></a>在父组件中使用ref</h2><p>比如在父组件中使用上面定义的子组件 <code>base-input</code> ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中，在子组件上写ref --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">"usernameInput"</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件中获取子组件</span></span><br><span class="line"><span class="keyword">this</span>.$refs.usernameInput.focusInput()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue如何像jQuery一样获取页面DOM呢？&lt;/p&gt;
&lt;p&gt;尽量不要直接操作DOM。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue异步组件以及配合suspense使用</title>
    <link href="https://herotiga.github.io/2022/06/04/Vue%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://herotiga.github.io/2022/06/04/Vue%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</id>
    <published>2022-06-03T22:45:47.000Z</published>
    <updated>2022-06-03T23:06:15.062Z</updated>
    
    <content type="html"><![CDATA[<p>异步组件的使用场景是，当一个项目被分成很多歌组件的时候，当在一个组件中需要到另一个组件的时候，可以使用异步组件的方式异步请求一个服务器上的组件。</p><a id="more"></a><p>异步组件的核心是使用 <code>Vue.defineAsyncComponent</code> 方法，参数是一个Promise工厂函数。</p><p>具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Vue.defineAsyncComponent方法</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    createApp,</span><br><span class="line">    defineAsyncComponent</span><br><span class="line">&#125; = Vue</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'async-example'</span>, defineAsyncComponent(</span><br><span class="line">    () =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">            template: <span class="string">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>或者如果使用webpack的话可以这样动态导入组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    defineAsyncComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">app.component(<span class="string">'async-component'</span>, defineAsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./components/AsyncComponent.vue'</span>)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>在局部注册的组件中使用动态组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    createApp,</span><br><span class="line">    defineAsyncComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">createApp(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        AsyncComponent: defineAsyncComponent(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">            <span class="keyword">import</span>(<span class="string">'./components/AsyncComponent.vue'</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>suspense的作用：在异步组件渲染完毕之前展示一些内容用于提升用户体验。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里async-component是一个已经定义好的异步组件，代码省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suspense</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 异步组件加载成功时展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-component</span>&gt;</span><span class="tag">&lt;/<span class="name">async-component</span>&gt;</span>&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 异步组件加载失败时展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>异步组件加载失败！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suspense</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异步组件的使用场景是，当一个项目被分成很多歌组件的时候，当在一个组件中需要到另一个组件的时候，可以使用异步组件的方式异步请求一个服务器上的组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue动态组件及其缓存</title>
    <link href="https://herotiga.github.io/2022/06/04/Vue%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%85%B6%E7%BC%93%E5%AD%98/"/>
    <id>https://herotiga.github.io/2022/06/04/Vue%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%85%B6%E7%BC%93%E5%AD%98/</id>
    <published>2022-06-03T22:28:43.000Z</published>
    <updated>2022-06-03T22:37:44.359Z</updated>
    
    <content type="html"><![CDATA[<p>Vue可以使用 <code>:is</code> 来绑定动态组件。</p><a id="more"></a><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下面的组件绑定了一个activeComponent变量，activeComponent是一个组件名，改变activeComponent的值可以达到切换组件的作用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"activeComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面component组件的每一次切换会导致其被一次次创建和销毁，在一些不需要重新渲染的场景比如tab的切换就无端增加了开销。</p><p>下面是缓存动态组件的方法。</p><h2 id="缓存动态组件"><a href="#缓存动态组件" class="headerlink" title="缓存动态组件"></a>缓存动态组件</h2><p>只需要用 <code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code> 将动态组件包裹起来即可缓存失活的组件，这样失活的组件就不会被销毁和再创建，减少了开销。</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"activeComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue可以使用 &lt;code&gt;:is&lt;/code&gt; 来绑定动态组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue中使用Lodash实现防抖和节流</title>
    <link href="https://herotiga.github.io/2022/06/03/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8Lodash%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://herotiga.github.io/2022/06/03/Vue%E4%B8%AD%E4%BD%BF%E7%94%A8Lodash%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2022-06-03T06:50:45.000Z</published>
    <updated>2022-06-03T06:54:55.288Z</updated>
    
    <content type="html"><![CDATA[<p>Lodash实现防抖和节流。</p><a id="more"></a><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>为了实现lodash组件独立，需要在 <code>created</code> 中添加函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">app.component(<span class="string">'save-button'</span>, &#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="comment">// 使用 Lodash 实现防抖</span></span><br><span class="line">        <span class="keyword">this</span>.debouncedClick = _.debounce(<span class="keyword">this</span>.click, <span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    unmounted() &#123;</span><br><span class="line">        <span class="comment">// 移除组件时，取消定时器</span></span><br><span class="line">        <span class="keyword">this</span>.debouncedClick.cancel()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        click() &#123;</span><br><span class="line">            <span class="comment">// ... 响应点击 ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button @click="debouncedClick"&gt;</span></span><br><span class="line"><span class="string">      Save</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ol><li><a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lodash实现防抖和节流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue模板表达式中所能访问的全局变量</title>
    <link href="https://herotiga.github.io/2022/06/03/Vue%E6%A8%A1%E6%9D%BF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E6%89%80%E8%83%BD%E8%AE%BF%E9%97%AE%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>https://herotiga.github.io/2022/06/03/Vue%E6%A8%A1%E6%9D%BF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E6%89%80%E8%83%BD%E8%AE%BF%E9%97%AE%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</id>
    <published>2022-06-03T06:34:33.000Z</published>
    <updated>2022-06-03T06:48:54.839Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的模板表达式是放在沙盒中的，只能访问一个受限的全局变量列表。</p><p>具体在模板表达式中可以访问到哪些全局变量，如下。</p><a id="more"></a><p>code: <a href="https://github.com/vuejs/core/blob/main/packages/shared/src/globalsWhitelist.ts#L3">https://github.com/vuejs/core/blob/main/packages/shared/src/globalsWhitelist.ts#L3</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; makeMap &#125; <span class="keyword">from</span> <span class="string">'./makeMap'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> GLOBALS_WHITE_LISTED =</span><br><span class="line">  <span class="string">'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,'</span> +</span><br><span class="line">  <span class="string">'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,'</span> +</span><br><span class="line">  <span class="string">'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> isGloballyWhitelisted = <span class="comment">/*#__PURE__*/</span> makeMap(GLOBALS_WHITE_LISTED)</span><br></pre></td></tr></table></figure><p>同时，使用模板时应该遵守一条原则：模板中的表达式不应该有副作用，比如更改数据或者触发异步进程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的模板表达式是放在沙盒中的，只能访问一个受限的全局变量列表。&lt;/p&gt;
&lt;p&gt;具体在模板表达式中可以访问到哪些全局变量，如下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>JSX语法</title>
    <link href="https://herotiga.github.io/2022/06/02/jsx%E8%AF%AD%E6%B3%95/"/>
    <id>https://herotiga.github.io/2022/06/02/jsx%E8%AF%AD%E6%B3%95/</id>
    <published>2022-06-02T08:40:01.000Z</published>
    <updated>2022-06-18T06:36:21.127Z</updated>
    
    <content type="html"><![CDATA[<p>JSX是JavaScript的扩展语法，react使用JSX代替JavaScript。</p><p>使用JSX需要引入babel。</p><a id="more"></a><h2 id="JSX语法规则"><a href="#JSX语法规则" class="headerlink" title="JSX语法规则"></a>JSX语法规则</h2><ol><li>创建VDOM不能用引号包裹html代码。</li><li>标签中使用<code>{}</code>包裹js表达式。</li><li>用<code>className</code>代替<code>class</code>，用<code>htmlFor</code>代替<code>for</code>。</li><li>标签style属性的值要用两对花括号包裹，花括号中间是属性名:属性值的写法，用逗号隔开。</li><li>只能有一个根标签。</li><li>所有标签都要闭合。</li><li>react对于大写开头的标签会渲染对应的组件，对于正常的html标签不作处理。</li></ol><h2 id="如何创建组件"><a href="#如何创建组件" class="headerlink" title="如何创建组件"></a>如何创建组件</h2><ol><li>直接创建VDOM变量，然后用render函数渲染</li></ol><p>使用babel解析JSX语法。</p><figure class="highlight jsx"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建VDOM</span></span><br><span class="line"><span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#123;data.id.toLowerCase()&#125;</span>&gt;</span>hello, it's me!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">// react渲染VDOM</span></span><br><span class="line">ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">"container_id"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载VDOM</span></span><br><span class="line">ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">"container_id"</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li>使用函数创建VDOM</li></ol><figure class="highlight jsx"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">componentA</span>(<span class="params">porps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name, age&#125; = props;</span><br><span class="line">    <span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>my name is : &#123;name&#125;, and &#123;age&#125; yo.<span class="tag">&lt;<span class="name">div</span>/&gt;</span>;</span></span><br><span class="line"><span class="xml">    return VDOM;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用class创建VDOM</li></ol><figure class="highlight jsx"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">componentB</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            name: <span class="string">'Mason'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;&#123;<span class="keyword">this</span>.state.name&#125; &lt;div /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块和组件"><a href="#模块和组件" class="headerlink" title="模块和组件"></a>模块和组件</h2><p>react的模块和组件思想和vue一样。</p><p>react组件分为函数式组件和类式组件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSX是JavaScript的扩展语法，react使用JSX代替JavaScript。&lt;/p&gt;
&lt;p&gt;使用JSX需要引入babel。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://herotiga.github.io/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue中的updated和$nextTick</title>
    <link href="https://herotiga.github.io/2022/06/02/Vue%E4%B8%AD%E7%9A%84updated%E5%92%8C$nextTick/"/>
    <id>https://herotiga.github.io/2022/06/02/Vue%E4%B8%AD%E7%9A%84updated%E5%92%8C$nextTick/</id>
    <published>2022-06-02T02:31:44.000Z</published>
    <updated>2022-06-02T02:53:36.141Z</updated>
    
    <content type="html"><![CDATA[<p><code>updated</code> 和 <code>$nextTick</code> 的区别是什么？</p><p>网上资料有限，等有时间详细阅读一下官网这部分的文档。</p><a id="more"></a><h2 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h2><p>范围：全局</p><p>用途：数据变更导致虚拟dom被重新渲染，updated用于组件被重新渲染后调用。</p><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><p>范围：局部</p><p>用途：传入一个回调函数，会在下次dom更新循环之后时执行，一般用于更新了数据之后要立刻获取的情况。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>两者都是在dom更新后用于操作dom或者获取数据。</p><p>不同的是，updated发生在dom渲染后，$nextTick发生在渲染前。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;updated&lt;/code&gt; 和 &lt;code&gt;$nextTick&lt;/code&gt; 的区别是什么？&lt;/p&gt;
&lt;p&gt;网上资料有限，等有时间详细阅读一下官网这部分的文档。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue2和Vue3组件生命周期对比</title>
    <link href="https://herotiga.github.io/2022/06/02/Vue2%E5%92%8CVue3%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%AF%B9%E6%AF%94/"/>
    <id>https://herotiga.github.io/2022/06/02/Vue2%E5%92%8CVue3%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%AF%B9%E6%AF%94/</id>
    <published>2022-06-02T02:23:13.000Z</published>
    <updated>2022-06-03T06:08:14.682Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的生命周期其实就是Vue从初始化到最终被销毁期间的一系列重要节点。</p><p>可以在生命周期钩子函数中写一写代码执行一些操作。</p><p>Vue3的组件生命周期相比于Vue2发生了以下变化。</p><a id="more"></a><h2 id="Vue2组件生命周期"><a href="#Vue2组件生命周期" class="headerlink" title="Vue2组件生命周期"></a>Vue2组件生命周期</h2><ol><li>beforeCreate():实例在内存中被创建出来，还没有初始化好data和methods属性。</li><li>create():实例已经在内存中创建，已经初始化好data和method，此时还没有开始编译模板。</li><li>beforeMount():已经完成了模板的编译，还没有挂载到页面中。</li><li>mounted()：将编译好的模板挂载到页面指定的容器中显示。</li><li>beforeUpdate():状态更新之前执行函数，此时data中的状态值是最新的，但是界面上显示的数据还是旧的，因为还没有开始重新渲染DOM节点。</li><li>updated():此时data中的状态值和界面上显示的数据都已经完成了跟新，界面已经被重新渲染好了！</li><li>beforeDestroy():实例被销毁之前。</li><li>destroyed():实例销毁后调用，Vue实例指示的所有东西都会解绑，所有的事件监听器都会被移除,所有的子实例也都会被销毁。组件已经被完全销毁，此时组建中所有data、methods、以及过滤器，指令等，都已经不可用了。</li></ol><h2 id="Vue3组件生命周期"><a href="#Vue3组件生命周期" class="headerlink" title="Vue3组件生命周期"></a>Vue3组件生命周期</h2><ol><li>setup() :开始创建组件之前，在beforeCreate和created之前执行。创建的是data和method</li><li>onBeforeMount() : 组件挂载到节点上之前执行的函数。</li><li>onMounted() : 组件挂载完成后执行的函数。</li><li>onBeforeUpdate(): 组件更新之前执行的函数。</li><li>onUpdated(): 组件更新完成之后执行的函数。</li><li>onBeforeUnmount(): 组件卸载之前执行的函数。</li><li>onUnmounted(): 组件卸载完成后执行的函数</li><li>onActivated(): 被包含在中的组件，会多出两个生命周期钩子函数。被激活时执行。</li><li>onDeactivated(): 比如从 A 组件，切换到 B 组件，A 组件消失时执行。</li><li>onErrorCaptured(): 当捕获一个来自子孙组件的异常时激活钩子函数。</li></ol><p><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="Vue3生命周期"></p><h2 id="横向对比"><a href="#横向对比" class="headerlink" title="横向对比"></a>横向对比</h2><pre><code>Vue2--------------vue3beforeCreate  -&gt; setup()created       -&gt; setup()beforeMount   -&gt; onBeforeMountmounted       -&gt; onMountedbeforeUpdate  -&gt; onBeforeUpdateupdated       -&gt; onUpdatedbeforeDestroy -&gt; onBeforeUnmountdestroyed     -&gt; onUnmountedactivated     -&gt; onActivateddeactivated   -&gt; onDeactivatederrorCaptured -&gt; onErrorCaptured</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的生命周期其实就是Vue从初始化到最终被销毁期间的一系列重要节点。&lt;/p&gt;
&lt;p&gt;可以在生命周期钩子函数中写一写代码执行一些操作。&lt;/p&gt;
&lt;p&gt;Vue3的组件生命周期相比于Vue2发生了以下变化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>防止SQL注入</title>
    <link href="https://herotiga.github.io/2022/05/31/%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://herotiga.github.io/2022/05/31/%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2022-05-31T12:13:13.000Z</published>
    <updated>2022-05-31T12:24:39.016Z</updated>
    
    <content type="html"><![CDATA[<p>SQL注入是指用户在表单中提交恶意SQL语句企图欺骗后台执行恶意SQL。</p><p>为了防止出现SQL注入，我们假定用户的输入不安全并且需要对用户的输入做处理。</p><a id="more"></a><h2 id="预防方法"><a href="#预防方法" class="headerlink" title="预防方法"></a>预防方法</h2><ol><li>对用户的输入进行校验、限制。</li><li>不要动态拼装SQL。</li><li>不要使用管理员权限操作数据库，做好账号权限划分。</li><li>对于敏感信息进行加密或者hash。</li><li>封装异常返回信息，伪装内部错误信息。</li><li>采用SQL辅助检测工具。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL注入是指用户在表单中提交恶意SQL语句企图欺骗后台执行恶意SQL。&lt;/p&gt;
&lt;p&gt;为了防止出现SQL注入，我们假定用户的输入不安全并且需要对用户的输入做处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://herotiga.github.io/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL和NoSQL的区别和优缺点</title>
    <link href="https://herotiga.github.io/2022/05/31/sql-and-nosql/"/>
    <id>https://herotiga.github.io/2022/05/31/sql-and-nosql/</id>
    <published>2022-05-30T23:27:36.000Z</published>
    <updated>2022-05-31T00:04:40.163Z</updated>
    
    <content type="html"><![CDATA[<p>关系型数据库：Oracle、DB2、Microsoft SQL Server、Microsoft Access、MySQL、MariaDB、Sybase、PostgreSQL、OceanBase、SqLite等。</p><p>非关系型数据库：Cloudant、MongoDB、Redis、HBase、Memcached等。</p><a id="more"></a><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>关系型数据库：建立在关系数据模型的基础上（由一张张二维的表和表之间的关系组成），借助集合代数等运算处理数据，比如使用了选择、投影、连接、并、交、差、除、增删查改等数学方法来实现对数据的存储和查询。可以用SQL语句在一个或者多个table中做复杂的数据查询。</li><li>非关系型数据库：可以是键值对(key, value)、文件、图片等，无需SQL解析，性能非常高，不适合复杂查询，用于超大规模数据的存储。</li></ol><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ol><li>关系型数据库：易于维护，可以用SQL做复杂的查询，安全性高。读写性能差，高并发读写下磁盘IO大，表结构固定故而不灵活，</li><li>非关系型数据库：性能非常高，数据无耦合，易于横向扩展。不支持SQL，无事务处理，数据结构复杂造成复杂查询较为困难，</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关系型数据库：Oracle、DB2、Microsoft SQL Server、Microsoft Access、MySQL、MariaDB、Sybase、PostgreSQL、OceanBase、SqLite等。&lt;/p&gt;
&lt;p&gt;非关系型数据库：Cloudant、MongoDB、Redis、HBase、Memcached等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="database" scheme="https://herotiga.github.io/categories/database/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue组件通信的几种方式</title>
    <link href="https://herotiga.github.io/2022/05/28/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://herotiga.github.io/2022/05/28/Vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-05-28T06:25:49.000Z</published>
    <updated>2022-06-18T06:25:14.220Z</updated>
    
    <content type="html"><![CDATA[<p>组件的数据有三种形态：props，data，computed。</p><p>下面的方法要么是通过某种方法使得组件之间直接通信，要么是使用了第三方作为中转。</p><a id="more"></a><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="props-emit"><a href="#props-emit" class="headerlink" title="props/$emit"></a>props/$emit</h2><p>可以实现父子组件之间的通信。</p><p>父组件通过 <code>props</code> 向子组件传递数据。</p><p>子组件通过 <code>$emit</code> 触发事件向父组件传递数据，父组件通过 <code>v-on</code> 监听这个事件从而获取子组件传递的数据。</p><p>代码省略。</p><h2 id="事件中心"><a href="#事件中心" class="headerlink" title="事件中心"></a>事件中心</h2><p>可以实现任何组件之间的通信。</p><p>通过new一个空的Vue实例作为事件中心，相当于是一个发布订阅。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发指定事件并携带数据</span></span><br><span class="line">Event.$emit(eventName, data);</span><br><span class="line"><span class="comment">// 监听指定事件并获取数据</span></span><br><span class="line">Event.$on(eventName, (data) =&gt; &#123;</span><br><span class="line">    <span class="comment">// get data</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里还可以使用一个发布订阅mudule叫pubsub，支持vue和react。</p><p>pubsub可以publish一个信息并携带一个payload，也可以subscribe一个信息并在回调函数的参数中获取payload。</p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>可以实现任何组件之间的通信。</p><ul><li>state存储数据，不能直接操作state，需要通过vuex的方法集操作state。</li><li>组件通过mutations操作state中的数据。</li><li>actions用于异步操作，最终提交mutations操作。</li></ul><p>vuex数据持久化到localStorage。</p><ul><li>将vuex数据持久化到locaStorage前要先<code>JSON.stringify()</code>为字符串。</li><li>将localStorage中的数据取出时要<code>JSON.parse()</code>为数组。</li></ul><h2 id="attrs-listeners"><a href="#attrs-listeners" class="headerlink" title="attrs/listeners"></a>attrs/listeners</h2><p>hexo将标题两个 <code>$</code> 包裹的部分渲染为了数学公式故而没写美元符号。</p><p><code>$attrs</code> 对象：包含了父组件传递了但是子组件props中没有暴露的属性。<br><code>$listeners</code> 对象：存放的是父组件中绑定的非原生事件。</p><h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h2><p>祖父组件通过provide向后代组件传递变量，注意祖父组件的provide要写成工厂函数。<br>后代组件通过inject来注入变量。<br>祖父组件provide的变量是不会变动的。</p><p>使用 <code>Vue.observable</code> 可以实现祖父组件provide的变量改变后，后代组件inject的变量也能响应式的改变。</p><h2 id="parent-children-ref"><a href="#parent-children-ref" class="headerlink" title="parent, children, ref"></a>parent, children, ref</h2><p><code>$parent</code> 和 <code>$children</code> 用于访问父子组件实例。</p><p><code>ref</code> 用于普通元素就是指向该DOM，如果用于组件就是指向组件实例，可以直接获取组件实例的所有数据方法。</p><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ol><li><a href="https://segmentfault.com/a/1190000019208626">https://segmentfault.com/a/1190000019208626</a></li><li><a href="https://vue3js.cn/interview/vue/communication.html">https://vue3js.cn/interview/vue/communication.html</a></li><li><a href="https://www.jianshu.com/p/2e5973fe1223">https://www.jianshu.com/p/2e5973fe1223</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件的数据有三种形态：props，data，computed。&lt;/p&gt;
&lt;p&gt;下面的方法要么是通过某种方法使得组件之间直接通信，要么是使用了第三方作为中转。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue模板的编译原理</title>
    <link href="https://herotiga.github.io/2022/05/26/Vue%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://herotiga.github.io/2022/05/26/Vue%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
    <published>2022-05-25T23:44:43.000Z</published>
    <updated>2022-05-26T00:55:04.257Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的编译就是将 <code>template</code> 模板转化成 <code>render</code> 函数的过程。</p><p>再通过 <code>render</code> 函数生成最新的vnode，再用vnode去渲染页面。</p><a id="more"></a><p>模板编译过程：</p><ol><li>将模板解析为AST（抽象语法树），可以看做是解析器。</li><li>遍历AST，标记静态节点，可以看做是优化器。</li><li>使用AST生成<code>render</code>函数，可以看做是代码生成器。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的编译就是将 &lt;code&gt;template&lt;/code&gt; 模板转化成 &lt;code&gt;render&lt;/code&gt; 函数的过程。&lt;/p&gt;
&lt;p&gt;再通过 &lt;code&gt;render&lt;/code&gt; 函数生成最新的vnode，再用vnode去渲染页面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue是如何实现双向数据绑定的</title>
    <link href="https://herotiga.github.io/2022/05/25/Vue%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%9A%84/"/>
    <id>https://herotiga.github.io/2022/05/25/Vue%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%9A%84/</id>
    <published>2022-05-25T11:13:29.000Z</published>
    <updated>2022-06-28T00:52:26.201Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的双向数据绑定是通过数据劫持+发布订阅实现的。</p><p>其核心是通过 <code>Object.defineProperty()</code> 中的get和set来实现在数据更新时将新数据发送给使用该数据的地方。</p><a id="more"></a><p>语法：<code>Object.defineProperty(obj, propertyName, descriptor)</code></p><p>其中，descriptor可以是配置对象（configurable，writable，enumerable，value），也可以是getter和setter（但是此时不能设置writable和configurable）。</p><p>具体实现方法是：</p><ol><li>model =&gt; view：在set中将newValue赋值给view。</li><li>view =&gt; model：监听view中数据，将newValue赋值给model。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的双向数据绑定是通过数据劫持+发布订阅实现的。&lt;/p&gt;
&lt;p&gt;其核心是通过 &lt;code&gt;Object.defineProperty()&lt;/code&gt; 中的get和set来实现在数据更新时将新数据发送给使用该数据的地方。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue.js" scheme="https://herotiga.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指Offer-11-旋转数组的最小数字</title>
    <link href="https://herotiga.github.io/2022/05/25/%E5%89%91%E6%8C%87Offer-11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>https://herotiga.github.io/2022/05/25/%E5%89%91%E6%8C%87Offer-11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2022-05-25T04:21:30.000Z</published>
    <updated>2022-05-25T04:42:49.906Z</updated>
    
    <content type="html"><![CDATA[<p>难度：简单</p><a id="more"></a><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 [3, 4, 5, 1, 2] 为 [1, 2, 3, 4, 5] 的一次旋转，该数组的最小值为 1。  </p><p>注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p><p>示例 1：</p><pre><code>输入：numbers = [3, 4, 5, 1, 2]输出：1</code></pre><p>示例 2：</p><pre><code>输入：numbers = [2, 2, 2, 0, 1]输出：0</code></pre><p>提示：</p><ul><li>n == numbers.length</li><li>1 &lt;= n &lt;= 5000</li><li>-5000 &lt;= numbers[i] &lt;= 5000</li><li>numbers 原来是一个升序排序的数组，并进行了 1 至 n 次旋转</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="暴力遍历"><a href="#暴力遍历" class="headerlink" title="暴力遍历"></a>暴力遍历</h3><p>遍历数组，直到找到一个index，其元素值小于前面的一个元素值，如果没有则返回第一个元素值。</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>看代码</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">numbers</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minArray = <span class="function"><span class="keyword">function</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = numbers.length;</span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">1</span>) <span class="keyword">return</span> numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[i] &gt; numbers[i + <span class="number">1</span>]) <span class="keyword">return</span> numbers[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二分查找-1"><a href="#二分查找-1" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">numbers</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minArray = <span class="function"><span class="keyword">function</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = numbers.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">1</span>) <span class="keyword">return</span> numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,</span><br><span class="line">        right = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = left + <span class="built_in">Number</span>.parseInt((right - left) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (numbers[mid] &gt; numbers[right]) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numbers[mid] &lt; numbers[right]) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numbers[left];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Trap"><a href="#Trap" class="headerlink" title="Trap"></a>Trap</h2><pre><code>注意：被旋转的数组后半部分最后一个值小于等于前半部分第一个值。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难度：简单&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分查找" scheme="https://herotiga.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>洗牌算法之Knuth-Shuffle算法</title>
    <link href="https://herotiga.github.io/2022/05/12/Knuth-Shuffle/"/>
    <id>https://herotiga.github.io/2022/05/12/Knuth-Shuffle/</id>
    <published>2022-05-12T00:59:10.000Z</published>
    <updated>2022-05-19T10:58:32.613Z</updated>
    
    <content type="html"><![CDATA[<p>看到好多公众号里写的洗牌算法有问题。</p><a id="more"></a><p>比如，最常见的一种是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sort(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种算法的问题在于 <code>Math.random() - 0.5</code> 会导致左边的元素会堆积在左边，右边的元素会堆积在右边，尽管数组在被洗牌后看起来像是被打乱了。</p><p>洗牌算法的核心应该是找到一个映射方法，将数组中原来的元素value随机放置到数组中一个新的index上。</p><h2 id="Knuth-Shuffle算法"><a href="#Knuth-Shuffle算法" class="headerlink" title="Knuth-Shuffle算法"></a>Knuth-Shuffle算法</h2><p>关于Knuth-Shuffle，CSDN等博客基本写的都有问题。</p><p>我的理解如下：</p><ol><li>一个长度为n的数组，设置一个指针rightPos放在最右边。</li><li>随机选取包含该rightPos在内的前n个元素的其中一个元素，将rightPos元素与其交换，这样可以保证rightPos元素有几率留在原位置。</li><li>rightPos左移一位，重复第2步直到rightPos为0。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  改变原数组并返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> len = <span class="keyword">this</span>.length, i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 指针index</span></span><br><span class="line">        <span class="keyword">let</span> rightPos = i;</span><br><span class="line">        <span class="comment">// 随机选取前i+1个元素的index</span></span><br><span class="line">        <span class="keyword">let</span> randomPos = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 交换两个元素</span></span><br><span class="line">        [<span class="keyword">this</span>[randomPos], <span class="keyword">this</span>[rightPos]] = [<span class="keyword">this</span>[rightPos], <span class="keyword">this</span>[randomPos]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].shuffle();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到好多公众号里写的洗牌算法有问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://herotiga.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数组" scheme="https://herotiga.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>MySQL架构</title>
    <link href="https://herotiga.github.io/2022/05/05/mysql%E6%9E%B6%E6%9E%84/"/>
    <id>https://herotiga.github.io/2022/05/05/mysql%E6%9E%B6%E6%9E%84/</id>
    <published>2022-05-05T14:54:11.000Z</published>
    <updated>2022-05-30T08:14:59.507Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL架构</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/herotiga/cdn@master/img/article/mysql-arch.jpg" alt="mysql-arch"></p><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>连接池的作用是复用连接，避免频繁 create, destroy。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>分析器就是解析 SQL 语句。</p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>优化器会分析 SQL 语句并对其优化。</p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><p>执行器会调用存储引擎的接口来执行 SQL 语句。</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL 有多重存储引擎，用于不同场景。</p><ul><li>InnoDB(最常用)</li><li>MyISAM</li><li>Memory</li><li>CSV</li><li>Archive</li><li>Blackhole</li><li>Merge</li><li>Federated</li><li>Example</li></ul><p>存储引擎就是 MySQL 对于内存和磁盘的读写策略。</p><p>InnoDB 包括了：Buffer Pool(数据存储在其中)和 Log Buffer</p><h2 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h2><p>MySQL 服务器的内存基本都会分配给 Buffer Pool，可以提升 MySQL 的性能。</p><h3 id="页"><a href="#页" class="headerlink" title="页"></a>页</h3><p>Buffer Pool 以页为单位存储。</p><p>一页包含了：</p><ul><li>上一页，下一页两个指针</li><li>User Record(真正存储信息的地方，是一行一行的数据)</li><li>其余字段</li></ul><p>其余字段包含了：</p><ul><li>Infimum 和 Supremum：此页中最大和最小的记录，用于做初步判断。</li><li>Page Directory：页面目录，用于快速查找记录。</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>InnoDB 底层采用的存储结构是 B 树和 B+树。</p><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新数据时，数据不一定在 buffer pool 中，因为不可能数据库中所有的数据都一直在内存中。</p><p>对于聚簇索引：如果数据不在 buffer pool 中，就会将其先加载到内存中再更新。</p><p>对于非聚簇索引：change buffer。</p><h3 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h3><p>MySQL 使用的 LRU 算法的改进版，改进 LRU 算法是为了避免缓冲池污染（先前在 buffer pool 中的页被全部换出去，造成性能下降）</p><h2 id="Log-Buffer"><a href="#Log-Buffer" class="headerlink" title="Log Buffer"></a>Log Buffer</h2><p>用于存储即将被写入到磁盘中的日志。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL架构&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://herotiga.github.io/categories/mysql/"/>
    
    
  </entry>
  
</feed>
